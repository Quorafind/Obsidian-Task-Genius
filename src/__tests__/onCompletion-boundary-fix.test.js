/**
 * Test for onCompletion boundary parsing fix
 *
 * This test specifically verifies that the fix for parsing onCompletion values
 * with file extensions works correctly.
 */
import { MarkdownTaskParser } from "../dataflow/core/ConfigurableTaskParser";
import { getConfig } from "../common/task-parser-config";
describe("OnCompletion Boundary Parsing Fix", () => {
    let parser;
    beforeEach(() => {
        parser = new MarkdownTaskParser(getConfig("tasks"));
    });
    describe("File Extension Boundary Detection", () => {
        test("should stop parsing at .md extension followed by space", () => {
            const content = "- [ ] Task üèÅ move:archive.md #tag1";
            const tasks = parser.parseLegacy(content, "test.md");
            expect(tasks).toHaveLength(1);
            expect(tasks[0].metadata.onCompletion).toBe("move:archive.md");
            expect(tasks[0].metadata.tags).toContain("#tag1");
        });
        test("should stop parsing at .canvas extension followed by space", () => {
            const content = "- [ ] Task üèÅ move:project.canvas #tag1";
            const tasks = parser.parseLegacy(content, "test.md");
            expect(tasks).toHaveLength(1);
            expect(tasks[0].metadata.onCompletion).toBe("move:project.canvas");
            expect(tasks[0].metadata.tags).toContain("#tag1");
        });
        test("should handle file paths with spaces before extension", () => {
            const content = "- [ ] Task üèÅ move:my archive file.md #tag1";
            const tasks = parser.parseLegacy(content, "test.md");
            expect(tasks).toHaveLength(1);
            expect(tasks[0].metadata.onCompletion).toBe("move:my archive file.md");
            expect(tasks[0].metadata.tags).toContain("#tag1");
        });
        test("should handle heading references after file extension", () => {
            const content = "- [ ] Task üèÅ move:archive.md#section-1 #tag1";
            const tasks = parser.parseLegacy(content, "test.md");
            expect(tasks).toHaveLength(1);
            expect(tasks[0].metadata.onCompletion).toBe("move:archive.md#section-1");
            expect(tasks[0].metadata.tags).toContain("#tag1");
        });
        test("should handle complex paths with folders", () => {
            const content = "- [ ] Task üèÅ move:folder/subfolder/archive.md #tag1";
            const tasks = parser.parseLegacy(content, "test.md");
            expect(tasks).toHaveLength(1);
            expect(tasks[0].metadata.onCompletion).toBe("move:folder/subfolder/archive.md");
            expect(tasks[0].metadata.tags).toContain("#tag1");
        });
        test("should handle multiple emojis after file extension", () => {
            const content = "- [ ] Task üèÅ move:done.md üìÖ 2024-01-01 #tag1";
            const tasks = parser.parseLegacy(content, "test.md");
            expect(tasks).toHaveLength(1);
            expect(tasks[0].metadata.onCompletion).toBe("move:done.md");
            expect(tasks[0].metadata.dueDate).toBeDefined();
            expect(tasks[0].metadata.tags).toContain("#tag1");
        });
        test("should not break on files without extensions", () => {
            const content = "- [ ] Task üèÅ delete #tag1";
            const tasks = parser.parseLegacy(content, "test.md");
            expect(tasks).toHaveLength(1);
            expect(tasks[0].metadata.onCompletion).toBe("delete");
            expect(tasks[0].metadata.tags).toContain("#tag1");
        });
        test("should handle edge case with extension in middle of filename", () => {
            const content = "- [ ] Task üèÅ move:file.md.backup #tag1";
            const tasks = parser.parseLegacy(content, "test.md");
            expect(tasks).toHaveLength(1);
            // Should not stop at .md because it's not followed by space or end
            expect(tasks[0].metadata.onCompletion).toBe("move:file.md.backup");
            expect(tasks[0].metadata.tags).toContain("#tag1");
        });
    });
    describe("Regression Tests", () => {
        test("should maintain backward compatibility with simple actions", () => {
            const content = "- [ ] Task üèÅ delete";
            const tasks = parser.parseLegacy(content, "test.md");
            expect(tasks).toHaveLength(1);
            expect(tasks[0].metadata.onCompletion).toBe("delete");
        });
        test("should maintain compatibility with JSON format", () => {
            const content = '- [ ] Task üèÅ {"type":"move","targetFile":"archive.md"}';
            const tasks = parser.parseLegacy(content, "test.md");
            expect(tasks).toHaveLength(1);
            expect(tasks[0].metadata.onCompletion).toBe('{"type":"move","targetFile":"archive.md"}');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25Db21wbGV0aW9uLWJvdW5kYXJ5LWZpeC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsib25Db21wbGV0aW9uLWJvdW5kYXJ5LWZpeC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBRUgsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDN0UsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXpELFFBQVEsQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7SUFDbEQsSUFBSSxNQUEwQixDQUFDO0lBRS9CLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZixNQUFNLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7UUFDbEQsSUFBSSxDQUFDLHdEQUF3RCxFQUFFLEdBQUcsRUFBRTtZQUNuRSxNQUFNLE9BQU8sR0FBRyxxQ0FBcUMsQ0FBQztZQUN0RCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUVyRCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQy9ELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyw0REFBNEQsRUFBRSxHQUFHLEVBQUU7WUFDdkUsTUFBTSxPQUFP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Q0FBQztZQUNuRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7UUFDakMsSUFBSSxDQUFDLDREQUE0RCxFQUFFLEdBQUcsRUFBRTtZQUN2RSxNQUFNLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQztZQUN2QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUVyRCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxnREFBZ0QsRUFBRSxHQUFHLEVBQUU7WUFDM0QsTUFBTSxPQUFPLEdBQUcseURBQXlELENBQUM7WUFDMUUsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFckQsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsMkNBQTJDLENBQUMsQ0FBQztRQUMxRixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogVGVzdCBmb3Igb25Db21wbGV0aW9uIGJvdW5kYXJ5IHBhcnNpbmcgZml4XHJcbiAqIFxyXG4gKiBUaGlzIHRlc3Qgc3BlY2lmaWNhbGx5IHZlcmlmaWVzIHRoYXQgdGhlIGZpeCBmb3IgcGFyc2luZyBvbkNvbXBsZXRpb24gdmFsdWVzXHJcbiAqIHdpdGggZmlsZSBleHRlbnNpb25zIHdvcmtzIGNvcnJlY3RseS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBNYXJrZG93blRhc2tQYXJzZXIgfSBmcm9tIFwiLi4vZGF0YWZsb3cvY29yZS9Db25maWd1cmFibGVUYXNrUGFyc2VyXCI7XHJcbmltcG9ydCB7IGdldENvbmZpZyB9IGZyb20gXCIuLi9jb21tb24vdGFzay1wYXJzZXItY29uZmlnXCI7XHJcblxyXG5kZXNjcmliZShcIk9uQ29tcGxldGlvbiBCb3VuZGFyeSBQYXJzaW5nIEZpeFwiLCAoKSA9PiB7XHJcblx0bGV0IHBhcnNlcjogTWFya2Rvd25UYXNrUGFyc2VyO1xyXG5cclxuXHRiZWZvcmVFYWNoKCgpID0+IHtcclxuXHRcdHBhcnNlciA9IG5ldyBNYXJrZG93blRhc2tQYXJzZXIoZ2V0Q29uZmlnKFwidGFza3NcIikpO1xyXG5cdH0pO1xyXG5cclxuXHRkZXNjcmliZShcIkZpbGUgRXh0ZW5zaW9uIEJvdW5kYXJ5IERldGVjdGlvblwiLCAoKSA9PiB7XHJcblx0XHR0ZXN0KFwic2hvdWxkIHN0b3AgcGFyc2luZyBhdCAubWQgZXh0ZW5zaW9uIGZvbGxvd2VkIGJ5IHNwYWNlXCIsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgY29udGVudCA9IFwiLSBbIF0gVGFzayDwn4+BIG1vdmU6YXJjaGl2ZS5tZCAjdGFnMVwiO1xyXG5cdFx0XHRjb25zdCB0YXNrcyA9IHBhcnNlci5wYXJzZUxlZ2FjeShjb250ZW50LCBcInRlc3QubWRcIik7XHJcblxyXG5cdFx0XHRleHBlY3QodGFza3MpLnRvSGF2ZUxlbmd0aCgxKTtcclxuXHRcdFx0ZXhwZWN0KHRhc2tzWzBdLm1ldGFkYXRhLm9uQ29tcGxldGlvbikudG9CZShcIm1vdmU6YXJjaGl2ZS5tZFwiKTtcclxuXHRcdFx0ZXhwZWN0KHRhc2tzWzBdLm1ldGFkYXRhLnRhZ3MpLnRvQ29udGFpbihcIiN0YWcxXCIpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGVzdChcInNob3VsZCBzdG9wIHBhcnNpbmcgYXQgLmNhbnZhcyBleHRlbnNpb24gZm9sbG93ZWQgYnkgc3BhY2VcIiwgKCkgPT4ge1xyXG5cdFx0XHRjb25zdCBjb250ZW50ID0gXCItIFsgXSBUYXNrIPCfj4EgbW92ZTpwcm9qZWN0LmNhbnZhcyAjdGFnMVwiO1xyXG5cdFx0XHRjb25zdCB0YXNrcyA9IHBhcnNlci5wYXJzZUxlZ2FjeShjb250ZW50LCBcInRlc3QubWRcIik7XHJcblxyXG5cdFx0XHRleHBlY3QodGFza3MpLnRvSGF2ZUxlbmd0aCgxKTtcclxuXHRcdFx0ZXhwZWN0KHRhc2tzWzBdLm1ldGFkYXRhLm9uQ29tcGxldGlvbikudG9CZShcIm1vdmU6cHJvamVjdC5jYW52YXNcIik7XHJcblx0XHRcdGV4cGVjdCh0YXNrc1swXS5tZXRhZGF0YS50YWdzKS50b0NvbnRhaW4oXCIjdGFnMVwiKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRlc3QoXCJzaG91bGQgaGFuZGxlIGZpbGUgcGF0aHMgd2l0aCBzcGFjZXMgYmVmb3JlIGV4dGVuc2lvblwiLCAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IGNvbnRlbnQgPSBcIi0gWyBdIFRhc2sg8J+PgSBtb3ZlOm15IGFyY2hpdmUgZmlsZS5tZCAjdGFnMVwiO1xyXG5cdFx0XHRjb25zdCB0YXNrcyA9IHBhcnNlci5wYXJzZUxlZ2FjeShjb250ZW50LCBcInRlc3QubWRcIik7XHJcblxyXG5cdFx0XHRleHBlY3QodGFza3MpLnRvSGF2ZUxlbmd0aCgxKTtcclxuXHRcdFx0ZXhwZWN0KHRhc2tzWzBdLm1ldGFkYXRhLm9uQ29tcGxldGlvbikudG9CZShcIm1vdmU6bXkgYXJjaGl2ZSBmaWxlLm1kXCIpO1xyXG5cdFx0XHRleHBlY3QodGFza3NbMF0ubWV0YWRhdGEudGFncykudG9Db250YWluKFwiI3RhZzFcIik7XHJcblx0XHR9KTtcclxuXHJcblx0XHR0ZXN0KFwic2hvdWxkIGhhbmRsZSBoZWFkaW5nIHJlZmVyZW5jZXMgYWZ0ZXIgZmlsZSBleHRlbnNpb25cIiwgKCkgPT4ge1xyXG5cdFx0XHRjb25zdCBjb250ZW50ID0gXCItIFsgXSBUYXNrIPCfj4EgbW92ZTphcmNoaXZlLm1kI3NlY3Rpb24tMSAjdGFnMVwiO1xyXG5cdFx0XHRjb25zdCB0YXNrcyA9IHBhcnNlci5wYXJzZUxlZ2FjeShjb250ZW50LCBcInRlc3QubWRcIik7XHJcblxyXG5cdFx0XHRleHBlY3QodGFza3MpLnRvSGF2ZUxlbmd0aCgxKTtcclxuXHRcdFx0ZXhwZWN0KHRhc2tzWzBdLm1ldGFkYXRhLm9uQ29tcGxldGlvbikudG9CZShcIm1vdmU6YXJjaGl2ZS5tZCNzZWN0aW9uLTFcIik7XHJcblx0XHRcdGV4cGVjdCh0YXNrc1swXS5tZXRhZGF0YS50YWdzKS50b0NvbnRhaW4oXCIjdGFnMVwiKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRlc3QoXCJzaG91bGQgaGFuZGxlIGNvbXBsZXggcGF0aHMgd2l0aCBmb2xkZXJzXCIsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgY29udGVudCA9IFwiLSBbIF0gVGFzayDwn4+BIG1vdmU6Zm9sZGVyL3N1YmZvbGRlci9hcmNoaXZlLm1kICN0YWcxXCI7XHJcblx0XHRcdGNvbnN0IHRhc2tzID0gcGFyc2VyLnBhcnNlTGVnYWN5KGNvbnRlbnQsIFwidGVzdC5tZFwiKTtcclxuXHJcblx0XHRcdGV4cGVjdCh0YXNrcykudG9IYXZlTGVuZ3RoKDEpO1xyXG5cdFx0XHRleHBlY3QodGFza3NbMF0ubWV0YWRhdGEub25Db21wbGV0aW9uKS50b0JlKFwibW92ZTpmb2xkZXIvc3ViZm9sZGVyL2FyY2hpdmUubWRcIik7XHJcblx0XHRcdGV4cGVjdCh0YXNrc1swXS5tZXRhZGF0YS50YWdzKS50b0NvbnRhaW4oXCIjdGFnMVwiKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRlc3QoXCJzaG91bGQgaGFuZGxlIG11bHRpcGxlIGVtb2ppcyBhZnRlciBmaWxlIGV4dGVuc2lvblwiLCAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IGNvbnRlbnQgPSBcIi0gWyBdIFRhc2sg8J+PgSBtb3ZlOmRvbmUubWQg8J+ThSAyMDI0LTAxLTAxICN0YWcxXCI7XHJcblx0XHRcdGNvbnN0IHRhc2tzID0gcGFyc2VyLnBhcnNlTGVnYWN5KGNvbnRlbnQsIFwidGVzdC5tZFwiKTtcclxuXHJcblx0XHRcdGV4cGVjdCh0YXNrcykudG9IYXZlTGVuZ3RoKDEpO1xyXG5cdFx0XHRleHBlY3QodGFza3NbMF0ubWV0YWRhdGEub25Db21wbGV0aW9uKS50b0JlKFwibW92ZTpkb25lLm1kXCIpO1xyXG5cdFx0XHRleHBlY3QodGFza3NbMF0ubWV0YWRhdGEuZHVlRGF0ZSkudG9CZURlZmluZWQoKTtcclxuXHRcdFx0ZXhwZWN0KHRhc2tzWzBdLm1ldGFkYXRhLnRhZ3MpLnRvQ29udGFpbihcIiN0YWcxXCIpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGVzdChcInNob3VsZCBub3QgYnJlYWsgb24gZmlsZXMgd2l0aG91dCBleHRlbnNpb25zXCIsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgY29udGVudCA9IFwiLSBbIF0gVGFzayDwn4+BIGRlbGV0ZSAjdGFnMVwiO1xyXG5cdFx0XHRjb25zdCB0YXNrcyA9IHBhcnNlci5wYXJzZUxlZ2FjeShjb250ZW50LCBcInRlc3QubWRcIik7XHJcblxyXG5cdFx0XHRleHBlY3QodGFza3MpLnRvSGF2ZUxlbmd0aCgxKTtcclxuXHRcdFx0ZXhwZWN0KHRhc2tzWzBdLm1ldGFkYXRhLm9uQ29tcGxldGlvbikudG9CZShcImRlbGV0ZVwiKTtcclxuXHRcdFx0ZXhwZWN0KHRhc2tzWzBdLm1ldGFkYXRhLnRhZ3MpLnRvQ29udGFpbihcIiN0YWcxXCIpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGVzdChcInNob3VsZCBoYW5kbGUgZWRnZSBjYXNlIHdpdGggZXh0ZW5zaW9uIGluIG1pZGRsZSBvZiBmaWxlbmFtZVwiLCAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IGNvbnRlbnQgPSBcIi0gWyBdIFRhc2sg8J+PgSBtb3ZlOmZpbGUubWQuYmFja3VwICN0YWcxXCI7XHJcblx0XHRcdGNvbnN0IHRhc2tzID0gcGFyc2VyLnBhcnNlTGVnYWN5KGNvbnRlbnQsIFwidGVzdC5tZFwiKTtcclxuXHJcblx0XHRcdGV4cGVjdCh0YXNrcykudG9IYXZlTGVuZ3RoKDEpO1xyXG5cdFx0XHQvLyBTaG91bGQgbm90IHN0b3AgYXQgLm1kIGJlY2F1c2UgaXQncyBub3QgZm9sbG93ZWQgYnkgc3BhY2Ugb3IgZW5kXHJcblx0XHRcdGV4cGVjdCh0YXNrc1swXS5tZXRhZGF0YS5vbkNvbXBsZXRpb24pLnRvQmUoXCJtb3ZlOmZpbGUubWQuYmFja3VwXCIpO1xyXG5cdFx0XHRleHBlY3QodGFza3NbMF0ubWV0YWRhdGEudGFncykudG9Db250YWluKFwiI3RhZzFcIik7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0ZGVzY3JpYmUoXCJSZWdyZXNzaW9uIFRlc3RzXCIsICgpID0+IHtcclxuXHRcdHRlc3QoXCJzaG91bGQgbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIHNpbXBsZSBhY3Rpb25zXCIsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgY29udGVudCA9IFwiLSBbIF0gVGFzayDwn4+BIGRlbGV0ZVwiO1xyXG5cdFx0XHRjb25zdCB0YXNrcyA9IHBhcnNlci5wYXJzZUxlZ2FjeShjb250ZW50LCBcInRlc3QubWRcIik7XHJcblxyXG5cdFx0XHRleHBlY3QodGFza3MpLnRvSGF2ZUxlbmd0aCgxKTtcclxuXHRcdFx0ZXhwZWN0KHRhc2tzWzBdLm1ldGFkYXRhLm9uQ29tcGxldGlvbikudG9CZShcImRlbGV0ZVwiKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRlc3QoXCJzaG91bGQgbWFpbnRhaW4gY29tcGF0aWJpbGl0eSB3aXRoIEpTT04gZm9ybWF0XCIsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgY29udGVudCA9ICctIFsgXSBUYXNrIPCfj4Ege1widHlwZVwiOlwibW92ZVwiLFwidGFyZ2V0RmlsZVwiOlwiYXJjaGl2ZS5tZFwifSc7XHJcblx0XHRcdGNvbnN0IHRhc2tzID0gcGFyc2VyLnBhcnNlTGVnYWN5KGNvbnRlbnQsIFwidGVzdC5tZFwiKTtcclxuXHJcblx0XHRcdGV4cGVjdCh0YXNrcykudG9IYXZlTGVuZ3RoKDEpO1xyXG5cdFx0XHRleHBlY3QodGFza3NbMF0ubWV0YWRhdGEub25Db21wbGV0aW9uKS50b0JlKCd7XCJ0eXBlXCI6XCJtb3ZlXCIsXCJ0YXJnZXRGaWxlXCI6XCJhcmNoaXZlLm1kXCJ9Jyk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxufSk7XHJcbiJdfQ==