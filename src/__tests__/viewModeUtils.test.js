/**
 * Tests for viewModeUtils functionality
 * These tests verify the global view mode configuration feature
 */
import { getDefaultViewMode, getSavedViewMode, saveViewMode, getInitialViewMode } from '../utils/ui/view-mode-utils';
// Mock Obsidian App
class MockApp {
    constructor() {
        this.storage = {};
    }
    loadLocalStorage(key) {
        return this.storage[key] || null;
    }
    saveLocalStorage(key, value) {
        this.storage[key] = value;
    }
    clearStorage() {
        this.storage = {};
    }
}
// Mock Plugin
class MockPlugin {
    constructor() {
        this.settings = {
            defaultViewMode: "list"
        };
    }
    setDefaultViewMode(mode) {
        this.settings.defaultViewMode = mode;
    }
}
describe('viewModeUtils', () => {
    let mockApp;
    let mockPlugin;
    beforeEach(() => {
        mockApp = new MockApp();
        mockPlugin = new MockPlugin();
    });
    describe('getDefaultViewMode', () => {
        test('should return false for list mode', () => {
            mockPlugin.setDefaultViewMode("list");
            expect(getDefaultViewMode(mockPlugin)).toBe(false);
        });
        test('should return true for tree mode', () => {
            mockPlugin.setDefaultViewMode("tree");
            expect(getDefaultViewMode(mockPlugin)).toBe(true);
        });
    });
    describe('getSavedViewMode', () => {
        test('should return null when no saved state exists', () => {
            const result = getSavedViewMode(mockApp, "inbox");
            expect(result).toBeNull();
        });
        test('should return true for saved tree mode', () => {
            mockApp.saveLocalStorage("task-genius:view-mode:inbox", "tree");
            const result = getSavedViewMode(mockApp, "inbox");
            expect(result).toBe(true);
        });
        test('should return false for saved list mode', () => {
            mockApp.saveLocalStorage("task-genius:view-mode:inbox", "list");
            const result = getSavedViewMode(mockApp, "inbox");
            expect(result).toBe(false);
        });
        test('should handle different view IDs', () => {
            mockApp.saveLocalStorage("task-genius:view-mode:projects", "tree");
            mockApp.saveLocalStorage("task-genius:view-mode:tags", "list");
            expect(getSavedViewMode(mockApp, "projects")).toBe(true);
            expect(getSavedViewMode(mockApp, "tags")).toBe(false);
            expect(getSavedViewMode(mockApp, "forecast")).toBeNull();
        });
    });
    describe('saveViewMode', () => {
        test('should save tree mode correctly', () => {
            saveViewMode(mockApp, "inbox", true);
            const saved = mockApp.loadLocalStorage("task-genius:view-mode:inbox");
            expect(saved).toBe("tree");
        });
        test('should save list mode correctly', () => {
            saveViewMode(mockApp, "inbox", false);
            const saved = mockApp.loadLocalStorage("task-genius:view-mode:inbox");
            expect(saved).toBe("list");
        });
        test('should save different view IDs independently', () => {
            saveViewMode(mockApp, "projects", true);
            saveViewMode(mockApp, "tags", false);
            expect(mockApp.loadLocalStorage("task-genius:view-mode:projects")).toBe("tree");
            expect(mockApp.loadLocalStorage("task-genius:view-mode:tags")).toBe("list");
        });
    });
    describe('getInitialViewMode', () => {
        test('should use saved state when available', () => {
            mockPlugin.setDefaultViewMode("list");
            mockApp.saveLocalStorage("task-genius:view-mode:inbox", "tree");
            const result = getInitialViewMode(mockApp, mockPlugin, "inbox");
            expect(result).toBe(true); // Should use saved tree mode, not default list
        });
        test('should use global default when no saved state', () => {
            mockPlugin.setDefaultViewMode("tree");
            const result = getInitialViewMode(mockApp, mockPlugin, "inbox");
            expect(result).toBe(true); // Should use global default tree mode
        });
        test('should use global default list mode when no saved state', () => {
            mockPlugin.setDefaultViewMode("list");
            const result = getInitialViewMode(mockApp, mockPlugin, "inbox");
            expect(result).toBe(false); // Should use global default list mode
        });
        test('should prioritize saved state over global default', () => {
            // Global default is tree, but saved state is list
            mockPlugin.setDefaultViewMode("tree");
            mockApp.saveLocalStorage("task-genius:view-mode:projects", "list");
            const result = getInitialViewMode(mockApp, mockPlugin, "projects");
            expect(result).toBe(false); // Should use saved list mode, not global tree
        });
    });
    describe('integration scenarios', () => {
        test('should handle complete workflow: save, retrieve, and use defaults', () => {
            // Set global default to list
            mockPlugin.setDefaultViewMode("list");
            // New view should use global default
            expect(getInitialViewMode(mockApp, mockPlugin, "inbox")).toBe(false);
            // User changes to tree mode and saves
            saveViewMode(mockApp, "inbox", true);
            // Next time should use saved state
            expect(getInitialViewMode(mockApp, mockPlugin, "inbox")).toBe(true);
            // Different view should still use global default
            expect(getInitialViewMode(mockApp, mockPlugin, "projects")).toBe(false);
            // Change global default to tree
            mockPlugin.setDefaultViewMode("tree");
            // Inbox should still use saved state (list)
            expect(getInitialViewMode(mockApp, mockPlugin, "inbox")).toBe(true);
            // New view should use new global default (tree)
            expect(getInitialViewMode(mockApp, mockPlugin, "tags")).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,