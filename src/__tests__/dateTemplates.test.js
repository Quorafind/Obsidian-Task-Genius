import { processDateTemplates } from "../utils/file/file-operations";
// Mock moment function to return predictable results
jest.mock("obsidian", () => ({
    moment: jest.fn(() => ({
        format: jest.fn((format) => {
            // Mock current date as 2024-01-15 14:30:00
            switch (format) {
                case "YYYY-MM-DD":
                    return "2024-01-15";
                case "YYYY-MM-DD HH:mm":
                    return "2024-01-15 14:30";
                case "YYYY":
                    return "2024";
                case "MM":
                    return "01";
                case "DD":
                    return "15";
                case "HH:mm":
                    return "14:30";
                default:
                    return format; // Return format as-is for unknown formats
            }
        }),
    })),
}));
describe("Date Templates", () => {
    test("should replace {{DATE:YYYY-MM-DD}} with current date", () => {
        const input = "folder/{{DATE:YYYY-MM-DD}}.md";
        const result = processDateTemplates(input);
        expect(result).toBe("folder/2024-01-15.md");
    });
    test("should replace {{date:YYYY-MM-DD HH:mm}} with current date and time", () => {
        const input = "notes/{{date:YYYY-MM-DD HH:mm}}.md";
        const result = processDateTemplates(input);
        expect(result).toBe("notes/2024-01-15 14-30.md");
    });
    test("should handle multiple date templates in one path", () => {
        const input = "{{DATE:YYYY}}/{{DATE:MM}}/{{DATE:DD}}.md";
        const result = processDateTemplates(input);
        expect(result).toBe("2024/01/15.md");
    });
    test("should handle case insensitive DATE keyword", () => {
        const input1 = "{{DATE:YYYY-MM-DD}}.md";
        const input2 = "{{date:YYYY-MM-DD}}.md";
        const result1 = processDateTemplates(input1);
        const result2 = processDateTemplates(input2);
        expect(result1).toBe("2024-01-15.md");
        expect(result2).toBe("2024-01-15.md");
    });
    test("should leave non-template text unchanged", () => {
        const input = "regular/path/file.md";
        const result = processDateTemplates(input);
        expect(result).toBe("regular/path/file.md");
    });
    test("should handle mixed template and regular text", () => {
        const input = "daily-notes/{{DATE:YYYY-MM-DD}}-journal.md";
        const result = processDateTemplates(input);
        expect(result).toBe("daily-notes/2024-01-15-journal.md");
    });
    test("should handle invalid format gracefully", () => {
        const input = "{{DATE:INVALID_FORMAT}}.md";
        const result = processDateTemplates(input);
        // Should return the original template if format is invalid
        expect(result).toBe("INVALID_FORMAT.md");
    });
    test("should handle empty string", () => {
        const input = "";
        const result = processDateTemplates(input);
        expect(result).toBe("");
    });
    test("should handle malformed templates", () => {
        const input1 = "{{DATE:}}.md"; // Empty format
        const input2 = "{{DATE.md"; // Missing closing braces
        const input3 = "DATE:YYYY-MM-DD}}.md"; // Missing opening braces
        const result1 = processDateTemplates(input1);
        const result2 = processDateTemplates(input2);
        const result3 = processDateTemplates(input3);
        // Should leave malformed templates unchanged
        expect(result1).toBe("{{DATE:}}.md"); // Empty format should return original match
        expect(result2).toBe("{{DATE.md");
        expect(result3).toBe("DATE:YYYY-MM-DD}}.md");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZVRlbXBsYXRlcy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGF0ZVRlbXBsYXRlcy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXJFLHFEQUFxRDtBQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdEIsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtZQUNsQywyQ0FBMkM7WUFDM0MsUUFBUSxNQUFNLEVBQUU7Z0JBQ2YsS0FBSyxZQUFZO29CQUNoQixPQUFPLFlBQVksQ0FBQztnQkFDckIsS0FBSyxrQkFBa0I7b0JBQ3RCLE9BQU8sa0JBQWtCLENBQUM7Z0JBQzNCLEtBQUssTUFBTTtvQkFDVixPQUFPLE1BQU0sQ0FBQztnQkFDZixLQUFLLElBQUk7b0JBQ1IsT0FBTyxJQUFJLENBQUM7Z0JBQ2IsS0FBSyxJQUFJO29CQUNSLE9BQU8sSUFBSSxDQUFDO2dCQUNiLEtBQUssT0FBTztvQkFDWCxPQUFPLE9BQU8sQ0FBQztnQkFDaEI7b0JBQ0MsT0FBTyxNQUFNLENBQUMsQ0FBQywwQ0FBMEM7YUFDMUQ7UUFDRixDQUFDLENBQUM7S0FDRixDQUFDLENBQUM7Q0FDSCxDQUFDLENBQUMsQ0FBQztBQUVKLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDL0IsSUFBSSxDQUFDLHNEQUFzRCxFQUFFLEdBQUcsRUFBRTtRQUNqRSxNQUFNLEtBQUssR0FBRywrQkFBK0IsQ0FBQztRQUM5QyxNQUFNLE1BQU0sR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFD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QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sT0FBTyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTdDLDZDQUE2QztRQUM3QyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsNENBQTRDO1FBQ2xGLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9jZXNzRGF0ZVRlbXBsYXRlcyB9IGZyb20gXCIuLi91dGlscy9maWxlL2ZpbGUtb3BlcmF0aW9uc1wiO1xyXG5cclxuLy8gTW9jayBtb21lbnQgZnVuY3Rpb24gdG8gcmV0dXJuIHByZWRpY3RhYmxlIHJlc3VsdHNcclxuamVzdC5tb2NrKFwib2JzaWRpYW5cIiwgKCkgPT4gKHtcclxuXHRtb21lbnQ6IGplc3QuZm4oKCkgPT4gKHtcclxuXHRcdGZvcm1hdDogamVzdC5mbigoZm9ybWF0OiBzdHJpbmcpID0+IHtcclxuXHRcdFx0Ly8gTW9jayBjdXJyZW50IGRhdGUgYXMgMjAyNC0wMS0xNSAxNDozMDowMFxyXG5cdFx0XHRzd2l0Y2ggKGZvcm1hdCkge1xyXG5cdFx0XHRcdGNhc2UgXCJZWVlZLU1NLUREXCI6XHJcblx0XHRcdFx0XHRyZXR1cm4gXCIyMDI0LTAxLTE1XCI7XHJcblx0XHRcdFx0Y2FzZSBcIllZWVktTU0tREQgSEg6bW1cIjpcclxuXHRcdFx0XHRcdHJldHVybiBcIjIwMjQtMDEtMTUgMTQ6MzBcIjtcclxuXHRcdFx0XHRjYXNlIFwiWVlZWVwiOlxyXG5cdFx0XHRcdFx0cmV0dXJuIFwiMjAyNFwiO1xyXG5cdFx0XHRcdGNhc2UgXCJNTVwiOlxyXG5cdFx0XHRcdFx0cmV0dXJuIFwiMDFcIjtcclxuXHRcdFx0XHRjYXNlIFwiRERcIjpcclxuXHRcdFx0XHRcdHJldHVybiBcIjE1XCI7XHJcblx0XHRcdFx0Y2FzZSBcIkhIOm1tXCI6XHJcblx0XHRcdFx0XHRyZXR1cm4gXCIxNDozMFwiO1xyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRyZXR1cm4gZm9ybWF0OyAvLyBSZXR1cm4gZm9ybWF0IGFzLWlzIGZvciB1bmtub3duIGZvcm1hdHNcclxuXHRcdFx0fVxyXG5cdFx0fSksXHJcblx0fSkpLFxyXG59KSk7XHJcblxyXG5kZXNjcmliZShcIkRhdGUgVGVtcGxhdGVzXCIsICgpID0+IHtcclxuXHR0ZXN0KFwic2hvdWxkIHJlcGxhY2Uge3tEQVRFOllZWVktTU0tRER9fSB3aXRoIGN1cnJlbnQgZGF0ZVwiLCAoKSA9PiB7XHJcblx0XHRjb25zdCBpbnB1dCA9IFwiZm9sZGVyL3t7REFURTpZWVlZLU1NLUREfX0ubWRcIjtcclxuXHRcdGNvbnN0IHJlc3VsdCA9IHByb2Nlc3NEYXRlVGVtcGxhdGVzKGlucHV0KTtcclxuXHRcdGV4cGVjdChyZXN1bHQpLnRvQmUoXCJmb2xkZXIvMjAyNC0wMS0xNS5tZFwiKTtcclxuXHR9KTtcclxuXHJcblx0dGVzdChcInNob3VsZCByZXBsYWNlIHt7ZGF0ZTpZWVlZLU1NLUREIEhIOm1tfX0gd2l0aCBjdXJyZW50IGRhdGUgYW5kIHRpbWVcIiwgKCkgPT4ge1xyXG5cdFx0Y29uc3QgaW5wdXQgPSBcIm5vdGVzL3t7ZGF0ZTpZWVlZLU1NLUREIEhIOm1tfX0ubWRcIjtcclxuXHRcdGNvbnN0IHJlc3VsdCA9IHByb2Nlc3NEYXRlVGVtcGxhdGVzKGlucHV0KTtcclxuXHRcdGV4cGVjdChyZXN1bHQpLnRvQmUoXCJub3Rlcy8yMDI0LTAxLTE1IDE0LTMwLm1kXCIpO1xyXG5cdH0pO1xyXG5cclxuXHR0ZXN0KFwic2hvdWxkIGhhbmRsZSBtdWx0aXBsZSBkYXRlIHRlbXBsYXRlcyBpbiBvbmUgcGF0aFwiLCAoKSA9PiB7XHJcblx0XHRjb25zdCBpbnB1dCA9IFwie3tEQVRFOllZWVl9fS97e0RBVEU6TU19fS97e0RBVEU6RER9fS5tZFwiO1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gcHJvY2Vzc0RhdGVUZW1wbGF0ZXMoaW5wdXQpO1xyXG5cdFx0ZXhwZWN0KHJlc3VsdCkudG9CZShcIjIwMjQvMDEvMTUubWRcIik7XHJcblx0fSk7XHJcblxyXG5cdHRlc3QoXCJzaG91bGQgaGFuZGxlIGNhc2UgaW5zZW5zaXRpdmUgREFURSBrZXl3b3JkXCIsICgpID0+IHtcclxuXHRcdGNvbnN0IGlucHV0MSA9IFwie3tEQVRFOllZWVktTU0tRER9fS5tZFwiO1xyXG5cdFx0Y29uc3QgaW5wdXQyID0gXCJ7e2RhdGU6WVlZWS1NTS1ERH19Lm1kXCI7XHJcblxyXG5cdFx0Y29uc3QgcmVzdWx0MSA9IHByb2Nlc3NEYXRlVGVtcGxhdGVzKGlucHV0MSk7XHJcblx0XHRjb25zdCByZXN1bHQyID0gcHJvY2Vzc0RhdGVUZW1wbGF0ZXMoaW5wdXQyKTtcclxuXHJcblx0XHRleHBlY3QocmVzdWx0MSkudG9CZShcIjIwMjQtMDEtMTUubWRcIik7XHJcblx0XHRleHBlY3QocmVzdWx0MikudG9CZShcIjIwMjQtMDEtMTUubWRcIik7XHJcblx0fSk7XHJcblxyXG5cdHRlc3QoXCJzaG91bGQgbGVhdmUgbm9uLXRlbXBsYXRlIHRleHQgdW5jaGFuZ2VkXCIsICgpID0+IHtcclxuXHRcdGNvbnN0IGlucHV0ID0gXCJyZWd1bGFyL3BhdGgvZmlsZS5tZFwiO1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gcHJvY2Vzc0RhdGVUZW1wbGF0ZXMoaW5wdXQpO1xyXG5cdFx0ZXhwZWN0KHJlc3VsdCkudG9CZShcInJlZ3VsYXIvcGF0aC9maWxlLm1kXCIpO1xyXG5cdH0pO1xyXG5cclxuXHR0ZXN0KFwic2hvdWxkIGhhbmRsZSBtaXhlZCB0ZW1wbGF0ZSBhbmQgcmVndWxhciB0ZXh0XCIsICgpID0+IHtcclxuXHRcdGNvbnN0IGlucHV0ID0gXCJkYWlseS1ub3Rlcy97e0RBVEU6WVlZWS1NTS1ERH19LWpvdXJuYWwubWRcIjtcclxuXHRcdGNvbnN0IHJlc3VsdCA9IHByb2Nlc3NEYXRlVGVtcGxhdGVzKGlucHV0KTtcclxuXHRcdGV4cGVjdChyZXN1bHQpLnRvQmUoXCJkYWlseS1ub3Rlcy8yMDI0LTAxLTE1LWpvdXJuYWwubWRcIik7XHJcblx0fSk7XHJcblxyXG5cdHRlc3QoXCJzaG91bGQgaGFuZGxlIGludmFsaWQgZm9ybWF0IGdyYWNlZnVsbHlcIiwgKCkgPT4ge1xyXG5cdFx0Y29uc3QgaW5wdXQgPSBcInt7REFURTpJTlZBTElEX0ZPUk1BVH19Lm1kXCI7XHJcblx0XHRjb25zdCByZXN1bHQgPSBwcm9jZXNzRGF0ZVRlbXBsYXRlcyhpbnB1dCk7XHJcblx0XHQvLyBTaG91bGQgcmV0dXJuIHRoZSBvcmlnaW5hbCB0ZW1wbGF0ZSBpZiBmb3JtYXQgaXMgaW52YWxpZFxyXG5cdFx0ZXhwZWN0KHJlc3VsdCkudG9CZShcIklOVkFMSURfRk9STUFULm1kXCIpO1xyXG5cdH0pO1xyXG5cclxuXHR0ZXN0KFwic2hvdWxkIGhhbmRsZSBlbXB0eSBzdHJpbmdcIiwgKCkgPT4ge1xyXG5cdFx0Y29uc3QgaW5wdXQgPSBcIlwiO1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gcHJvY2Vzc0RhdGVUZW1wbGF0ZXMoaW5wdXQpO1xyXG5cdFx0ZXhwZWN0KHJlc3VsdCkudG9CZShcIlwiKTtcclxuXHR9KTtcclxuXHJcblx0dGVzdChcInNob3VsZCBoYW5kbGUgbWFsZm9ybWVkIHRlbXBsYXRlc1wiLCAoKSA9PiB7XHJcblx0XHRjb25zdCBpbnB1dDEgPSBcInt7REFURTp9fS5tZFwiOyAvLyBFbXB0eSBmb3JtYXRcclxuXHRcdGNvbnN0IGlucHV0MiA9IFwie3tEQVRFLm1kXCI7IC8vIE1pc3NpbmcgY2xvc2luZyBicmFjZXNcclxuXHRcdGNvbnN0IGlucHV0MyA9IFwiREFURTpZWVlZLU1NLUREfX0ubWRcIjsgLy8gTWlzc2luZyBvcGVuaW5nIGJyYWNlc1xyXG5cclxuXHRcdGNvbnN0IHJlc3VsdDEgPSBwcm9jZXNzRGF0ZVRlbXBsYXRlcyhpbnB1dDEpO1xyXG5cdFx0Y29uc3QgcmVzdWx0MiA9IHByb2Nlc3NEYXRlVGVtcGxhdGVzKGlucHV0Mik7XHJcblx0XHRjb25zdCByZXN1bHQzID0gcHJvY2Vzc0RhdGVUZW1wbGF0ZXMoaW5wdXQzKTtcclxuXHJcblx0XHQvLyBTaG91bGQgbGVhdmUgbWFsZm9ybWVkIHRlbXBsYXRlcyB1bmNoYW5nZWRcclxuXHRcdGV4cGVjdChyZXN1bHQxKS50b0JlKFwie3tEQVRFOn19Lm1kXCIpOyAvLyBFbXB0eSBmb3JtYXQgc2hvdWxkIHJldHVybiBvcmlnaW5hbCBtYXRjaFxyXG5cdFx0ZXhwZWN0KHJlc3VsdDIpLnRvQmUoXCJ7e0RBVEUubWRcIik7XHJcblx0XHRleHBlY3QocmVzdWx0MykudG9CZShcIkRBVEU6WVlZWS1NTS1ERH19Lm1kXCIpO1xyXG5cdH0pO1xyXG59KTtcclxuIl19