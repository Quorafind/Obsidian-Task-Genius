import { TaskTimerManager } from "../managers/timer-manager";
// Mock localStorage
const localStorageMock = (() => {
    let store = {};
    return {
        getItem: (key) => store[key] || null,
        setItem: (key, value) => {
            store[key] = value;
        },
        removeItem: (key) => {
            delete store[key];
        },
        clear: () => {
            store = {};
        }
    };
})();
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
});
describe("TaskTimerManager - Time Segments", () => {
    let manager;
    const mockSettings = {
        enabled: true,
        blockRefPrefix: "timer",
        timeFormat: "{h}hrs{m}mins{s}s",
        metadataDetection: {
            frontmatter: "",
            folders: [],
            tags: []
        }
    };
    beforeEach(() => {
        localStorageMock.clear();
        manager = new TaskTimerManager(mockSettings);
    });
    test("should create initial segment when starting timer", () => {
        const blockId = manager.startTimer("test.md");
        const taskId = `taskTimer_test.md#${blockId}`;
        const state = manager.getTimerState(taskId);
        expect(state).toBeTruthy();
        expect(state.segments).toHaveLength(1);
        expect(state.segments[0].startTime).toBeDefined();
        expect(state.segments[0].endTime).toBeUndefined();
        expect(state.status).toBe('running');
    });
    test("should close segment when pausing timer", () => {
        const blockId = manager.startTimer("test.md");
        const taskId = `taskTimer_test.md#${blockId}`;
        // Pause the timer
        manager.pauseTimer(taskId);
        const state = manager.getTimerState(taskId);
        expect(state.segments).toHaveLength(1);
        expect(state.segments[0].endTime).toBeDefined();
        expect(state.segments[0].duration).toBeDefined();
        expect(state.status).toBe('paused');
    });
    test("should create new segment when resuming timer", () => {
        const blockId = manager.startTimer("test.md");
        const taskId = `taskTimer_test.md#${blockId}`;
        // Pause and resume
        manager.pauseTimer(taskId);
        manager.resumeTimer(taskId);
        const state = manager.getTimerState(taskId);
        expect(state.segments).toHaveLength(2);
        expect(state.segments[0].endTime).toBeDefined();
        expect(state.segments[1].startTime).toBeDefined();
        expect(state.segments[1].endTime).toBeUndefined();
        expect(state.status).toBe('running');
    });
    test("should calculate total duration across multiple segments", () => {
        const blockId = manager.startTimer("test.md");
        const taskId = `taskTimer_test.md#${blockId}`;
        // Mock segments with known durations
        const state = manager.getTimerState(taskId);
        state.segments = [
            { startTime: 1000, endTime: 2000, duration: 1000 },
            { startTime: 3000, endTime: 4500, duration: 1500 },
            { startTime: 5000 } // Current running segment
        ];
        // Mock current time
        const originalNow = Date.now;
        Date.now = jest.fn(() => 6000);
        // Save state
        localStorage.setItem(taskId, JSON.stringify(state));
        // Get duration
        const duration = manager.getCurrentDuration(taskId);
        // Should be 1000 + 1500 + 1000 = 3500
        expect(duration).toBe(3500);
        // Restore Date.now
        Date.now = originalNow;
    });
    test("should migrate legacy format to segments", () => {
        const taskId = "taskTimer_test.md#legacy-123";
        // Store legacy format
        const legacyState = {
            taskId,
            filePath: "test.md",
            blockId: "legacy-123",
            startTime: 1000,
            pausedTime: 5000,
            totalPausedDuration: 1000,
            status: "paused",
            createdAt: 1000
        };
        localStorage.setItem(taskId, JSON.stringify(legacyState));
        // Get state (should trigger migration)
        const state = manager.getTimerState(taskId);
        expect(state).toBeTruthy();
        expect(state.segments).toHaveLength(1);
        expect(state.segments[0].startTime).toBe(2000); // startTime + totalPausedDuration
        expect(state.segments[0].endTime).toBe(5000);
        expect(state.segments[0].duration).toBe(3000);
        expect(state.legacyStartTime).toBe(1000);
        expect(state.legacyPausedTime).toBe(5000);
        expect(state.legacyTotalPausedDuration).toBe(1000);
    });
    test("should handle multiple pause/resume cycles", () => {
        const blockId = manager.startTimer("test.md");
        const taskId = `taskTimer_test.md#${blockId}`;
        // Simulate multiple work sessions
        for (let i = 0; i < 3; i++) {
            manager.pauseTimer(taskId);
            manager.resumeTimer(taskId);
        }
        const state = manager.getTimerState(taskId);
        expect(state.segments).toHaveLength(4); // Initial + 3 resume segments
        // First 3 segments should be closed
        for (let i = 0; i < 3; i++) {
            expect(state.segments[i].endTime).toBeDefined();
            expect(state.segments[i].duration).toBeDefined();
        }
        // Last segment should be open
        expect(state.segments[3].endTime).toBeUndefined();
    });
    test("should get segment count correctly", () => {
        const blockId = manager.startTimer("test.md");
        const taskId = `taskTimer_test.md#${blockId}`;
        expect(manager.getSegmentCount(taskId)).toBe(1);
        manager.pauseTimer(taskId);
        manager.resumeTimer(taskId);
        expect(manager.getSegmentCount(taskId)).toBe(2);
    });
    test("should complete timer and calculate final duration", () => {
        // Mock time progression
        const originalNow = Date.now;
        let currentTime = 1000;
        Date.now = jest.fn(() => currentTime);
        // Start timer
        const blockId = manager.startTimer("test.md");
        const taskId = `taskTimer_test.md#${blockId}`;
        // Work for 5 seconds
        currentTime = 6000;
        // Complete timer
        const formattedDuration = manager.completeTimer(taskId);
        // Should format 5 seconds
        expect(formattedDuration).toContain("5");
        // Timer should be removed
        expect(manager.getTimerState(taskId)).toBeNull();
        // Restore Date.now
        Date.now = originalNow;
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza1RpbWVyU2VnbWVudHMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlRhc2tUaW1lclNlZ21lbnRzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUEyQixNQUFNLDJCQUEyQixDQUFDO0FBR3RGLG9CQUFvQjtBQUNwQixNQUFNLGdCQUFnQixHQUFHLENBQUMsR0FBRyxFQUFFO0lBQzlCLElBQUksS0FBSyxHQUE4QixFQUFFLENBQUM7SUFDMUMsT0FBTztRQUNOLE9BQU8sRUFBRSxDQUFDLEdBQVcsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUk7UUFDNUMsT0FBTyxFQUFFLENBQUMsR0FBVyxFQUFFLEtBQWEsRUFBRSxFQUFFO1lBQ3ZDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDcEIsQ0FBQztRQUNELFVBQVUsRUFBRSxDQUFDLEdBQVcsRUFBRSxFQUFFO1lBQzNCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLENBQUM7UUFDRCxLQUFLLEVBQUUsR0FBRyxFQUFFO1lBQ1gsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNaLENBQUM7S0FDRCxDQUFDO0FBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVMLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRTtJQUM3QyxLQUFLLEVBQUUsZ0JBQWdCO0NBQ3ZCLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7SUFDakQsSUFBSSxPQUF5QixDQUFDO0lBQzlCLE1BQU0sWUFBWSxHQUFzQjtRQUN2QyxPQUFPLEVBQUUsSUFBSTtRQUNiLGNBQWMsRUFBRSxPQUFPO1FBQ3ZCLFVBQVUsRUFBRSxtQkFBbUI7UUFDL0IsaUJBQWlCLEVBQUU7WUFDbEIsV0FBVyxFQUFFLEVBQUU7WUFDZixPQUFPLEVBQUUsRUFBRTtZ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QixpQkFBaUI7UUFDakIsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXhELDBCQUEwQjtRQUMxQixNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFekMsMEJBQTBCO1FBQzFCLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFakQsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUYXNrVGltZXJNYW5hZ2VyLCBUaW1lclN0YXRlLCBUaW1lU2VnbWVudCB9IGZyb20gXCIuLi9tYW5hZ2Vycy90aW1lci1tYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFRhc2tUaW1lclNldHRpbmdzIH0gZnJvbSBcIi4uL2NvbW1vbi9zZXR0aW5nLWRlZmluaXRpb25cIjtcclxuXHJcbi8vIE1vY2sgbG9jYWxTdG9yYWdlXHJcbmNvbnN0IGxvY2FsU3RvcmFnZU1vY2sgPSAoKCkgPT4ge1xyXG5cdGxldCBzdG9yZTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xyXG5cdHJldHVybiB7XHJcblx0XHRnZXRJdGVtOiAoa2V5OiBzdHJpbmcpID0+IHN0b3JlW2tleV0gfHwgbnVsbCxcclxuXHRcdHNldEl0ZW06IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4ge1xyXG5cdFx0XHRzdG9yZVtrZXldID0gdmFsdWU7XHJcblx0XHR9LFxyXG5cdFx0cmVtb3ZlSXRlbTogKGtleTogc3RyaW5nKSA9PiB7XHJcblx0XHRcdGRlbGV0ZSBzdG9yZVtrZXldO1xyXG5cdFx0fSxcclxuXHRcdGNsZWFyOiAoKSA9PiB7XHJcblx0XHRcdHN0b3JlID0ge307XHJcblx0XHR9XHJcblx0fTtcclxufSkoKTtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdsb2NhbFN0b3JhZ2UnLCB7XHJcblx0dmFsdWU6IGxvY2FsU3RvcmFnZU1vY2tcclxufSk7XHJcblxyXG5kZXNjcmliZShcIlRhc2tUaW1lck1hbmFnZXIgLSBUaW1lIFNlZ21lbnRzXCIsICgpID0+IHtcclxuXHRsZXQgbWFuYWdlcjogVGFza1RpbWVyTWFuYWdlcjtcclxuXHRjb25zdCBtb2NrU2V0dGluZ3M6IFRhc2tUaW1lclNldHRpbmdzID0ge1xyXG5cdFx0ZW5hYmxlZDogdHJ1ZSxcclxuXHRcdGJsb2NrUmVmUHJlZml4OiBcInRpbWVyXCIsXHJcblx0XHR0aW1lRm9ybWF0OiBcIntofWhyc3ttfW1pbnN7c31zXCIsXHJcblx0XHRtZXRhZGF0YURldGVjdGlvbjoge1xyXG5cdFx0XHRmcm9udG1hdHRlcjogXCJcIixcclxuXHRcdFx0Zm9sZGVyczogW10sXHJcblx0XHRcdHRhZ3M6IFtdXHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0YmVmb3JlRWFjaCgoKSA9PiB7XHJcblx0XHRsb2NhbFN0b3JhZ2VNb2NrLmNsZWFyKCk7XHJcblx0XHRtYW5hZ2VyID0gbmV3IFRhc2tUaW1lck1hbmFnZXIobW9ja1NldHRpbmdzKTtcclxuXHR9KTtcclxuXHJcblx0dGVzdChcInNob3VsZCBjcmVhdGUgaW5pdGlhbCBzZWdtZW50IHdoZW4gc3RhcnRpbmcgdGltZXJcIiwgKCkgPT4ge1xyXG5cdFx0Y29uc3QgYmxvY2tJZCA9IG1hbmFnZXIuc3RhcnRUaW1lcihcInRlc3QubWRcIik7XHJcblx0XHRjb25zdCB0YXNrSWQgPSBgdGFza1RpbWVyX3Rlc3QubWQjJHtibG9ja0lkfWA7XHJcblx0XHRjb25zdCBzdGF0ZSA9IG1hbmFnZXIuZ2V0VGltZXJTdGF0ZSh0YXNrSWQpO1xyXG5cdFx0XHJcblx0XHRleHBlY3Qoc3RhdGUpLnRvQmVUcnV0aHkoKTtcclxuXHRcdGV4cGVjdChzdGF0ZSEuc2VnbWVudHMpLnRvSGF2ZUxlbmd0aCgxKTtcclxuXHRcdGV4cGVjdChzdGF0ZSEuc2VnbWVudHNbMF0uc3RhcnRUaW1lKS50b0JlRGVmaW5lZCgpO1xyXG5cdFx0ZXhwZWN0KHN0YXRlIS5zZWdtZW50c1swXS5lbmRUaW1lKS50b0JlVW5kZWZpbmVkKCk7XHJcblx0XHRleHBlY3Qoc3RhdGUhLnN0YXR1cykudG9CZSgncnVubmluZycpO1xyXG5cdH0pO1xyXG5cclxuXHR0ZXN0KFwic2hvdWxkIGNsb3NlIHNlZ21lbnQgd2hlbiBwYXVzaW5nIHRpbWVyXCIsICgpID0+IHtcclxuXHRcdGNvbnN0IGJsb2NrSWQgPSBtYW5hZ2VyLnN0YXJ0VGltZXIoXCJ0ZXN0Lm1kXCIpO1xyXG5cdFx0Y29uc3QgdGFza0lkID0gYHRhc2tUaW1lcl90ZXN0Lm1kIyR7YmxvY2tJZH1gO1xyXG5cdFx0XHJcblx0XHQvLyBQYXVzZSB0aGUgdGltZXJcclxuXHRcdG1hbmFnZXIucGF1c2VUaW1lcih0YXNrSWQpO1xyXG5cdFx0XHJcblx0XHRjb25zdCBzdGF0ZSA9IG1hbmFnZXIuZ2V0VGltZXJTdGF0ZSh0YXNrSWQpO1xyXG5cdFx0ZXhwZWN0KHN0YXRlIS5zZWdtZW50cykudG9IYXZlTGVuZ3RoKDEpO1xyXG5cdFx0ZXhwZWN0KHN0YXRlIS5zZWdtZW50c1swXS5lbmRUaW1lKS50b0JlRGVmaW5lZCgpO1xyXG5cdFx0ZXhwZWN0KHN0YXRlIS5zZWdtZW50c1swXS5kdXJhdGlvbikudG9CZURlZmluZWQoKTtcclxuXHRcdGV4cGVjdChzdGF0ZSEuc3RhdHVzKS50b0JlKCdwYXVzZWQnKTtcclxuXHR9KTtcclxuXHJcblx0dGVzdChcInNob3VsZCBjcmVhdGUgbmV3IHNlZ21lbnQgd2hlbiByZXN1bWluZyB0aW1lclwiLCAoKSA9PiB7XHJcblx0XHRjb25zdCBibG9ja0lkID0gbWFuYWdlci5zdGFydFRpbWVyKFwidGVzdC5tZFwiKTtcclxuXHRcdGNvbnN0IHRhc2tJZCA9IGB0YXNrVGltZXJfdGVzdC5tZCMke2Jsb2NrSWR9YDtcclxuXHRcdFxyXG5cdFx0Ly8gUGF1c2UgYW5kIHJlc3VtZVxyXG5cdFx0bWFuYWdlci5wYXVzZVRpbWVyKHRhc2tJZCk7XHJcblx0XHRtYW5hZ2VyLnJlc3VtZVRpbWVyKHRhc2tJZCk7XHJcblx0XHRcclxuXHRcdGNvbnN0IHN0YXRlID0gbWFuYWdlci5nZXRUaW1lclN0YXRlKHRhc2tJZCk7XHJcblx0XHRleHBlY3Qoc3RhdGUhLnNlZ21lbnRzKS50b0hhdmVMZW5ndGgoMik7XHJcblx0XHRleHBlY3Qoc3RhdGUhLnNlZ21lbnRzWzBdLmVuZFRpbWUpLnRvQmVEZWZpbmVkKCk7XHJcblx0XHRleHBlY3Qoc3RhdGUhLnNlZ21lbnRzWzFdLnN0YXJ0VGltZSkudG9CZURlZmluZWQoKTtcclxuXHRcdGV4cGVjdChzdGF0ZSEuc2VnbWVudHNbMV0uZW5kVGltZSkudG9CZVVuZGVmaW5lZCgpO1xyXG5cdFx0ZXhwZWN0KHN0YXRlIS5zdGF0dXMpLnRvQmUoJ3J1bm5pbmcnKTtcclxuXHR9KTtcclxuXHJcblx0dGVzdChcInNob3VsZCBjYWxjdWxhdGUgdG90YWwgZHVyYXRpb24gYWNyb3NzIG11bHRpcGxlIHNlZ21lbnRzXCIsICgpID0+IHtcclxuXHRcdGNvbnN0IGJsb2NrSWQgPSBtYW5hZ2VyLnN0YXJ0VGltZXIoXCJ0ZXN0Lm1kXCIpO1xyXG5cdFx0Y29uc3QgdGFza0lkID0gYHRhc2tUaW1lcl90ZXN0Lm1kIyR7YmxvY2tJZH1gO1xyXG5cdFx0XHJcblx0XHQvLyBNb2NrIHNlZ21lbnRzIHdpdGgga25vd24gZHVyYXRpb25zXHJcblx0XHRjb25zdCBzdGF0ZSA9IG1hbmFnZXIuZ2V0VGltZXJTdGF0ZSh0YXNrSWQpITtcclxuXHRcdHN0YXRlLnNlZ21lbnRzID0gW1xyXG5cdFx0XHR7IHN0YXJ0VGltZTogMTAwMCwgZW5kVGltZTogMjAwMCwgZHVyYXRpb246IDEwMDAgfSxcclxuXHRcdFx0eyBzdGFydFRpbWU6IDMwMDAsIGVuZFRpbWU6IDQ1MDAsIGR1cmF0aW9uOiAxNTAwIH0sXHJcblx0XHRcdHsgc3RhcnRUaW1lOiA1MDAwIH0gLy8gQ3VycmVudCBydW5uaW5nIHNlZ21lbnRcclxuXHRcdF07XHJcblx0XHRcclxuXHRcdC8vIE1vY2sgY3VycmVudCB0aW1lXHJcblx0XHRjb25zdCBvcmlnaW5hbE5vdyA9IERhdGUubm93O1xyXG5cdFx0RGF0ZS5ub3cgPSBqZXN0LmZuKCgpID0+IDYwMDApO1xyXG5cdFx0XHJcblx0XHQvLyBTYXZlIHN0YXRlXHJcblx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0YXNrSWQsIEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcblx0XHRcclxuXHRcdC8vIEdldCBkdXJhdGlvblxyXG5cdFx0Y29uc3QgZHVyYXRpb24gPSBtYW5hZ2VyLmdldEN1cnJlbnREdXJhdGlvbih0YXNrSWQpO1xyXG5cdFx0XHJcblx0XHQvLyBTaG91bGQgYmUgMTAwMCArIDE1MDAgKyAxMDAwID0gMzUwMFxyXG5cdFx0ZXhwZWN0KGR1cmF0aW9uKS50b0JlKDM1MDApO1xyXG5cdFx0XHJcblx0XHQvLyBSZXN0b3JlIERhdGUubm93XHJcblx0XHREYXRlLm5vdyA9IG9yaWdpbmFsTm93O1xyXG5cdH0pO1xyXG5cclxuXHR0ZXN0KFwic2hvdWxkIG1pZ3JhdGUgbGVnYWN5IGZvcm1hdCB0byBzZWdtZW50c1wiLCAoKSA9PiB7XHJcblx0XHRjb25zdCB0YXNrSWQgPSBcInRhc2tUaW1lcl90ZXN0Lm1kI2xlZ2FjeS0xMjNcIjtcclxuXHRcdFxyXG5cdFx0Ly8gU3RvcmUgbGVnYWN5IGZvcm1hdFxyXG5cdFx0Y29uc3QgbGVnYWN5U3RhdGUgPSB7XHJcblx0XHRcdHRhc2tJZCxcclxuXHRcdFx0ZmlsZVBhdGg6IFwidGVzdC5tZFwiLFxyXG5cdFx0XHRibG9ja0lkOiBcImxlZ2FjeS0xMjNcIixcclxuXHRcdFx0c3RhcnRUaW1lOiAxMDAwLFxyXG5cdFx0XHRwYXVzZWRUaW1lOiA1MDAwLFxyXG5cdFx0XHR0b3RhbFBhdXNlZER1cmF0aW9uOiAxMDAwLFxyXG5cdFx0XHRzdGF0dXM6IFwicGF1c2VkXCIsXHJcblx0XHRcdGNyZWF0ZWRBdDogMTAwMFxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0odGFza0lkLCBKU09OLnN0cmluZ2lmeShsZWdhY3lTdGF0ZSkpO1xyXG5cdFx0XHJcblx0XHQvLyBHZXQgc3RhdGUgKHNob3VsZCB0cmlnZ2VyIG1pZ3JhdGlvbilcclxuXHRcdGNvbnN0IHN0YXRlID0gbWFuYWdlci5nZXRUaW1lclN0YXRlKHRhc2tJZCk7XHJcblx0XHRcclxuXHRcdGV4cGVjdChzdGF0ZSkudG9CZVRydXRoeSgpO1xyXG5cdFx0ZXhwZWN0KHN0YXRlIS5zZWdtZW50cykudG9IYXZlTGVuZ3RoKDEpO1xyXG5cdFx0ZXhwZWN0KHN0YXRlIS5zZWdtZW50c1swXS5zdGFydFRpbWUpLnRvQmUoMjAwMCk7IC8vIHN0YXJ0VGltZSArIHRvdGFsUGF1c2VkRHVyYXRpb25cclxuXHRcdGV4cGVjdChzdGF0ZSEuc2VnbWVudHNbMF0uZW5kVGltZSkudG9CZSg1MDAwKTtcclxuXHRcdGV4cGVjdChzdGF0ZSEuc2VnbWVudHNbMF0uZHVyYXRpb24pLnRvQmUoMzAwMCk7XHJcblx0XHRleHBlY3Qoc3RhdGUhLmxlZ2FjeVN0YXJ0VGltZSkudG9CZSgxMDAwKTtcclxuXHRcdGV4cGVjdChzdGF0ZSEubGVnYWN5UGF1c2VkVGltZSkudG9CZSg1MDAwKTtcclxuXHRcdGV4cGVjdChzdGF0ZSEubGVnYWN5VG90YWxQYXVzZWREdXJhdGlvbikudG9CZSgxMDAwKTtcclxuXHR9KTtcclxuXHJcblx0dGVzdChcInNob3VsZCBoYW5kbGUgbXVsdGlwbGUgcGF1c2UvcmVzdW1lIGN5Y2xlc1wiLCAoKSA9PiB7XHJcblx0XHRjb25zdCBibG9ja0lkID0gbWFuYWdlci5zdGFydFRpbWVyKFwidGVzdC5tZFwiKTtcclxuXHRcdGNvbnN0IHRhc2tJZCA9IGB0YXNrVGltZXJfdGVzdC5tZCMke2Jsb2NrSWR9YDtcclxuXHRcdFxyXG5cdFx0Ly8gU2ltdWxhdGUgbXVsdGlwbGUgd29yayBzZXNzaW9uc1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuXHRcdFx0bWFuYWdlci5wYXVzZVRpbWVyKHRhc2tJZCk7XHJcblx0XHRcdG1hbmFnZXIucmVzdW1lVGltZXIodGFza0lkKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Y29uc3Qgc3RhdGUgPSBtYW5hZ2VyLmdldFRpbWVyU3RhdGUodGFza0lkKTtcclxuXHRcdGV4cGVjdChzdGF0ZSEuc2VnbWVudHMpLnRvSGF2ZUxlbmd0aCg0KTsgLy8gSW5pdGlhbCArIDMgcmVzdW1lIHNlZ21lbnRzXHJcblx0XHRcclxuXHRcdC8vIEZpcnN0IDMgc2VnbWVudHMgc2hvdWxkIGJlIGNsb3NlZFxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuXHRcdFx0ZXhwZWN0KHN0YXRlIS5zZWdtZW50c1tpXS5lbmRUaW1lKS50b0JlRGVmaW5lZCgpO1xyXG5cdFx0XHRleHBlY3Qoc3RhdGUhLnNlZ21lbnRzW2ldLmR1cmF0aW9uKS50b0JlRGVmaW5lZCgpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHQvLyBMYXN0IHNlZ21lbnQgc2hvdWxkIGJlIG9wZW5cclxuXHRcdGV4cGVjdChzdGF0ZSEuc2VnbWVudHNbM10uZW5kVGltZSkudG9CZVVuZGVmaW5lZCgpO1xyXG5cdH0pO1xyXG5cclxuXHR0ZXN0KFwic2hvdWxkIGdldCBzZWdtZW50IGNvdW50IGNvcnJlY3RseVwiLCAoKSA9PiB7XHJcblx0XHRjb25zdCBibG9ja0lkID0gbWFuYWdlci5zdGFydFRpbWVyKFwidGVzdC5tZFwiKTtcclxuXHRcdGNvbnN0IHRhc2tJZCA9IGB0YXNrVGltZXJfdGVzdC5tZCMke2Jsb2NrSWR9YDtcclxuXHRcdFxyXG5cdFx0ZXhwZWN0KG1hbmFnZXIuZ2V0U2VnbWVudENvdW50KHRhc2tJZCkpLnRvQmUoMSk7XHJcblx0XHRcclxuXHRcdG1hbmFnZXIucGF1c2VUaW1lcih0YXNrSWQpO1xyXG5cdFx0bWFuYWdlci5yZXN1bWVUaW1lcih0YXNrSWQpO1xyXG5cdFx0XHJcblx0XHRleHBlY3QobWFuYWdlci5nZXRTZWdtZW50Q291bnQodGFza0lkKSkudG9CZSgyKTtcclxuXHR9KTtcclxuXHJcblx0dGVzdChcInNob3VsZCBjb21wbGV0ZSB0aW1lciBhbmQgY2FsY3VsYXRlIGZpbmFsIGR1cmF0aW9uXCIsICgpID0+IHtcclxuXHRcdC8vIE1vY2sgdGltZSBwcm9ncmVzc2lvblxyXG5cdFx0Y29uc3Qgb3JpZ2luYWxOb3cgPSBEYXRlLm5vdztcclxuXHRcdGxldCBjdXJyZW50VGltZSA9IDEwMDA7XHJcblx0XHREYXRlLm5vdyA9IGplc3QuZm4oKCkgPT4gY3VycmVudFRpbWUpO1xyXG5cdFx0XHJcblx0XHQvLyBTdGFydCB0aW1lclxyXG5cdFx0Y29uc3QgYmxvY2tJZCA9IG1hbmFnZXIuc3RhcnRUaW1lcihcInRlc3QubWRcIik7XHJcblx0XHRjb25zdCB0YXNrSWQgPSBgdGFza1RpbWVyX3Rlc3QubWQjJHtibG9ja0lkfWA7XHJcblx0XHRcclxuXHRcdC8vIFdvcmsgZm9yIDUgc2Vjb25kc1xyXG5cdFx0Y3VycmVudFRpbWUgPSA2MDAwO1xyXG5cdFx0XHJcblx0XHQvLyBDb21wbGV0ZSB0aW1lclxyXG5cdFx0Y29uc3QgZm9ybWF0dGVkRHVyYXRpb24gPSBtYW5hZ2VyLmNvbXBsZXRlVGltZXIodGFza0lkKTtcclxuXHRcdFxyXG5cdFx0Ly8gU2hvdWxkIGZvcm1hdCA1IHNlY29uZHNcclxuXHRcdGV4cGVjdChmb3JtYXR0ZWREdXJhdGlvbikudG9Db250YWluKFwiNVwiKTtcclxuXHRcdFxyXG5cdFx0Ly8gVGltZXIgc2hvdWxkIGJlIHJlbW92ZWRcclxuXHRcdGV4cGVjdChtYW5hZ2VyLmdldFRpbWVyU3RhdGUodGFza0lkKSkudG9CZU51bGwoKTtcclxuXHRcdFxyXG5cdFx0Ly8gUmVzdG9yZSBEYXRlLm5vd1xyXG5cdFx0RGF0ZS5ub3cgPSBvcmlnaW5hbE5vdztcclxuXHR9KTtcclxufSk7Il19