import { getTodayLocalDateString, getLocalDateString } from "../utils/date/date-formatter";
describe("dateUtil", () => {
    describe("getTodayLocalDateString", () => {
        test("should return today's date in YYYY-MM-DD format in local timezone", () => {
            const result = getTodayLocalDateString();
            const today = new Date();
            const expected = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
            expect(result).toBe(expected);
            expect(result).toMatch(/^\d{4}-\d{2}-\d{2}$/);
        });
        test("should not be affected by timezone differences", () => {
            // This test verifies that our function returns the local date
            // regardless of what toISOString() would return
            const result = getTodayLocalDateString();
            const today = new Date();
            const isoDate = today.toISOString().split('T')[0];
            // The result should match the local date calculation
            const localDate = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
            expect(result).toBe(localDate);
            // Note: result might differ from isoDate if user is in a timezone ahead of UTC
            // and it's early morning, but that's the bug we're fixing
        });
    });
    describe("getLocalDateString", () => {
        test("should convert Date object to YYYY-MM-DD format in local timezone", () => {
            const testDate = new Date(2024, 0, 15); // January 15, 2024 (month is 0-indexed)
            const result = getLocalDateString(testDate);
            expect(result).toBe("2024-01-15");
        });
        test("should handle different dates correctly", () => {
            const testCases = [
                { date: new Date(2024, 11, 31), expected: "2024-12-31" },
                { date: new Date(2023, 0, 1), expected: "2023-01-01" },
                { date: new Date(2024, 5, 15), expected: "2024-06-15" }, // June 15, 2024
            ];
            testCases.forEach(({ date, expected }) => {
                expect(getLocalDateString(date)).toBe(expected);
            });
        });
        test("should not be affected by timezone when converting local Date objects", () => {
            const testDate = new Date(2024, 0, 15, 10, 30, 0); // January 15, 2024, 10:30 AM local time
            const result = getLocalDateString(testDate);
            // Should always return the local date part
            expect(result).toBe("2024-01-15");
            // Verify it matches our manual calculation
            const expected = `${testDate.getFullYear()}-${String(testDate.getMonth() + 1).padStart(2, '0')}-${String(testDate.getDate()).padStart(2, '0')}`;
            expect(result).toBe(expected);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZVV0aWwudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGVVdGlsLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFM0YsUUFBUSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7SUFDekIsUUFBUSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtRQUN4QyxJQUFJLENBQUMsbUVBQW1FLEVBQUUsR0FBRyxFQUFFO1lBQzlFLE1BQU0sTUFBTSxHQUFHLHVCQUF1QixFQUFFLENBQUM7WUFDekMsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUN6QixNQUFNLFFBQVEsR0FBRyxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUV2SSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxnREFBZ0QsRUFBRSxHQUFHLEVBQUU7WUFDM0QsOERBQThEO1lBQzlELGdEQUFnRDtZQUNoRCxNQUFNLE1BQU0sR0FBRyx1QkFBdUIsRUFBRSxDQUFDO1lBQ3pDLE1BQU0sS0FBSyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7WUFDekIsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUss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QUFDSixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFRvZGF5TG9jYWxEYXRlU3RyaW5nLCBnZXRMb2NhbERhdGVTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbHMvZGF0ZS9kYXRlLWZvcm1hdHRlclwiO1xyXG5cclxuZGVzY3JpYmUoXCJkYXRlVXRpbFwiLCAoKSA9PiB7XHJcblx0ZGVzY3JpYmUoXCJnZXRUb2RheUxvY2FsRGF0ZVN0cmluZ1wiLCAoKSA9PiB7XHJcblx0XHR0ZXN0KFwic2hvdWxkIHJldHVybiB0b2RheSdzIGRhdGUgaW4gWVlZWS1NTS1ERCBmb3JtYXQgaW4gbG9jYWwgdGltZXpvbmVcIiwgKCkgPT4ge1xyXG5cdFx0XHRjb25zdCByZXN1bHQgPSBnZXRUb2RheUxvY2FsRGF0ZVN0cmluZygpO1xyXG5cdFx0XHRjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdGNvbnN0IGV4cGVjdGVkID0gYCR7dG9kYXkuZ2V0RnVsbFllYXIoKX0tJHtTdHJpbmcodG9kYXkuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsICcwJyl9LSR7U3RyaW5nKHRvZGF5LmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKX1gO1xyXG5cdFx0XHRcclxuXHRcdFx0ZXhwZWN0KHJlc3VsdCkudG9CZShleHBlY3RlZCk7XHJcblx0XHRcdGV4cGVjdChyZXN1bHQpLnRvTWF0Y2goL15cXGR7NH0tXFxkezJ9LVxcZHsyfSQvKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRlc3QoXCJzaG91bGQgbm90IGJlIGFmZmVjdGVkIGJ5IHRpbWV6b25lIGRpZmZlcmVuY2VzXCIsICgpID0+IHtcclxuXHRcdFx0Ly8gVGhpcyB0ZXN0IHZlcmlmaWVzIHRoYXQgb3VyIGZ1bmN0aW9uIHJldHVybnMgdGhlIGxvY2FsIGRhdGVcclxuXHRcdFx0Ly8gcmVnYXJkbGVzcyBvZiB3aGF0IHRvSVNPU3RyaW5nKCkgd291bGQgcmV0dXJuXHJcblx0XHRcdGNvbnN0IHJlc3VsdCA9IGdldFRvZGF5TG9jYWxEYXRlU3RyaW5nKCk7XHJcblx0XHRcdGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcclxuXHRcdFx0Y29uc3QgaXNvRGF0ZSA9IHRvZGF5LnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFRoZSByZXN1bHQgc2hvdWxkIG1hdGNoIHRoZSBsb2NhbCBkYXRlIGNhbGN1bGF0aW9uXHJcblx0XHRcdGNvbnN0IGxvY2FsRGF0ZSA9IGAke3RvZGF5LmdldEZ1bGxZZWFyKCl9LSR7U3RyaW5nKHRvZGF5LmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpfS0ke1N0cmluZyh0b2RheS5nZXREYXRlKCkpLnBhZFN0YXJ0KDIsICcwJyl9YDtcclxuXHRcdFx0ZXhwZWN0KHJlc3VsdCkudG9CZShsb2NhbERhdGUpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gTm90ZTogcmVzdWx0IG1pZ2h0IGRpZmZlciBmcm9tIGlzb0RhdGUgaWYgdXNlciBpcyBpbiBhIHRpbWV6b25lIGFoZWFkIG9mIFVUQ1xyXG5cdFx0XHQvLyBhbmQgaXQncyBlYXJseSBtb3JuaW5nLCBidXQgdGhhdCdzIHRoZSBidWcgd2UncmUgZml4aW5nXHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0ZGVzY3JpYmUoXCJnZXRMb2NhbERhdGVTdHJpbmdcIiwgKCkgPT4ge1xyXG5cdFx0dGVzdChcInNob3VsZCBjb252ZXJ0IERhdGUgb2JqZWN0IHRvIFlZWVktTU0tREQgZm9ybWF0IGluIGxvY2FsIHRpbWV6b25lXCIsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgdGVzdERhdGUgPSBuZXcgRGF0ZSgyMDI0LCAwLCAxNSk7IC8vIEphbnVhcnkgMTUsIDIwMjQgKG1vbnRoIGlzIDAtaW5kZXhlZClcclxuXHRcdFx0Y29uc3QgcmVzdWx0ID0gZ2V0TG9jYWxEYXRlU3RyaW5nKHRlc3REYXRlKTtcclxuXHRcdFx0XHJcblx0XHRcdGV4cGVjdChyZXN1bHQpLnRvQmUoXCIyMDI0LTAxLTE1XCIpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGVzdChcInNob3VsZCBoYW5kbGUgZGlmZmVyZW50IGRhdGVzIGNvcnJlY3RseVwiLCAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IHRlc3RDYXNlcyA9IFtcclxuXHRcdFx0XHR7IGRhdGU6IG5ldyBEYXRlKDIwMjQsIDExLCAzMSksIGV4cGVjdGVkOiBcIjIwMjQtMTItMzFcIiB9LCAvLyBEZWNlbWJlciAzMSwgMjAyNFxyXG5cdFx0XHRcdHsgZGF0ZTogbmV3IERhdGUoMjAyMywgMCwgMSksIGV4cGVjdGVkOiBcIjIwMjMtMDEtMDFcIiB9LCAgIC8vIEphbnVhcnkgMSwgMjAyM1xyXG5cdFx0XHRcdHsgZGF0ZTogbmV3IERhdGUoMjAyNCwgNSwgMTUpLCBleHBlY3RlZDogXCIyMDI0LTA2LTE1XCIgfSwgIC8vIEp1bmUgMTUsIDIwMjRcclxuXHRcdFx0XTtcclxuXHJcblx0XHRcdHRlc3RDYXNlcy5mb3JFYWNoKCh7IGRhdGUsIGV4cGVjdGVkIH0pID0+IHtcclxuXHRcdFx0XHRleHBlY3QoZ2V0TG9jYWxEYXRlU3RyaW5nKGRhdGUpKS50b0JlKGV4cGVjdGVkKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHR0ZXN0KFwic2hvdWxkIG5vdCBiZSBhZmZlY3RlZCBieSB0aW1lem9uZSB3aGVuIGNvbnZlcnRpbmcgbG9jYWwgRGF0ZSBvYmplY3RzXCIsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgdGVzdERhdGUgPSBuZXcgRGF0ZSgyMDI0LCAwLCAxNSwgMTAsIDMwLCAwKTsgLy8gSmFudWFyeSAxNSwgMjAyNCwgMTA6MzAgQU0gbG9jYWwgdGltZVxyXG5cdFx0XHRjb25zdCByZXN1bHQgPSBnZXRMb2NhbERhdGVTdHJpbmcodGVzdERhdGUpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gU2hvdWxkIGFsd2F5cyByZXR1cm4gdGhlIGxvY2FsIGRhdGUgcGFydFxyXG5cdFx0XHRleHBlY3QocmVzdWx0KS50b0JlKFwiMjAyNC0wMS0xNVwiKTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFZlcmlmeSBpdCBtYXRjaGVzIG91ciBtYW51YWwgY2FsY3VsYXRpb25cclxuXHRcdFx0Y29uc3QgZXhwZWN0ZWQgPSBgJHt0ZXN0RGF0ZS5nZXRGdWxsWWVhcigpfS0ke1N0cmluZyh0ZXN0RGF0ZS5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKX0tJHtTdHJpbmcodGVzdERhdGUuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpfWA7XHJcblx0XHRcdGV4cGVjdChyZXN1bHQpLnRvQmUoZXhwZWN0ZWQpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn0pO1xyXG4iXX0=