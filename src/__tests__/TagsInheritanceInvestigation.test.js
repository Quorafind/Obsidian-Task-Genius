/**
 * Investigation: Tags Inheritance and Metadata Fields
 */
import { MarkdownTaskParser } from "../dataflow/core/ConfigurableTaskParser";
import { getConfig } from "../common/task-parser-config";
import { createMockPlugin } from "./mockUtils";
import { DEFAULT_SETTINGS } from "../common/setting-definition";
describe("Tags Inheritance Investigation", () => {
    test("should investigate what fields are being inherited incorrectly", () => {
        const mockPlugin = createMockPlugin(Object.assign(Object.assign({}, DEFAULT_SETTINGS), { fileMetadataInheritance: {
                enabled: true,
                inheritFromFrontmatter: true,
                inheritFromFrontmatterForSubtasks: false,
            } }));
        const config = getConfig("tasks", mockPlugin);
        const parser = new MarkdownTaskParser(config);
        const content = `- [>] 12312312
  - [ ] child task`;
        // Simulate problematic file metadata that might contain structural fields
        const fileMetadata = {
            tags: ["mobility"],
            children: ["some-other-task"],
            parent: "some-parent",
            heading: ["Some Heading"],
            id: "file-id",
            priority: "high",
            area: "work", // This SHOULD be inherited
        };
        const tasks = parser.parseLegacy(content, "templify-asdasdasd-20250704120358.md", fileMetadata);
        const parentTask = tasks[0];
        const childTask = tasks[1];
        // Check parent task
        console.log("Parent task metadata:", JSON.stringify(parentTask.metadata, null, 2));
        // Check child task
        console.log("Child task metadata:", JSON.stringify(childTask.metadata, null, 2));
        // The problematic fields should NOT be inherited from file metadata
        expect(parentTask.metadata.children).not.toEqual(["some-other-task"]);
        expect(parentTask.metadata.parent).not.toBe("some-parent");
        expect(parentTask.metadata.id).not.toBe("file-id");
        // But the appropriate fields should be inherited
        expect(parentTask.metadata.priority).toBe(4); // "high" converted to 4
        expect(parentTask.metadata.area).toBe("work");
        expect(parentTask.metadata.tags).toContain("mobility");
        // Parent task should have correct structural fields
        expect(parentTask.metadata.children).toEqual([childTask.id]);
        expect(parentTask.metadata.parent).toBeUndefined();
        // Child task should have correct structural fields
        expect(childTask.metadata.children).toEqual([]);
        expect(childTask.metadata.parent).toBe(parentTask.id);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFnc0luaGVyaXRhbmNlSW52ZXN0aWdhdGlvbi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGFnc0luaGVyaXRhbmNlSW52ZXN0aWdhdGlvbi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBRUgsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDN0UsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUVoRSxRQUFRLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO0lBQy9DLElBQUksQ0FBQyxnRUFBZ0UsRUFBRSxHQUFHLEVBQUU7UUFDM0UsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLGlDQUMvQixnQkFBZ0IsS0FDbkIsdUJBQXVCLEVBQUU7Z0JBQ3hCLE9BQU8sRUFBRSxJQUFJO2dCQUNiLHNCQUFzQixFQUFFLElBQUk7Z0JBQzVCLGlDQUFpQyxFQUFFLEtBQUs7YUFDeEMsSUFDQSxDQUFDO1FBRUgsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM5QyxNQUFNLE1BQU0sR0FBRyxJQUFJLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTlDLE1BQU0sT0FBTyxHQUFHO21CQUNDLENBQUM7UUFFbEIsMEVBQTBFO1FBQzFFLE1BQU0sWUFBWSxHQUFHO1lBQ3BCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNsQixRQUFRLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztZQUM3QixNQUFNLEVBQUUsYUFBYTtZQUNyQixPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUM7WUFDekIsRUFBRSxFQUFFLFNBQVM7WUFDYixRQUFRLEVBQUUsTUFBTTtZQUNoQixJQUFJLEVBQUUsTUFBTSxFQUFFLDJCQUEyQjtTQUN6QyxDQUFDO1FBRUYsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsc0NBQXNDLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFaEcsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUzQixvQkFBb0I7UUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbkYsbUJBQW1CO1FBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWpGLG9FQUFvRTtRQUNwRSxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVuRCxpREFBaUQ7UUFDakQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQXdCO1FBQ3RFLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFdkQsb0RBQW9EO1FBQ3BELE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRW5ELG1EQUFtRDtRQUNuRCxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEludmVzdGlnYXRpb246IFRhZ3MgSW5oZXJpdGFuY2UgYW5kIE1ldGFkYXRhIEZpZWxkc1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IE1hcmtkb3duVGFza1BhcnNlciB9IGZyb20gXCIuLi9kYXRhZmxvdy9jb3JlL0NvbmZpZ3VyYWJsZVRhc2tQYXJzZXJcIjtcclxuaW1wb3J0IHsgZ2V0Q29uZmlnIH0gZnJvbSBcIi4uL2NvbW1vbi90YXNrLXBhcnNlci1jb25maWdcIjtcclxuaW1wb3J0IHsgY3JlYXRlTW9ja1BsdWdpbiB9IGZyb20gXCIuL21vY2tVdGlsc1wiO1xyXG5pbXBvcnQgeyBERUZBVUxUX1NFVFRJTkdTIH0gZnJvbSBcIi4uL2NvbW1vbi9zZXR0aW5nLWRlZmluaXRpb25cIjtcclxuXHJcbmRlc2NyaWJlKFwiVGFncyBJbmhlcml0YW5jZSBJbnZlc3RpZ2F0aW9uXCIsICgpID0+IHtcclxuXHR0ZXN0KFwic2hvdWxkIGludmVzdGlnYXRlIHdoYXQgZmllbGRzIGFyZSBiZWluZyBpbmhlcml0ZWQgaW5jb3JyZWN0bHlcIiwgKCkgPT4ge1xyXG5cdFx0Y29uc3QgbW9ja1BsdWdpbiA9IGNyZWF0ZU1vY2tQbHVnaW4oe1xyXG5cdFx0XHQuLi5ERUZBVUxUX1NFVFRJTkdTLFxyXG5cdFx0XHRmaWxlTWV0YWRhdGFJbmhlcml0YW5jZToge1xyXG5cdFx0XHRcdGVuYWJsZWQ6IHRydWUsXHJcblx0XHRcdFx0aW5oZXJpdEZyb21Gcm9udG1hdHRlcjogdHJ1ZSxcclxuXHRcdFx0XHRpbmhlcml0RnJvbUZyb250bWF0dGVyRm9yU3VidGFza3M6IGZhbHNlLFxyXG5cdFx0XHR9LFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y29uc3QgY29uZmlnID0gZ2V0Q29uZmlnKFwidGFza3NcIiwgbW9ja1BsdWdpbik7XHJcblx0XHRjb25zdCBwYXJzZXIgPSBuZXcgTWFya2Rvd25UYXNrUGFyc2VyKGNvbmZpZyk7XHJcblxyXG5cdFx0Y29uc3QgY29udGVudCA9IGAtIFs+XSAxMjMxMjMxMlxyXG4gIC0gWyBdIGNoaWxkIHRhc2tgO1xyXG5cdFx0XHJcblx0XHQvLyBTaW11bGF0ZSBwcm9ibGVtYXRpYyBmaWxlIG1ldGFkYXRhIHRoYXQgbWlnaHQgY29udGFpbiBzdHJ1Y3R1cmFsIGZpZWxkc1xyXG5cdFx0Y29uc3QgZmlsZU1ldGFkYXRhID0ge1xyXG5cdFx0XHR0YWdzOiBbXCJtb2JpbGl0eVwiXSxcclxuXHRcdFx0Y2hpbGRyZW46IFtcInNvbWUtb3RoZXItdGFza1wiXSwgLy8gVGhpcyBzaG91bGQgTk9UIGJlIGluaGVyaXRlZFxyXG5cdFx0XHRwYXJlbnQ6IFwic29tZS1wYXJlbnRcIiwgLy8gVGhpcyBzaG91bGQgTk9UIGJlIGluaGVyaXRlZFxyXG5cdFx0XHRoZWFkaW5nOiBbXCJTb21lIEhlYWRpbmdcIl0sIC8vIFRoaXMgc2hvdWxkIE5PVCBiZSBpbmhlcml0ZWRcclxuXHRcdFx0aWQ6IFwiZmlsZS1pZFwiLCAvLyBUaGlzIHNob3VsZCBOT1QgYmUgaW5oZXJpdGVkXHJcblx0XHRcdHByaW9yaXR5OiBcImhpZ2hcIiwgLy8gVGhpcyBTSE9VTEQgYmUgaW5oZXJpdGVkXHJcblx0XHRcdGFyZWE6IFwid29ya1wiLCAvLyBUaGlzIFNIT1VMRCBiZSBpbmhlcml0ZWRcclxuXHRcdH07XHJcblxyXG5cdFx0Y29uc3QgdGFza3MgPSBwYXJzZXIucGFyc2VMZWdhY3koY29udGVudCwgXCJ0ZW1wbGlmeS1hc2Rhc2Rhc2QtMjAyNTA3MDQxMjAzNTgubWRcIiwgZmlsZU1ldGFkYXRhKTtcclxuXHJcblx0XHRjb25zdCBwYXJlbnRUYXNrID0gdGFza3NbMF07XHJcblx0XHRjb25zdCBjaGlsZFRhc2sgPSB0YXNrc1sxXTtcclxuXHRcdFxyXG5cdFx0Ly8gQ2hlY2sgcGFyZW50IHRhc2tcclxuXHRcdGNvbnNvbGUubG9nKFwiUGFyZW50IHRhc2sgbWV0YWRhdGE6XCIsIEpTT04uc3RyaW5naWZ5KHBhcmVudFRhc2subWV0YWRhdGEsIG51bGwsIDIpKTtcclxuXHRcdFxyXG5cdFx0Ly8gQ2hlY2sgY2hpbGQgdGFza1xyXG5cdFx0Y29uc29sZS5sb2coXCJDaGlsZCB0YXNrIG1ldGFkYXRhOlwiLCBKU09OLnN0cmluZ2lmeShjaGlsZFRhc2subWV0YWRhdGEsIG51bGwsIDIpKTtcclxuXHRcdFxyXG5cdFx0Ly8gVGhlIHByb2JsZW1hdGljIGZpZWxkcyBzaG91bGQgTk9UIGJlIGluaGVyaXRlZCBmcm9tIGZpbGUgbWV0YWRhdGFcclxuXHRcdGV4cGVjdChwYXJlbnRUYXNrLm1ldGFkYXRhLmNoaWxkcmVuKS5ub3QudG9FcXVhbChbXCJzb21lLW90aGVyLXRhc2tcIl0pO1xyXG5cdFx0ZXhwZWN0KHBhcmVudFRhc2subWV0YWRhdGEucGFyZW50KS5ub3QudG9CZShcInNvbWUtcGFyZW50XCIpO1xyXG5cdFx0ZXhwZWN0KHBhcmVudFRhc2subWV0YWRhdGEuaWQpLm5vdC50b0JlKFwiZmlsZS1pZFwiKTtcclxuXHRcdFxyXG5cdFx0Ly8gQnV0IHRoZSBhcHByb3ByaWF0ZSBmaWVsZHMgc2hvdWxkIGJlIGluaGVyaXRlZFxyXG5cdFx0ZXhwZWN0KHBhcmVudFRhc2subWV0YWRhdGEucHJpb3JpdHkpLnRvQmUoNCk7IC8vIFwiaGlnaFwiIGNvbnZlcnRlZCB0byA0XHJcblx0XHRleHBlY3QocGFyZW50VGFzay5tZXRhZGF0YS5hcmVhKS50b0JlKFwid29ya1wiKTtcclxuXHRcdGV4cGVjdChwYXJlbnRUYXNrLm1ldGFkYXRhLnRhZ3MpLnRvQ29udGFpbihcIm1vYmlsaXR5XCIpO1xyXG5cdFx0XHJcblx0XHQvLyBQYXJlbnQgdGFzayBzaG91bGQgaGF2ZSBjb3JyZWN0IHN0cnVjdHVyYWwgZmllbGRzXHJcblx0XHRleHBlY3QocGFyZW50VGFzay5tZXRhZGF0YS5jaGlsZHJlbikudG9FcXVhbChbY2hpbGRUYXNrLmlkXSk7XHJcblx0XHRleHBlY3QocGFyZW50VGFzay5tZXRhZGF0YS5wYXJlbnQpLnRvQmVVbmRlZmluZWQoKTtcclxuXHRcdFxyXG5cdFx0Ly8gQ2hpbGQgdGFzayBzaG91bGQgaGF2ZSBjb3JyZWN0IHN0cnVjdHVyYWwgZmllbGRzXHJcblx0XHRleHBlY3QoY2hpbGRUYXNrLm1ldGFkYXRhLmNoaWxkcmVuKS50b0VxdWFsKFtdKTtcclxuXHRcdGV4cGVjdChjaGlsZFRhc2subWV0YWRhdGEucGFyZW50KS50b0JlKHBhcmVudFRhc2suaWQpO1xyXG5cdH0pO1xyXG59KTsiXX0=