/**
 * Timeline Canvas Integration Tests
 *
 * Tests to verify that Canvas task completion works correctly in the Timeline feature
 */
import { __awaiter } from "tslib";
import { CanvasTaskUpdater } from "../parsers/canvas-task-updater";
// Mock Vault and TFile (same as CanvasTaskUpdater.test.ts)
class MockVault {
    constructor() {
        this.files = new Map();
    }
    getFileByPath(path) {
        if (this.files.has(path)) {
            return new MockTFile(path);
        }
        return null;
    }
    read(file) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.files.get(file.path) || '';
        });
    }
    modify(file, content) {
        return __awaiter(this, void 0, void 0, function* () {
            this.files.set(file.path, content);
        });
    }
    setFileContent(path, content) {
        this.files.set(path, content);
    }
    getFileContent(path) {
        return this.files.get(path);
    }
    createFile(path, content) {
        this.files.set(path, content);
        return new MockTFile(path);
    }
}
class MockTFile {
    constructor(path) {
        this.path = path;
    }
    get name() {
        return this.path.split('/').pop() || '';
    }
    get extension() {
        return this.path.split('.').pop() || '';
    }
}
// Mock Plugin (same as CanvasTaskUpdater.test.ts)
class MockPlugin {
    constructor() {
        this.settings = {
            preferMetadataFormat: 'tasks',
            projectTagPrefix: {
                tasks: 'project',
                dataview: 'project'
            },
            contextTagPrefix: {
                tasks: '@',
                dataview: 'context'
            }
        };
    }
}
describe('Timeline Canvas Integration', () => {
    let mockPlugin;
    let mockVault;
    let canvasTaskUpdater;
    beforeEach(() => {
        mockPlugin = new MockPlugin();
        mockVault = new MockVault();
        // Initialize CanvasTaskUpdater
        canvasTaskUpdater = new CanvasTaskUpdater(mockVault, mockPlugin);
    });
    describe('Canvas Task Identification', () => {
        it('should correctly identify Canvas tasks', () => {
            const canvasTask = {
                id: 'canvas-task-1',
                content: 'Canvas task',
                filePath: 'test.canvas',
                line: 0,
                completed: false,
                status: ' ',
                originalMarkdown: '- [ ] Canvas task',
                metadata: {
                    sourceType: 'canvas',
                    canvasNodeId: 'node-1',
                    tags: [],
                    children: []
                }
            };
            const markdownTask = {
                id: 'markdown-task-1',
                content: 'Markdown task',
                filePath: 'test.md',
                line: 0,
                completed: false,
                status: ' ',
                originalMarkdown: '- [ ] Markdown task',
                metadata: {
                    tags: [],
                    children: []
                }
            };
            expect(CanvasTaskUpdater.isCanvasTask(canvasTask)).toBe(true);
            expect(CanvasTaskUpdater.isCanvasTask(markdownTask)).toBe(false);
        });
    });
    describe('Canvas Task Completion in Timeline', () => {
        it('should successfully complete Canvas tasks through TaskManager', () => __awaiter(void 0, void 0, void 0, function* () {
            // Create a Canvas file with a task
            const canvasData = {
                nodes: [
                    {
                        id: 'test-node',
                        type: 'text',
                        text: '# Test Canvas\n\n- [ ] Test Canvas task',
                        x: 100,
                        y: 100,
                        width: 300,
                        height: 200
                    }
                ],
                edges: []
            };
            const canvasFile = mockVault.createFile('test.canvas', JSON.stringify(canvasData, null, 2));
            // Create a Canvas task
            const originalTask = {
                id: 'test-canvas-task',
                content: 'Test Canvas task',
                filePath: 'test.canvas',
                line: 0,
                completed: false,
                status: ' ',
                originalMarkdown: '- [ ] Test Canvas task',
                metadata: {
                    sourceType: 'canvas',
                    canvasNodeId: 'test-node',
                    tags: [],
                    children: []
                }
            };
            // Create updated task (completed)
            const updatedTask = Object.assign(Object.assign({}, originalTask), { completed: true, status: 'x', metadata: Object.assign(Object.assign({}, originalTask.metadata), { completedDate: Date.now() }) });
            // Test Canvas task update directly
            const result = yield canvasTaskUpdater.updateCanvasTask(originalTask, updatedTask);
            expect(result.success).toBe(true);
            // Verify the Canvas file was updated
            const updatedContent = mockVault.getFileContent('test.canvas');
            expect(updatedContent).toBeDefined();
            const updatedCanvasData = JSON.parse(updatedContent);
            const updatedNode = updatedCanvasData.nodes.find((n) => n.id === 'test-node');
            expect(updatedNode.text).toContain('- [x] Test Canvas task');
        }));
        it('should handle Canvas task completion through Timeline toggleTaskCompletion flow', () => __awaiter(void 0, void 0, void 0, function* () {
            // This test simulates the Timeline's task completion flow
            const canvasData = {
                nodes: [
                    {
                        id: 'timeline-test-node',
                        type: 'text',
                        text: '# Timeline Test\n\n- [ ] Timeline Canvas task üìÖ 2025-01-15',
                        x: 100,
                        y: 100,
                        width: 300,
                        height: 200
                    }
                ],
                edges: []
            };
            mockVault.createFile('timeline-test.canvas', JSON.stringify(canvasData, null, 2));
            const canvasTask = {
                id: 'timeline-canvas-task',
                content: 'Timeline Canvas task',
                filePath: 'timeline-test.canvas',
                line: 0,
                completed: false,
                status: ' ',
                originalMarkdown: '- [ ] Timeline Canvas task üìÖ 2025-01-15',
                metadata: {
                    sourceType: 'canvas',
                    canvasNodeId: 'timeline-test-node',
                    dueDate: new Date('2025-01-15').getTime(),
                    tags: [],
                    children: []
                }
            };
            // Simulate the Timeline's toggleTaskCompletion logic
            const updatedTask = Object.assign(Object.assign({}, canvasTask), { completed: !canvasTask.completed });
            if (updatedTask.completed) {
                updatedTask.metadata.completedDate = Date.now();
                updatedTask.status = 'x';
            }
            // Test that CanvasTaskUpdater.isCanvasTask correctly identifies this task
            expect(CanvasTaskUpdater.isCanvasTask(canvasTask)).toBe(true);
            // Test the Canvas task update
            const result = yield canvasTaskUpdater.updateCanvasTask(canvasTask, updatedTask);
            if (!result.success) {
                console.log('Canvas task update failed:', result.error);
            }
            expect(result.success).toBe(true);
            // Verify the Canvas file was updated correctly
            const updatedContent = mockVault.getFileContent('timeline-test.canvas');
            const updatedCanvasData = JSON.parse(updatedContent);
            const updatedNode = updatedCanvasData.nodes.find((n) => n.id === 'timeline-test-node');
            expect(updatedNode.text).toContain('- [x] Timeline Canvas task');
            expect(updatedNode.text).toContain('üìÖ 2025-01-15');
            // Should also contain completion date
            const today = new Date();
            const expectedDate = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
            expect(updatedNode.text).toContain(`‚úÖ ${expectedDate}`);
        }));
        it('should handle Canvas task completion with originalMarkdown matching', () => __awaiter(void 0, void 0, void 0, function* () {
            // Test the improved originalMarkdown matching logic
            const canvasData = {
                nodes: [
                    {
                        id: 'matching-test-node',
                        type: 'text',
                        text: '# Matching Test\n\n- [ ] Task with complex metadata #project/test @home ‚è´ üìÖ 2025-01-20',
                        x: 100,
                        y: 100,
                        width: 400,
                        height: 250
                    }
                ],
                edges: []
            };
            mockVault.createFile('matching-test.canvas', JSON.stringify(canvasData, null, 2));
            const complexTask = {
                id: 'complex-canvas-task',
                content: 'Task with complex metadata',
                filePath: 'matching-test.canvas',
                line: 0,
                completed: false,
                status: ' ',
                originalMarkdown: '- [ ] Task with complex metadata #project/test @home ‚è´ üìÖ 2025-01-20',
                metadata: {
                    sourceType: 'canvas',
                    canvasNodeId: 'matching-test-node',
                    dueDate: new Date('2025-01-20').getTime(),
                    priority: 4,
                    project: 'test',
                    context: 'home',
                    tags: ['#project/test'],
                    children: []
                }
            };
            // Complete the task
            const completedTask = Object.assign(Object.assign({}, complexTask), { completed: true, status: 'x', metadata: Object.assign(Object.assign({}, complexTask.metadata), { completedDate: Date.now() }) });
            const result = yield canvasTaskUpdater.updateCanvasTask(complexTask, completedTask);
            expect(result.success).toBe(true);
            // Verify the task was found and updated correctly
            const updatedContent = mockVault.getFileContent('matching-test.canvas');
            const updatedCanvasData = JSON.parse(updatedContent);
            const updatedNode = updatedCanvasData.nodes.find((n) => n.id === 'matching-test-node');
            expect(updatedNode.text).toContain('- [x] Task with complex metadata');
            expect(updatedNode.text).toContain('#project/test');
            expect(updatedNode.text).toContain('@home');
            expect(updatedNode.text).toContain('‚è´');
            expect(updatedNode.text).toContain('üìÖ 2025-01-20');
            // Should contain completion date
            const today = new Date();
            const expectedDate = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
            expect(updatedNode.text).toContain(`‚úÖ ${expectedDate}`);
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,