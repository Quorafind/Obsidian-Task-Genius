/**
 * Integration tests for inline task parsing with enhanced time parsing
 */
import { ConfigurableTaskParser } from "../dataflow/core/ConfigurableTaskParser";
import { TimeParsingService } from "../services/time-parsing-service";
import { MetadataParseMode } from "../types/TaskParserConfig";
describe("Inline Task Time Integration", () => {
    let timeParsingService;
    let taskParser;
    beforeEach(() => {
        // Create time parsing service with test configuration
        const timeConfig = {
            enabled: true,
            supportedLanguages: ["en"],
            dateKeywords: {
                start: ["start", "from", "begins"],
                due: ["due", "deadline", "by"],
                scheduled: ["scheduled", "at", "@"],
            },
            removeOriginalText: false,
            perLineProcessing: true,
            realTimeReplacement: false,
        };
        timeParsingService = new TimeParsingService(timeConfig);
        // Create task parser with time parsing service
        const parserConfig = {
            parseMetadata: true,
            parseTags: true,
            parseComments: false,
            parseHeadings: false,
            metadataParseMode: MetadataParseMode.Both,
        };
        taskParser = new ConfigurableTaskParser(parserConfig, timeParsingService);
    });
    describe("Single Time Extraction", () => {
        it("should extract single time from inline task", () => {
            var _a, _b;
            const markdown = "- [ ] Meeting at 2:30 PM";
            const tasks = taskParser.parse(markdown, "test.md");
            expect(tasks).toHaveLength(1);
            const task = tasks[0];
            expect(task.content).toBe("Meeting at 2:30 PM");
            expect(task.metadata.timeComponents).toBeDefined();
            // Check time component (could be dueTime or scheduledTime based on context)
            const timeComponent = ((_a = task.metadata.timeComponents) === null || _a === void 0 ? void 0 : _a.dueTime) || ((_b = task.metadata.timeComponents) === null || _b === void 0 ? void 0 : _b.scheduledTime);
            expect(timeComponent).toBeDefined();
            expect(timeComponent === null || timeComponent === void 0 ? void 0 : timeComponent.hour).toBe(14);
            expect(timeComponent === null || timeComponent === void 0 ? void 0 : timeComponent.minute).toBe(30);
        });
        it("should extract 24-hour format time", () => {
            var _a, _b;
            const markdown = "- [ ] Call client at 15:45";
            const tasks = taskParser.parse(markdown, "test.md");
            expect(tasks).toHaveLength(1);
            const task = tasks[0];
            expect(task.content).toBe("Call client at 15:45");
            expect(task.metadata.timeComponents).toBeDefined();
            const timeComponent = ((_a = task.metadata.timeComponents) === null || _a === void 0 ? void 0 : _a.dueTime) || ((_b = task.metadata.timeComponents) === null || _b === void 0 ? void 0 : _b.scheduledTime);
            expect(timeComponent).toBeDefined();
            expect(timeComponent === null || timeComponent === void 0 ? void 0 : timeComponent.hour).toBe(15);
            expect(timeComponent === null || timeComponent === void 0 ? void 0 : timeComponent.minute).toBe(45);
        });
    });
    describe("Time Range Extraction", () => {
        it("should extract time range from inline task", () => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            const markdown = "- [ ] Workshop 9:00-17:00";
            const tasks = taskParser.parse(markdown, "test.md");
            expect(tasks).toHaveLength(1);
            const task = tasks[0];
            expect(task.content).toBe("Workshop 9:00-17:00");
            expect(task.metadata.timeComponents).toBeDefined();
            expect((_a = task.metadata.timeComponents) === null || _a === void 0 ? void 0 : _a.startTime).toBeDefined();
            expect((_b = task.metadata.timeComponents) === null || _b === void 0 ? void 0 : _b.endTime).toBeDefined();
            expect((_d = (_c = task.metadata.timeComponents) === null || _c === void 0 ? void 0 : _c.startTime) === null || _d === void 0 ? void 0 : _d.hour).toBe(9);
            expect((_f = (_e = task.metadata.timeComponents) === null || _e === void 0 ? void 0 : _e.startTime) === null || _f === void 0 ? void 0 : _f.minute).toBe(0);
            expect((_h = (_g = task.metadata.timeComponents) === null || _g === void 0 ? void 0 : _g.endTime) === null || _h === void 0 ? void 0 : _h.hour).toBe(17);
            expect((_k = (_j = task.metadata.timeComponents) === null || _j === void 0 ? void 0 : _j.endTime) === null || _k === void 0 ? void 0 : _k.minute).toBe(0);
        });
        it("should extract 12-hour format time range", () => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            const markdown = "- [ ] Meeting 2:30 PM - 4:00 PM";
            const tasks = taskParser.parse(markdown, "test.md");
            expect(tasks).toHaveLength(1);
            const task = tasks[0];
            expect(task.content).toBe("Meeting 2:30 PM - 4:00 PM");
            expect(task.metadata.timeComponents).toBeDefined();
            expect((_a = task.metadata.timeComponents) === null || _a === void 0 ? void 0 : _a.startTime).toBeDefined();
            expect((_b = task.metadata.timeComponents) === null || _b === void 0 ? void 0 : _b.endTime).toBeDefined();
            expect((_d = (_c = task.metadata.timeComponents) === null || _c === void 0 ? void 0 : _c.startTime) === null || _d === void 0 ? void 0 : _d.hour).toBe(14);
            expect((_f = (_e = task.metadata.timeComponents) === null || _e === void 0 ? void 0 : _e.startTime) === null || _f === void 0 ? void 0 : _f.minute).toBe(30);
            expect((_h = (_g = task.metadata.timeComponents) === null || _g === void 0 ? void 0 : _g.endTime) === null || _h === void 0 ? void 0 : _h.hour).toBe(16);
            expect((_k = (_j = task.metadata.timeComponents) === null || _j === void 0 ? void 0 : _j.endTime) === null || _k === void 0 ? void 0 : _k.minute).toBe(0);
        });
    });
    describe("Time with Metadata Integration", () => {
        it("should combine time components with dataview metadata", () => {
            var _a, _b, _c, _d;
            const markdown = "- [ ] Doctor appointment at 3:30 PM [due::2025-08-25]";
            const tasks = taskParser.parse(markdown, "test.md");
            expect(tasks).toHaveLength(1);
            const task = tasks[0];
            expect(task.content).toBe("Doctor appointment at 3:30 PM");
            expect(task.metadata.timeComponents).toBeDefined();
            // Check time component
            const timeComponent = ((_a = task.metadata.timeComponents) === null || _a === void 0 ? void 0 : _a.dueTime) || ((_b = task.metadata.timeComponents) === null || _b === void 0 ? void 0 : _b.scheduledTime);
            expect(timeComponent).toBeDefined();
            expect(timeComponent === null || timeComponent === void 0 ? void 0 : timeComponent.hour).toBe(15);
            expect(timeComponent === null || timeComponent === void 0 ? void 0 : timeComponent.minute).toBe(30);
            // Check that enhanced datetime was created
            expect((_c = task.metadata.enhancedDates) === null || _c === void 0 ? void 0 : _c.dueDateTime).toBeDefined();
            const dueDateTime = (_d = task.metadata.enhancedDates) === null || _d === void 0 ? void 0 : _d.dueDateTime;
            if (dueDateTime) {
                expect(dueDateTime.getFullYear()).toBe(2025);
                expect(dueDateTime.getMonth()).toBe(7); // August (0-based)
                expect(dueDateTime.getDate()).toBe(25);
                expect(dueDateTime.getHours()).toBe(15);
                expect(dueDateTime.getMinutes()).toBe(30);
            }
        });
        it("should handle emoji metadata with time components", () => {
            var _a, _b, _c;
            const markdown = "- [ ] Project deadline at 5:00 PM ðŸ“… 2025-08-25";
            const tasks = taskParser.parse(markdown, "test.md");
            expect(tasks).toHaveLength(1);
            const task = tasks[0];
            expect(task.content).toBe("Project deadline at 5:00 PM");
            expect(task.metadata.timeComponents).toBeDefined();
            const timeComponent = ((_a = task.metadata.timeComponents) === null || _a === void 0 ? void 0 : _a.dueTime) || ((_b = task.metadata.timeComponents) === null || _b === void 0 ? void 0 : _b.scheduledTime);
            expect(timeComponent).toBeDefined();
            expect(timeComponent === null || timeComponent === void 0 ? void 0 : timeComponent.hour).toBe(17);
            expect(timeComponent === null || timeComponent === void 0 ? void 0 : timeComponent.minute).toBe(0);
            // Check enhanced datetime
            expect((_c = task.metadata.enhancedDates) === null || _c === void 0 ? void 0 : _c.dueDateTime).toBeDefined();
        });
    });
    describe("Multiple Tasks", () => {
        it("should extract time components from multiple tasks", () => {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const markdown = `- [ ] Morning meeting at 9:00 AM
- [ ] Lunch break 12:00-13:00
- [ ] Afternoon call at 3:30 PM`;
            const tasks = taskParser.parse(markdown, "test.md");
            expect(tasks).toHaveLength(3);
            // First task
            expect(tasks[0].content).toBe("Morning meeting at 9:00 AM");
            const time1 = ((_a = tasks[0].metadata.timeComponents) === null || _a === void 0 ? void 0 : _a.dueTime) || ((_b = tasks[0].metadata.timeComponents) === null || _b === void 0 ? void 0 : _b.scheduledTime);
            expect(time1 === null || time1 === void 0 ? void 0 : time1.hour).toBe(9);
            expect(time1 === null || time1 === void 0 ? void 0 : time1.minute).toBe(0);
            // Second task (time range)
            expect(tasks[1].content).toBe("Lunch break 12:00-13:00");
            expect((_d = (_c = tasks[1].metadata.timeComponents) === null || _c === void 0 ? void 0 : _c.startTime) === null || _d === void 0 ? void 0 : _d.hour).toBe(12);
            expect((_f = (_e = tasks[1].metadata.timeComponents) === null || _e === void 0 ? void 0 : _e.endTime) === null || _f === void 0 ? void 0 : _f.hour).toBe(13);
            // Third task
            expect(tasks[2].content).toBe("Afternoon call at 3:30 PM");
            const time3 = ((_g = tasks[2].metadata.timeComponents) === null || _g === void 0 ? void 0 : _g.dueTime) || ((_h = tasks[2].metadata.timeComponents) === null || _h === void 0 ? void 0 : _h.scheduledTime);
            expect(time3 === null || time3 === void 0 ? void 0 : time3.hour).toBe(15);
            expect(time3 === null || time3 === void 0 ? void 0 : time3.minute).toBe(30);
        });
    });
    describe("Hierarchical Tasks", () => {
        it("should extract time components from nested tasks", () => {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const markdown = `- [ ] Project meeting 2:00 PM - 4:00 PM
  - [ ] Review agenda at 1:45 PM
  - [ ] Prepare slides at 1:30 PM`;
            const tasks = taskParser.parse(markdown, "test.md");
            expect(tasks).toHaveLength(3);
            // Parent task (time range)
            expect(tasks[0].content).toBe("Project meeting 2:00 PM - 4:00 PM");
            expect((_b = (_a = tasks[0].metadata.timeComponents) === null || _a === void 0 ? void 0 : _a.startTime) === null || _b === void 0 ? void 0 : _b.hour).toBe(14);
            expect((_d = (_c = tasks[0].metadata.timeComponents) === null || _c === void 0 ? void 0 : _c.endTime) === null || _d === void 0 ? void 0 : _d.hour).toBe(16);
            // Child tasks
            expect(tasks[1].content).toBe("Review agenda at 1:45 PM");
            const time1 = ((_e = tasks[1].metadata.timeComponents) === null || _e === void 0 ? void 0 : _e.dueTime) || ((_f = tasks[1].metadata.timeComponents) === null || _f === void 0 ? void 0 : _f.scheduledTime);
            expect(time1 === null || time1 === void 0 ? void 0 : time1.hour).toBe(13);
            expect(time1 === null || time1 === void 0 ? void 0 : time1.minute).toBe(45);
            expect(tasks[2].content).toBe("Prepare slides at 1:30 PM");
            const time2 = ((_g = tasks[2].metadata.timeComponents) === null || _g === void 0 ? void 0 : _g.dueTime) || ((_h = tasks[2].metadata.timeComponents) === null || _h === void 0 ? void 0 : _h.scheduledTime);
            expect(time2 === null || time2 === void 0 ? void 0 : time2.hour).toBe(13);
            expect(time2 === null || time2 === void 0 ? void 0 : time2.minute).toBe(30);
        });
    });
    describe("Error Handling", () => {
        it("should handle tasks without time information gracefully", () => {
            const markdown = "- [ ] Simple task without time";
            const tasks = taskParser.parse(markdown, "test.md");
            expect(tasks).toHaveLength(1);
            const task = tasks[0];
            expect(task.content).toBe("Simple task without time");
            expect(task.metadata.timeComponents).toBeUndefined();
            expect(task.metadata.enhancedDates).toBeUndefined();
        });
        it("should handle invalid time formats gracefully", () => {
            const markdown = "- [ ] Task with invalid time 25:99";
            const tasks = taskParser.parse(markdown, "test.md");
            expect(tasks).toHaveLength(1);
            const task = tasks[0];
            expect(task.content).toBe("Task with invalid time 25:99");
            // Should not crash, may or may not have time components depending on parsing
        });
        it("should work without time parsing service", () => {
            const parserWithoutTime = new ConfigurableTaskParser();
            const markdown = "- [ ] Meeting at 2:30 PM";
            const tasks = parserWithoutTime.parse(markdown, "test.md");
            expect(tasks).toHaveLength(1);
            const task = tasks[0];
            expect(task.content).toBe("Meeting at 2:30 PM");
            expect(task.metadata.timeComponents).toBeUndefined();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,