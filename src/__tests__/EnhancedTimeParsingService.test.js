import { TimeParsingService, DEFAULT_TIME_PARSING_CONFIG, } from "../services/time-parsing-service";
describe("Enhanced TimeParsingService", () => {
    let service;
    beforeEach(() => {
        service = new TimeParsingService(DEFAULT_TIME_PARSING_CONFIG);
    });
    describe("TimeComponent Interface", () => {
        test("should create TimeComponent from 24-hour format (12:00)", () => {
            var _a, _b, _c, _d;
            const result = service.parseTimeExpressions("Meeting at 12:00");
            expect(result.timeComponents).toBeDefined();
            expect(result.timeComponents.scheduledTime).toBeDefined();
            expect((_a = result.timeComponents.scheduledTime) === null || _a === void 0 ? void 0 : _a.hour).toBe(12);
            expect((_b = result.timeComponents.scheduledTime) === null || _b === void 0 ? void 0 : _b.minute).toBe(0);
            expect((_c = result.timeComponents.scheduledTime) === null || _c === void 0 ? void 0 : _c.originalText).toBe("12:00");
            expect((_d = result.timeComponents.scheduledTime) === null || _d === void 0 ? void 0 : _d.isRange).toBe(false);
        });
        test("should create TimeComponent from 24-hour format with seconds (12:00:00)", () => {
            var _a, _b, _c, _d;
            const result = service.parseTimeExpressions("Task at 12:00:00");
            expect(result.timeComponents).toBeDefined();
            expect(result.timeComponents.scheduledTime).toBeDefined();
            expect((_a = result.timeComponents.scheduledTime) === null || _a === void 0 ? void 0 : _a.hour).toBe(12);
            expect((_b = result.timeComponents.scheduledTime) === null || _b === void 0 ? void 0 : _b.minute).toBe(0);
            expect((_c = result.timeComponents.scheduledTime) === null || _c === void 0 ? void 0 : _c.second).toBe(0);
            expect((_d = result.timeComponents.scheduledTime) === null || _d === void 0 ? void 0 : _d.originalText).toBe("12:00:00");
        });
        test("should create TimeComponent from 12-hour format (1:30 PM)", () => {
            var _a, _b, _c;
            const result = service.parseTimeExpressions("Meeting at 1:30 PM");
            expect(result.timeComponents).toBeDefined();
            expect(result.timeComponents.scheduledTime).toBeDefined();
            expect((_a = result.timeComponents.scheduledTime) === null || _a === void 0 ? void 0 : _a.hour).toBe(13);
            expect((_b = result.timeComponents.scheduledTime) === null || _b === void 0 ? void 0 : _b.minute).toBe(30);
            expect((_c = result.timeComponents.scheduledTime) === null || _c === void 0 ? void 0 : _c.originalText).toBe("1:30 PM");
        });
        test("should handle time range with hyphen separator (12:00-13:00)", () => {
            var _a, _b, _c, _d, _e, _f;
            const result = service.parseTimeExpressions("Meeting 12:00-13:00");
            expect(result.timeComponents).toBeDefined();
            expect(result.timeComponents.startTime).toBeDefined();
            expect(result.timeComponents.endTime).toBeDefined();
            expect((_a = result.timeComponents.startTime) === null || _a === void 0 ? void 0 : _a.hour).toBe(12);
            expect((_b = result.timeComponents.startTime) === null || _b === void 0 ? void 0 : _b.minute).toBe(0);
            expect((_c = result.timeComponents.startTime) === null || _c === void 0 ? void 0 : _c.isRange).toBe(true);
            expect((_d = result.timeComponents.endTime) === null || _d === void 0 ? void 0 : _d.hour).toBe(13);
            expect((_e = result.timeComponents.endTime) === null || _e === void 0 ? void 0 : _e.minute).toBe(0);
            expect((_f = result.timeComponents.endTime) === null || _f === void 0 ? void 0 : _f.isRange).toBe(true);
        });
        test("should handle time range with tilde separator (12:00~13:00)", () => {
            var _a, _b;
            const result = service.parseTimeExpressions("Meeting 12:00~13:00");
            expect(result.timeComponents).toBeDefined();
            expect(result.timeComponents.startTime).toBeDefined();
            expect(result.timeComponents.endTime).toBeDefined();
            expect((_a = result.timeComponents.startTime) === null || _a === void 0 ? void 0 : _a.hour).toBe(12);
            expect((_b = result.timeComponents.endTime) === null || _b === void 0 ? void 0 : _b.hour).toBe(13);
        });
        test("should handle time range with space separator (12:00 - 13:00)", () => {
            var _a, _b;
            const result = service.parseTimeExpressions("Meeting 12:00 - 13:00");
            expect(result.timeComponents).toBeDefined();
            expect(result.timeComponents.startTime).toBeDefined();
            expect(result.timeComponents.endTime).toBeDefined();
            expect((_a = result.timeComponents.startTime) === null || _a === void 0 ? void 0 : _a.hour).toBe(12);
            expect((_b = result.timeComponents.endTime) === null || _b === void 0 ? void 0 : _b.hour).toBe(13);
        });
    });
    describe("Enhanced ParsedTimeResult", () => {
        test("should include parsedExpressions with time components", () => {
            var _a, _b;
            const result = service.parseTimeExpressions("Task at 14:30 tomorrow");
            expect(result.parsedExpressions).toBeDefined();
            expect(result.parsedExpressions.length).toBeGreaterThan(0);
            const expression = result.parsedExpressions[0];
            expect(expression.timeComponent).toBeDefined();
            expect((_a = expression.timeComponent) === null || _a === void 0 ? void 0 : _a.hour).toBe(14);
            expect((_b = expression.timeComponent) === null || _b === void 0 ? void 0 : _b.minute).toBe(30);
            expect(expression.isTimeRange).toBe(false);
        });
        test("should handle time ranges in parsedExpressions", () => {
            var _a, _b;
            const result = service.parseTimeExpressions("Meeting 14:00-16:00 tomorrow");
            expect(result.parsedExpressions).toBeDefined();
            const expression = result.parsedExpressions[0];
            expect(expression.isTimeRange).toBe(true);
            expect(expression.rangeStart).toBeDefined();
            expect(expression.rangeEnd).toBeDefined();
            expect((_a = expression.rangeStart) === null || _a === void 0 ? void 0 : _a.hour).toBe(14);
            expect((_b = expression.rangeEnd) === null || _b === void 0 ? void 0 : _b.hour).toBe(16);
        });
    });
    describe("Time Pattern Recognition", () => {
        test("should recognize various 24-hour formats", () => {
            const testCases = [
                { input: "09:00", expected: { hour: 9, minute: 0 } },
                { input: "13:30", expected: { hour: 13, minute: 30 } },
                { input: "23:59", expected: { hour: 23, minute: 59 } },
                { input: "00:00", expected: { hour: 0, minute: 0 } },
            ];
            testCases.forEach(({ input, expected }) => {
                var _a, _b;
                const result = service.parseTimeExpressions(`Task at ${input}`);
                expect((_a = result.timeComponents.scheduledTime) === null || _a === void 0 ? void 0 : _a.hour).toBe(expected.hour);
                expect((_b = result.timeComponents.scheduledTime) === null || _b === void 0 ? void 0 : _b.minute).toBe(expected.minute);
            });
        });
        test("should recognize various 12-hour formats", () => {
            const testCases = [
                { input: "9:00 AM", expected: { hour: 9, minute: 0 } },
                { input: "1:30 PM", expected: { hour: 13, minute: 30 } },
                { input: "11:59 PM", expected: { hour: 23, minute: 59 } },
                { input: "12:00 AM", expected: { hour: 0, minute: 0 } },
                { input: "12:00 PM", expected: { hour: 12, minute: 0 } },
            ];
            testCases.forEach(({ input, expected }) => {
                var _a, _b;
                const result = service.parseTimeExpressions(`Task at ${input}`);
                expect((_a = result.timeComponents.scheduledTime) === null || _a === void 0 ? void 0 : _a.hour).toBe(expected.hour);
                expect((_b = result.timeComponents.scheduledTime) === null || _b === void 0 ? void 0 : _b.minute).toBe(expected.minute);
            });
        });
        test("should handle midnight crossing ranges (23:00-01:00)", () => {
            var _a, _b;
            const result = service.parseTimeExpressions("Night shift 23:00-01:00");
            expect((_a = result.timeComponents.startTime) === null || _a === void 0 ? void 0 : _a.hour).toBe(23);
            expect((_b = result.timeComponents.endTime) === null || _b === void 0 ? void 0 : _b.hour).toBe(1);
            // Should indicate next day for end time
            expect(result.parsedExpressions[0]).toHaveProperty("crossesMidnight", true);
        });
    });
    describe("Time Validation", () => {
        test("should validate hour range (0-23)", () => {
            const result = service.parseTimeExpressions("Task at 25:00");
            // Invalid time should not be parsed
            expect(result.timeComponents.scheduledTime).toBeUndefined();
        });
        test("should validate minute range (0-59)", () => {
            const result = service.parseTimeExpressions("Task at 12:60");
            // Invalid time should not be parsed
            expect(result.timeComponents.scheduledTime).toBeUndefined();
        });
        test("should validate second range (0-59)", () => {
            const result = service.parseTimeExpressions("Task at 12:30:60");
            // Invalid time (60 seconds) should not be parsed as time component
            // But the regular date parsing might still work for the text
            expect(result.timeComponents).toBeDefined();
            // Time component should not be created for invalid time
            if (result.timeComponents.scheduledTime) {
                // If something was parsed, it shouldn't have 60 seconds
                expect(result.timeComponents.scheduledTime.second).not.toBe(60);
            }
        });
    });
    describe("Error Handling", () => {
        test("should gracefully handle invalid time formats", () => {
            const result = service.parseTimeExpressions("Task at invalid:time");
            expect(result.timeComponents).toBeDefined();
            expect(result.timeComponents.scheduledTime).toBeUndefined();
            expect(result.originalText).toBe("Task at invalid:time");
        });
        test("should fall back to date-only parsing when time parsing fails", () => {
            const result = service.parseTimeExpressions("Task tomorrow at badtime");
            // Should still parse the date part (context "at" makes it scheduled, not due)
            expect(result.scheduledDate).toBeDefined();
            expect(result.timeComponents.scheduledTime).toBeUndefined();
        });
    });
    describe("Configuration", () => {
        test("should respect time parsing configuration", () => {
            var _a;
            const config = Object.assign(Object.assign({}, DEFAULT_TIME_PARSING_CONFIG), { timePatterns: {
                    singleTime: [/\d{1,2}:\d{2}/],
                    timeRange: [/\d{1,2}:\d{2}-\d{1,2}:\d{2}/],
                    rangeSeparators: ["-", "~", " - "],
                }, timeDefaults: {
                    preferredFormat: "24h",
                    defaultPeriod: "PM",
                    midnightCrossing: "next-day",
                } });
            const enhancedService = new TimeParsingService(config);
            const result = enhancedService.parseTimeExpressions("Task at 3:00");
            // 24-hour format times should be parsed as-is
            // 3:00 in 24h format means 3:00 AM
            expect((_a = result.timeComponents.scheduledTime) === null || _a === void 0 ? void 0 : _a.hour).toBe(3);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,