// English translations
const translations = {
    "Search settings...": "Search settings...",
    "Clear search": "Clear search",
    "No settings found": "No settings found",
    "File Metadata Inheritance": "File Metadata Inheritance",
    "Configure how tasks inherit metadata from file frontmatter": "Configure how tasks inherit metadata from file frontmatter",
    "Enable file metadata inheritance": "Enable file metadata inheritance",
    "Allow tasks to inherit metadata properties from their file's frontmatter": "Allow tasks to inherit metadata properties from their file's frontmatter",
    "Inherit from frontmatter": "Inherit from frontmatter",
    "Tasks inherit metadata properties like priority, context, etc. from file frontmatter when not explicitly set on the task": "Tasks inherit metadata properties like priority, context, etc. from file frontmatter when not explicitly set on the task",
    "Inherit from frontmatter for subtasks": "Inherit from frontmatter for subtasks",
    "Allow subtasks to inherit metadata from file frontmatter. When disabled, only top-level tasks inherit file metadata": "Allow subtasks to inherit metadata from file frontmatter. When disabled, only top-level tasks inherit file metadata",
    "Comprehensive task management plugin for Obsidian with progress bars, task status cycling, and advanced task tracking features.": "Comprehensive task management plugin for Obsidian with progress bars, task status cycling, and advanced task tracking features.",
    "Show progress bar": "Show progress bar",
    "Toggle this to show the progress bar.": "Toggle this to show the progress bar.",
    "Support hover to show progress info": "Support hover to show progress info",
    "Toggle this to allow this plugin to show progress info when hovering over the progress bar.": "Toggle this to allow this plugin to show progress info when hovering over the progress bar.",
    "Add progress bar to non-task bullet": "Add progress bar to non-task bullet",
    "Toggle this to allow adding progress bars to regular list items (non-task bullets).": "Toggle this to allow adding progress bars to regular list items (non-task bullets).",
    "Add progress bar to Heading": "Add progress bar to Heading",
    "Toggle this to allow this plugin to add progress bar for Task below the headings.": "Toggle this to allow this plugin to add progress bar for Task below the headings.",
    "Enable heading progress bars": "Enable heading progress bars",
    "Add progress bars to headings to show progress of all tasks under that heading.": "Add progress bars to headings to show progress of all tasks under that heading.",
    "Auto complete parent task": "Auto complete parent task",
    "Toggle this to allow this plugin to auto complete parent task when all child tasks are completed.": "Toggle this to allow this plugin to auto complete parent task when all child tasks are completed.",
    "Mark parent as 'In Progress' when partially complete": "Mark parent as 'In Progress' when partially complete",
    "When some but not all child tasks are completed, mark the parent task as 'In Progress'. Only works when 'Auto complete parent' is enabled.": "When some but not all child tasks are completed, mark the parent task as 'In Progress'. Only works when 'Auto complete parent' is enabled.",
    "Count sub children level of current Task": "Count sub children level of current Task",
    "Toggle this to allow this plugin to count sub tasks.": "Toggle this to allow this plugin to count sub tasks.",
    "Checkbox Status Settings": "Checkbox Status Settings",
    "Select a predefined task status collection or customize your own": "Select a predefined task status collection or customize your own",
    "Completed task markers": "Completed task markers",
    "Characters in square brackets that represent completed tasks. Example: \"x|X\"": "Characters in square brackets that represent completed tasks. Example: \"x|X\"",
    "Planned task markers": "Planned task markers",
    "Characters in square brackets that represent planned tasks. Example: \"?\"": "Characters in square brackets that represent planned tasks. Example: \"?\"",
    "In progress task markers": "In progress task markers",
    "Characters in square brackets that represent tasks in progress. Example: \">|/\"": "Characters in square brackets that represent tasks in progress. Example: \">|/\"",
    "Abandoned task markers": "Abandoned task markers",
    "Characters in square brackets that represent abandoned tasks. Example: \"-\"": "Characters in square brackets that represent abandoned tasks. Example: \"-\"",
    "Characters in square brackets that represent not started tasks. Default is space \" \"": "Characters in square brackets that represent not started tasks. Default is space \" \"",
    "Count other statuses as": "Count other statuses as",
    "Select the status to count other statuses as. Default is \"Not Started\".": "Select the status to count other statuses as. Default is \"Not Started\".",
    "Task Counting Settings": "Task Counting Settings",
    "Exclude specific task markers": "Exclude specific task markers",
    "Specify task markers to exclude from counting. Example: \"?|/\"": "Specify task markers to exclude from counting. Example: \"?|/\"",
    "Only count specific task markers": "Only count specific task markers",
    "Toggle this to only count specific task markers": "Toggle this to only count specific task markers",
    "Specific task markers to count": "Specific task markers to count",
    "Specify which task markers to count. Example: \"x|X|>|/\"": "Specify which task markers to count. Example: \"x|X|>|/\"",
    "Conditional Progress Bar Display": "Conditional Progress Bar Display",
    "Hide progress bars based on conditions": "Hide progress bars based on conditions",
    "Toggle this to enable hiding progress bars based on tags, folders, or metadata.": "Toggle this to enable hiding progress bars based on tags, folders, or metadata.",
    "Hide by tags": "Hide by tags",
    "Specify tags that will hide progress bars (comma-separated, without #). Example: \"no-progress-bar,hide-progress\"": "Specify tags that will hide progress bars (comma-separated, without #). Example: \"no-progress-bar,hide-progress\"",
    "Hide by folders": "Hide by folders",
    "Specify folder paths that will hide progress bars (comma-separated). Example: \"Daily Notes,Projects/Hidden\"": "Specify folder paths that will hide progress bars (comma-separated). Example: \"Daily Notes,Projects/Hidden\"",
    "Hide by metadata": "Hide by metadata",
    "Specify frontmatter metadata that will hide progress bars. Example: \"hide-progress-bar: true\"": "Specify frontmatter metadata that will hide progress bars. Example: \"hide-progress-bar: true\"",
    "Checkbox Status Switcher": "Checkbox Status Switcher",
    "Enable task status switcher": "Enable task status switcher",
    "Enable/disable the ability to cycle through task states by clicking.": "Enable/disable the ability to cycle through task states by clicking.",
    "Enable custom task marks": "Enable custom task marks",
    "Replace default checkboxes with styled text marks that follow your task status cycle when clicked.": "Replace default checkboxes with styled text marks that follow your task status cycle when clicked.",
    "Enable cycle complete status": "Enable cycle complete status",
    "Enable/disable the ability to automatically cycle through task states when pressing a mark.": "Enable/disable the ability to automatically cycle through task states when pressing a mark.",
    "Always cycle new tasks": "Always cycle new tasks",
    "When enabled, newly inserted tasks will immediately cycle to the next status. When disabled, newly inserted tasks with valid marks will keep their original mark.": "When enabled, newly inserted tasks will immediately cycle to the next status. When disabled, newly inserted tasks with valid marks will keep their original mark.",
    "Checkbox Status Cycle and Marks": "Checkbox Status Cycle and Marks",
    "Define task states and their corresponding marks. The order from top to bottom defines the cycling sequence.": "Define task states and their corresponding marks. The order from top to bottom defines the cycling sequence.",
    "Add Status": "Add Status",
    "Completed Task Mover": "Completed Task Mover",
    "Enable completed task mover": "Enable completed task mover",
    "Toggle this to enable commands for moving completed tasks to another file.": "Toggle this to enable commands for moving completed tasks to another file.",
    "Task marker type": "Task marker type",
    "Choose what type of marker to add to moved tasks": "Choose what type of marker to add to moved tasks",
    "Version marker text": "Version marker text",
    "Text to append to tasks when moved (e.g., 'version 1.0')": "Text to append to tasks when moved (e.g., 'version 1.0')",
    "Date marker text": "Date marker text",
    "Text to append to tasks when moved (e.g., 'archived on 2023-12-31')": "Text to append to tasks when moved (e.g., 'archived on 2023-12-31')",
    "Custom marker text": "Custom marker text",
    "Use {{DATE:format}} for date formatting (e.g., {{DATE:YYYY-MM-DD}}": "Use {{DATE:format}} for date formatting (e.g., {{DATE:YYYY-MM-DD}}",
    "Treat abandoned tasks as completed": "Treat abandoned tasks as completed",
    "If enabled, abandoned tasks will be treated as completed.": "If enabled, abandoned tasks will be treated as completed.",
    "Complete all moved tasks": "Complete all moved tasks",
    "If enabled, all moved tasks will be marked as completed.": "If enabled, all moved tasks will be marked as completed.",
    "With current file link": "With current file link",
    "A link to the current file will be added to the parent task of the moved tasks.": "A link to the current file will be added to the parent task of the moved tasks.",
    "Say Thank You": "Say Thank You",
    "Donate": "Donate",
    "If you like this plugin, consider donating to support continued development:": "If you like this plugin, consider donating to support continued development:",
    "Add number to the Progress Bar": "Add number to the Progress Bar",
    "Toggle this to allow this plugin to add tasks number to progress bar.": "Toggle this to allow this plugin to add tasks number to progress bar.",
    "Show percentage": "Show percentage",
    "Toggle this to allow this plugin to show percentage in the progress bar.": "Toggle this to allow this plugin to show percentage in the progress bar.",
    "Customize progress text": "Customize progress text",
    "Toggle this to customize text representation for different progress percentage ranges.": "Toggle this to customize text representation for different progress percentage ranges.",
    "Progress Ranges": "Progress Ranges",
    "Define progress ranges and their corresponding text representations.": "Define progress ranges and their corresponding text representations.",
    "Add new range": "Add new range",
    "Add a new progress percentage range with custom text": "Add a new progress percentage range with custom text",
    "Min percentage (0-100)": "Min percentage (0-100)",
    "Max percentage (0-100)": "Max percentage (0-100)",
    "Text template (use {{PROGRESS}})": "Text template (use {{PROGRESS}})",
    "Reset to defaults": "Reset to defaults",
    "Reset progress ranges to default values": "Reset progress ranges to default values",
    "Reset": "Reset",
    "Priority Picker Settings": "Priority Picker Settings",
    "Toggle to enable priority picker dropdown for emoji and letter format priorities.": "Toggle to enable priority picker dropdown for emoji and letter format priorities.",
    "Enable priority picker": "Enable priority picker",
    "Enable priority keyboard shortcuts": "Enable priority keyboard shortcuts",
    "Toggle to enable keyboard shortcuts for setting task priorities.": "Toggle to enable keyboard shortcuts for setting task priorities.",
    "Date picker": "Date picker",
    "Enable date picker": "Enable date picker",
    "Toggle this to enable date picker for tasks. This will add a calendar icon near your tasks which you can click to select a date.": "Toggle this to enable date picker for tasks. This will add a calendar icon near your tasks which you can click to select a date.",
    "Date mark": "Date mark",
    "Emoji mark to identify dates. You can use multiple emoji separated by commas.": "Emoji mark to identify dates. You can use multiple emoji separated by commas.",
    "Quick capture": "Quick capture",
    "Enable quick capture": "Enable quick capture",
    "Toggle this to enable Org-mode style quick capture panel. Press Alt+C to open the capture panel.": "Toggle this to enable Org-mode style quick capture panel. Press Alt+C to open the capture panel.",
    "Target file": "Target file",
    "The file where captured text will be saved. You can include a path, e.g., 'folder/Quick Capture.md'. Supports date templates like {{DATE:YYYY-MM-DD}} or {{date:YYYY-MM-DD-HHmm}}": "The file where captured text will be saved. You can include a path, e.g., 'folder/Quick Capture.md'. Supports date templates like {{DATE:YYYY-MM-DD}} or {{date:YYYY-MM-DD-HHmm}}",
    "Placeholder text": "Placeholder text",
    "Placeholder text to display in the capture panel": "Placeholder text to display in the capture panel",
    "Append to file": "Append to file",
    "If enabled, captured text will be appended to the target file. If disabled, it will replace the file content.": "If enabled, captured text will be appended to the target file. If disabled, it will replace the file content.",
    "Target type": "Target type",
    "Choose whether to capture to a fixed file or daily note": "Choose whether to capture to a fixed file or daily note",
    "Fixed file": "Fixed file",
    "Daily note": "Daily note",
    "Sync with Daily Notes plugin": "Sync with Daily Notes plugin",
    "Automatically sync settings from the Daily Notes plugin": "Automatically sync settings from the Daily Notes plugin",
    "Sync now": "Sync now",
    "Daily notes settings synced successfully": "Daily notes settings synced successfully",
    "Daily Notes plugin is not enabled": "Daily Notes plugin is not enabled",
    "Failed to sync daily notes settings": "Failed to sync daily notes settings",
    "Daily note format": "Daily note format",
    "Date format for daily notes (e.g., YYYY-MM-DD)": "Date format for daily notes (e.g., YYYY-MM-DD, supports nested formats like YYYY-MM/YYYY-MM-DD)",
    "Daily note folder": "Daily note folder",
    "Folder path for daily notes (leave empty for root)": "Folder path for daily notes (leave empty for root)",
    "Daily note template": "Daily note template",
    "Template file path for new daily notes (optional)": "Template file path for new daily notes (optional)",
    "Target heading": "Target heading",
    "Optional heading to append content under (leave empty to append to file)": "Optional heading to append content under (leave empty to append to file)",
    "How to add captured content to the target location": "How to add captured content to the target location",
    "Task Filter": "Task Filter",
    "Enable Task Filter": "Enable Task Filter",
    "Toggle this to enable the task filter panel": "Toggle this to enable the task filter panel",
    "Preset Filters": "Preset Filters",
    "Create and manage preset filters for quick access to commonly used task filters.": "Create and manage preset filters for quick access to commonly used task filters.",
    "Edit Filter: ": "Edit Filter: ",
    "Filter name": "Filter name",
    "Checkbox Status": "Checkbox Status",
    "Include or exclude tasks based on their status": "Include or exclude tasks based on their status",
    "Include Completed Tasks": "Include Completed Tasks",
    "Include In Progress Tasks": "Include In Progress Tasks",
    "Include Abandoned Tasks": "Include Abandoned Tasks",
    "Include Not Started Tasks": "Include Not Started Tasks",
    "Include Planned Tasks": "Include Planned Tasks",
    "Related Tasks": "Related Tasks",
    "Include parent, child, and sibling tasks in the filter": "Include parent, child, and sibling tasks in the filter",
    "Include Parent Tasks": "Include Parent Tasks",
    "Include Child Tasks": "Include Child Tasks",
    "Include Sibling Tasks": "Include Sibling Tasks",
    "Advanced Filter": "Advanced Filter",
    "Use boolean operations: AND, OR, NOT. Example: 'text content AND #tag1'": "Use boolean operations: AND, OR, NOT. Example: 'text content AND #tag1'",
    "Filter query": "Filter query",
    "Filter out tasks": "Filter out tasks",
    "If enabled, tasks that match the query will be hidden, otherwise they will be shown": "If enabled, tasks that match the query will be hidden, otherwise they will be shown",
    "Save": "Save",
    "Cancel": "Cancel",
    "Hide filter panel": "Hide filter panel",
    "Show filter panel": "Show filter panel",
    "Filter Tasks": "Filter Tasks",
    "Preset filters": "Preset filters",
    "Select a saved filter preset to apply": "Select a saved filter preset to apply",
    "Select a preset...": "Select a preset...",
    "Query": "Query",
    "Use boolean operations: AND, OR, NOT. Example: 'text content AND #tag1 AND DATE:<2022-01-02 NOT PRIORITY:>=#B' - Supports >, <, =, >=, <=, != for PRIORITY and DATE.": "Use boolean operations: AND, OR, NOT. Example: 'text content AND #tag1 AND DATE:<2022-01-02 NOT PRIORITY:>=#B' - Supports >, <, =, >=, <=, != for PRIORITY and DATE.",
    "If true, tasks that match the query will be hidden, otherwise they will be shown": "If true, tasks that match the query will be hidden, otherwise they will be shown",
    "Completed": "Completed",
    "In Progress": "In Progress",
    "Abandoned": "Abandoned",
    "Not Started": "Not Started",
    "Planned": "Planned",
    "Include Related Tasks": "Include Related Tasks",
    "Parent Tasks": "Parent Tasks",
    "Child Tasks": "Child Tasks",
    "Sibling Tasks": "Sibling Tasks",
    "Apply": "Apply",
    "New Preset": "New Preset",
    "Preset saved": "Preset saved",
    "No changes to save": "No changes to save",
    "Close": "Close",
    "Capture to": "Capture to",
    "Capture": "Capture",
    "Capture thoughts, tasks, or ideas...": "Capture thoughts, tasks, or ideas...",
    "Tomorrow": "Tomorrow",
    "In 2 days": "In 2 days",
    "In 3 days": "In 3 days",
    "In 5 days": "In 5 days",
    "In 1 week": "In 1 week",
    "In 10 days": "In 10 days",
    "In 2 weeks": "In 2 weeks",
    "In 1 month": "In 1 month",
    "In 2 months": "In 2 months",
    "In 3 months": "In 3 months",
    "In 6 months": "In 6 months",
    "In 1 year": "In 1 year",
    "In 5 years": "In 5 years",
    "In 10 years": "In 10 years",
    "Today": "Today",
    "Quick Select": "Quick Select",
    "Calendar": "Calendar",
    "Clear Date": "Clear Date",
    "Highest priority": "Highest priority",
    "High priority": "High priority",
    "Medium priority": "Medium priority",
    "No priority": "No priority",
    "Low priority": "Low priority",
    "Lowest priority": "Lowest priority",
    "Priority A": "Priority A",
    "Priority B": "Priority B",
    "Priority C": "Priority C",
    "Task Priority": "Task Priority",
    "Remove Priority": "Remove Priority",
    "Cycle task status forward": "Cycle task status forward",
    "Cycle task status backward": "Cycle task status backward",
    "Remove priority": "Remove priority",
    "Move task to another file": "Move task to another file",
    "Move all completed subtasks to another file": "Move all completed subtasks to another file",
    "Move direct completed subtasks to another file": "Move direct completed subtasks to another file",
    "Move all subtasks to another file": "Move all subtasks to another file",
    "Incomplete Task Mover": "Incomplete Task Mover",
    "Enable incomplete task mover": "Enable incomplete task mover",
    "Toggle this to enable commands for moving incomplete tasks to another file.": "Toggle this to enable commands for moving incomplete tasks to another file.",
    "Incomplete task marker type": "Incomplete task marker type",
    "Choose what type of marker to add to moved incomplete tasks": "Choose what type of marker to add to moved incomplete tasks",
    "Incomplete version marker text": "Incomplete version marker text",
    "Text to append to incomplete tasks when moved (e.g., 'version 1.0')": "Text to append to incomplete tasks when moved (e.g., 'version 1.0')",
    "Incomplete date marker text": "Incomplete date marker text",
    "Text to append to incomplete tasks when moved (e.g., 'moved on 2023-12-31')": "Text to append to incomplete tasks when moved (e.g., 'moved on 2023-12-31')",
    "Incomplete custom marker text": "Incomplete custom marker text",
    "With current file link for incomplete tasks": "With current file link for incomplete tasks",
    "A link to the current file will be added to the parent task of the moved incomplete tasks.": "A link to the current file will be added to the parent task of the moved incomplete tasks.",
    "Move all incomplete subtasks to another file": "Move all incomplete subtasks to another file",
    "Move direct incomplete subtasks to another file": "Move direct incomplete subtasks to another file",
    "moved on": "moved on",
    "Set priority": "Set priority",
    "Toggle quick capture panel in editor": "Toggle quick capture panel in editor",
    "Quick Capture": "Quick Capture",
    "Toggle task filter panel": "Toggle task filter panel",
    "Filter Mode": "Filter Mode",
    "Choose whether to include or exclude tasks that match the filters": "Choose whether to include or exclude tasks that match the filters",
    "Show matching tasks": "Show matching tasks",
    "Hide matching tasks": "Hide matching tasks",
    "Choose whether to show or hide tasks that match the filters": "Choose whether to show or hide tasks that match the filters",
    "Create new file:": "Create new file:",
    "Completed tasks moved to": "Completed tasks moved to",
    "Failed to create file:": "Failed to create file:",
    "Beginning of file": "Beginning of file",
    "Failed to move tasks:": "Failed to move tasks:",
    "No active file found": "No active file found",
    "Task moved to": "Task moved to",
    "Failed to move task:": "Failed to move task:",
    "Nothing to capture": "Nothing to capture",
    "Captured successfully": "Captured successfully",
    "Failed to save:": "Failed to save:",
    "Captured successfully to": "Captured successfully to",
    "Total": "Total",
    "Workflow": "Workflow",
    "Add as workflow root": "Add as workflow root",
    "Move to stage": "Move to stage",
    "Complete stage": "Complete stage",
    "Add child task with same stage": "Add child task with same stage",
    "Could not open quick capture panel in the current editor": "Could not open quick capture panel in the current editor",
    "Just started {{PROGRESS}}%": "Just started {{PROGRESS}}%",
    "Making progress {{PROGRESS}}%": "Making progress {{PROGRESS}}%",
    "Half way {{PROGRESS}}%": "Half way {{PROGRESS}}%",
    "Good progress {{PROGRESS}}%": "Good progress {{PROGRESS}}%",
    "Almost there {{PROGRESS}}%": "Almost there {{PROGRESS}}%",
    "Progress bar": "Progress bar",
    "You can customize the progress bar behind the parent task(usually at the end of the task). You can also customize the progress bar for the task below the heading.": "You can customize the progress bar behind the parent task(usually at the end of the task). You can also customize the progress bar for the task below the heading.",
    "Hide progress bars": "Hide progress bars",
    "Parent task changer": "Parent task changer",
    "Change the parent task of the current task.": "Change the parent task of the current task.",
    "No preset filters created yet. Click 'Add New Preset' to create one.": "No preset filters created yet. Click 'Add New Preset' to create one.",
    "Configure task workflows for project and process management": "Configure task workflows for project and process management",
    "Enable workflow": "Enable workflow",
    "Toggle to enable the workflow system for tasks": "Toggle to enable the workflow system for tasks",
    "Auto-add timestamp": "Auto-add timestamp",
    "Automatically add a timestamp to the task when it is created": "Automatically add a timestamp to the task when it is created",
    "Timestamp format:": "Timestamp format:",
    "Timestamp format": "Timestamp format",
    "Remove timestamp when moving to next stage": "Remove timestamp when moving to next stage",
    "Remove the timestamp from the current task when moving to the next stage": "Remove the timestamp from the current task when moving to the next stage",
    "Calculate spent time": "Calculate spent time",
    "Calculate and display the time spent on the task when moving to the next stage": "Calculate and display the time spent on the task when moving to the next stage",
    "Format for spent time:": "Format for spent time:",
    "Calculate spent time when move to next stage.": "Calculate spent time when move to next stage.",
    "Spent time format": "Spent time format",
    "Calculate full spent time": "Calculate full spent time",
    "Calculate the full spent time from the start of the task to the last stage": "Calculate the full spent time from the start of the task to the last stage",
    "Auto remove last stage marker": "Auto remove last stage marker",
    "Automatically remove the last stage marker when a task is completed": "Automatically remove the last stage marker when a task is completed",
    "Auto-add next task": "Auto-add next task",
    "Automatically create a new task with the next stage when completing a task": "Automatically create a new task with the next stage when completing a task",
    "Workflow definitions": "Workflow definitions",
    "Configure workflow templates for different types of processes": "Configure workflow templates for different types of processes",
    "No workflow definitions created yet. Click 'Add New Workflow' to create one.": "No workflow definitions created yet. Click 'Add New Workflow' to create one.",
    "Edit workflow": "Edit workflow",
    "Remove workflow": "Remove workflow",
    "Delete workflow": "Delete workflow",
    "Delete": "Delete",
    "Add New Workflow": "Add New Workflow",
    "New Workflow": "New Workflow",
    "Create New Workflow": "Create New Workflow",
    "Workflow name": "Workflow name",
    "A descriptive name for the workflow": "A descriptive name for the workflow",
    "Workflow ID": "Workflow ID",
    "A unique identifier for the workflow (used in tags)": "A unique identifier for the workflow (used in tags)",
    "Description": "Description",
    "Optional description for the workflow": "Optional description for the workflow",
    "Describe the purpose and use of this workflow...": "Describe the purpose and use of this workflow...",
    "Workflow Stages": "Workflow Stages",
    "No stages defined yet. Add a stage to get started.": "No stages defined yet. Add a stage to get started.",
    "Edit": "Edit",
    "Move up": "Move up",
    "Move down": "Move down",
    "Sub-stage": "Sub-stage",
    "Sub-stage name": "Sub-stage name",
    "Sub-stage ID": "Sub-stage ID",
    "Next: ": "Next: ",
    "Add Sub-stage": "Add Sub-stage",
    "New Sub-stage": "New Sub-stage",
    "Edit Stage": "Edit Stage",
    "Stage name": "Stage name",
    "A descriptive name for this workflow stage": "A descriptive name for this workflow stage",
    "Stage ID": "Stage ID",
    "A unique identifier for the stage (used in tags)": "A unique identifier for the stage (used in tags)",
    "Stage type": "Stage type",
    "The type of this workflow stage": "The type of this workflow stage",
    "Linear (sequential)": "Linear (sequential)",
    "Cycle (repeatable)": "Cycle (repeatable)",
    "Terminal (end stage)": "Terminal (end stage)",
    "Next stage": "Next stage",
    "The stage to proceed to after this one": "The stage to proceed to after this one",
    "Sub-stages": "Sub-stages",
    "Define cycle sub-stages (optional)": "Define cycle sub-stages (optional)",
    "No sub-stages defined yet.": "No sub-stages defined yet.",
    "Can proceed to": "Can proceed to",
    "Additional stages that can follow this one (for right-click menu)": "Additional stages that can follow this one (for right-click menu)",
    "No additional destination stages defined.": "No additional destination stages defined.",
    "Remove": "Remove",
    "Add": "Add",
    "Workflow not found": "Workflow not found",
    "Stage not found": "Stage not found",
    "Current stage": "Current stage",
    "Type": "Type",
    "Next": "Next",
    "Next to Introduction": "Next to Introduction",
    "Name and ID are required.": "Name and ID are required.",
    "End of file": "End of file",
    "Include in cycle": "Include in cycle",
    "Preset": "Preset",
    "Preset name": "Preset name",
    "Edit Filter": "Edit Filter",
    "Add New Preset": "Add New Preset",
    "New Filter": "New Filter",
    "Reset to Default Presets": "Reset to Default Presets",
    "This will replace all your current presets with the default set. Are you sure?": "This will replace all your current presets with the default set. Are you sure?",
    "Edit Workflow": "Edit Workflow",
    "General": "General",
    "Views & Index": "Views & Index",
    "Progress Display": "Progress Display",
    "Task Management": "Task Management",
    "Workflows": "Workflows",
    "Dates & Priority": "Dates & Priority",
    "Projects": "Projects",
    "Rewards": "Rewards",
    "Habits": "Habits",
    "Calendar Sync": "Calendar Sync",
    "Beta Features": "Beta Features",
    "About": "About",
    "Core Settings": "Core Settings",
    "Display & Progress": "Display & Progress",
    "Workflow & Automation": "Workflow & Automation",
    "Gamification": "Gamification",
    "Integration": "Integration",
    "Advanced": "Advanced",
    "Information": "Information",
    "Count sub children of current Task": "Count sub children of current Task",
    "Toggle this to allow this plugin to count sub tasks when generating progress bar\t.": "Toggle this to allow this plugin to count sub tasks when generating progress bar\t.",
    "Configure task status settings": "Configure task status settings",
    "Configure which task markers to count or exclude": "Configure which task markers to count or exclude",
    "On Completion": "On Completion",
    "Action to execute on completion": "Action to execute on completion",
    "Configuration is valid": "Configuration is valid",
    "Action Type": "Action Type",
    "Select action type": "Select action type",
    "Keep": "Keep",
    "Complete": "Complete",
    "Move": "Move",
    "Archive": "Archive",
    "Duplicate": "Duplicate",
    "Target File": "Target File",
    "Select target file": "Select target file",
    "Target Section": "Target Section",
    "Section name (optional)": "Section name (optional)",
    "Create section if not exists": "Create section if not exists",
    "Task IDs": "Task IDs",
    "Task IDs to complete (comma-separated)": "Task IDs to complete (comma-separated)",
    "Archive File": "Archive File",
    "Archive Section": "Archive Section",
    "Include metadata in duplicate": "Include metadata in duplicate",
    "Invalid JSON format": "Invalid JSON format",
    "Action type is required": "Action type is required",
    "Target file is required for move action": "Target file is required for move action",
    "Task IDs are required for complete action": "Task IDs are required for complete action",
    "Archive file is required for archive action": "Archive file is required for archive action",
    "Enable OnCompletion": "Enable OnCompletion",
    "Enable automatic actions when tasks are completed": "Enable automatic actions when tasks are completed",
    "Default Archive File": "Default Archive File",
    "Default file for archive action": "Default file for archive action",
    "Default Archive Section": "Default Archive Section",
    "Default section for archive action": "Default section for archive action",
    "Show Advanced Options": "Show Advanced Options",
    "Show advanced configuration options in task editors": "Show advanced configuration options in task editors",
    "File Filter": "File Filter",
    "Enable File Filter": "Enable File Filter",
    "Toggle this to enable file and folder filtering during task indexing. This can significantly improve performance for large vaults.": "Toggle this to enable file and folder filtering during task indexing. This can significantly improve performance for large vaults.",
    "File Filter Mode": "Filter Mode",
    "Choose whether to include only specified files/folders (whitelist) or exclude them (blacklist)": "Choose whether to include only specified files/folders (whitelist) or exclude them (blacklist)",
    "Whitelist (Include only)": "Whitelist (Include only)",
    "Blacklist (Exclude)": "Blacklist (Exclude)",
    "File Filter Rules": "Filter Rules",
    "Configure which files and folders to include or exclude from task indexing": "Configure which files and folders to include or exclude from task indexing",
    "Type:": "Type:",
    "File": "File",
    "Folder": "Folder",
    "Pattern": "Pattern",
    "Path:": "Path:",
    "Enabled:": "Enabled:",
    "Delete rule": "Delete rule",
    "Add Filter Rule": "Add Filter Rule",
    "Add File Rule": "Add File Rule",
    "Add Folder Rule": "Add Folder Rule",
    "Add Pattern Rule": "Add Pattern Rule",
    "Preset Templates": "Preset Templates",
    "Quick setup for common filtering scenarios": "Quick setup for common filtering scenarios",
    "Exclude System Folders": "Exclude System Folders",
    "Automatically exclude common system folders (.obsidian, .trash, .git) and temporary files": "Automatically exclude common system folders (.obsidian, .trash, .git) and temporary files",
    "Apply System Exclusions": "Apply System Exclusions",
    "This will enable file filtering and add system folder exclusion rules": "This will enable file filtering and add system folder exclusion rules",
    "System Folders Already Excluded": "System Folders Already Excluded",
    "All system folder exclusion rules are already configured and active": "All system folder exclusion rules are already configured and active",
    "File filtering enabled and {{count}} system exclusion rules added": "File filtering enabled and {{count}} system exclusion rules added",
    "File filtering enabled with existing system exclusion rules": "File filtering enabled with existing system exclusion rules",
    "{{count}} system exclusion rules added": "{{count}} system exclusion rules added",
    "System exclusion rules updated": "System exclusion rules updated",
    "System folder exclusions added": "System folder exclusions added",
    "Active Rules": "Active Rules",
    "Cache Size": "Cache Size",
    "Status": "Status",
    "Enabled": "Enabled",
    "Disabled": "Disabled",
    "Task status cycle and marks": "Task status cycle and marks",
    "About Task Genius": "About Task Genius",
    "Version": "Version",
    "Documentation": "Documentation",
    "View the documentation for this plugin": "View the documentation for this plugin",
    "Open Documentation": "Open Documentation",
    "Incomplete tasks": "Incomplete tasks",
    "In progress tasks": "In progress tasks",
    "Completed tasks": "Completed tasks",
    "All tasks": "All tasks",
    "After heading": "After heading",
    "End of section": "End of section",
    "Enable text mark in source mode": "Enable text mark in source mode",
    "Make the text mark in source mode follow the task status cycle when clicked.": "Make the text mark in source mode follow the task status cycle when clicked.",
    "Status name": "Status name",
    "Progress display mode": "Progress display mode",
    "Choose how to display task progress": "Choose how to display task progress",
    "No progress indicators": "No progress indicators",
    "Graphical progress bar": "Graphical progress bar",
    "Text progress indicator": "Text progress indicator",
    "Both graphical and text": "Both graphical and text",
    "Toggle this to allow this plugin to count sub tasks when generating progress bar.": "Toggle this to allow this plugin to count sub tasks when generating progress bar.",
    "Progress format": "Progress format",
    "Choose how to display the task progress": "Choose how to display the task progress",
    "Percentage (75%)": "Percentage (75%)",
    "Bracketed percentage ([75%])": "Bracketed percentage ([75%])",
    "Fraction (3/4)": "Fraction (3/4)",
    "Bracketed fraction ([3/4])": "Bracketed fraction ([3/4])",
    "Detailed ([3✓ 1⟳ 0✗ 1? / 5])": "Detailed ([3✓ 1⟳ 0✗ 1? / 5])",
    "Custom format": "Custom format",
    "Range-based text": "Range-based text",
    "Use placeholders like {{COMPLETED}}, {{TOTAL}}, {{PERCENT}}, etc.": "Use placeholders like {{COMPLETED}}, {{TOTAL}}, {{PERCENT}}, etc.",
    "Preview:": "Preview:",
    "Available placeholders": "Available placeholders",
    "Available placeholders: {{COMPLETED}}, {{TOTAL}}, {{IN_PROGRESS}}, {{ABANDONED}}, {{PLANNED}}, {{NOT_STARTED}}, {{PERCENT}}, {{COMPLETED_SYMBOL}}, {{IN_PROGRESS_SYMBOL}}, {{ABANDONED_SYMBOL}}, {{PLANNED_SYMBOL}}": "Available placeholders: {{COMPLETED}}, {{TOTAL}}, {{IN_PROGRESS}}, {{ABANDONED}}, {{PLANNED}}, {{NOT_STARTED}}, {{PERCENT}}, {{COMPLETED_SYMBOL}}, {{IN_PROGRESS_SYMBOL}}, {{ABANDONED_SYMBOL}}, {{PLANNED_SYMBOL}}",
    "Expression examples": "Expression examples",
    "Examples of advanced formats using expressions": "Examples of advanced formats using expressions",
    "Text Progress Bar": "Text Progress Bar",
    "Emoji Progress Bar": "Emoji Progress Bar",
    "ICS Integration": "ICS Integration",
    "ICS Calendar Integration": "ICS Calendar Integration",
    "Configure external calendar sources to display events in your task views.": "Configure external calendar sources to display events in your task views.",
    "Global Settings": "Global Settings",
    "Enable Background Refresh": "Enable Background Refresh",
    "Automatically refresh calendar sources in the background": "Automatically refresh calendar sources in the background",
    "Global Refresh Interval": "Global Refresh Interval",
    "Default refresh interval for all sources (minutes)": "Default refresh interval for all sources (minutes)",
    "Maximum Cache Age": "Maximum Cache Age",
    "How long to keep cached data (hours)": "How long to keep cached data (hours)",
    "Network Timeout": "Network Timeout",
    "Request timeout in seconds": "Request timeout in seconds",
    "Max Events Per Source": "Max Events Per Source",
    "Maximum number of events to load from each source": "Maximum number of events to load from each source",
    "Show in Calendar Views": "Show in Calendar Views",
    "Display ICS events in calendar views": "Display ICS events in calendar views",
    "Show in Task Lists": "Show in Task Lists",
    "Display ICS events as read-only tasks in task lists": "Display ICS events as read-only tasks in task lists",
    "Default Event Color": "Default Event Color",
    "Default color for events without a specific color": "Default color for events without a specific color",
    "Calendar Sources": "Calendar Sources",
    "No calendar sources configured. Add a source to get started.": "No calendar sources configured. Add a source to get started.",
    "Add ICS Source": "Add ICS Source",
    "Add a new calendar source": "Add a new calendar source",
    "Add Source": "Add Source",
    "ICS Enabled": "Enabled",
    "ICS Disabled": "Disabled",
    "ICS Enable": "Enable",
    "ICS Disable": "Disable",
    "Sync Now": "Sync Now",
    "Syncing...": "Syncing...",
    "Sync completed successfully": "Sync completed successfully",
    "Sync failed: ": "Sync failed: ",
    "Edit ICS Source": "Edit ICS Source",
    "ICS Source Name": "Name",
    "Display name for this calendar source": "Display name for this calendar source",
    "My Calendar": "My Calendar",
    "ICS URL": "ICS URL",
    "URL to the ICS/iCal file": "URL to the ICS/iCal file",
    "Whether this source is active": "Whether this source is active",
    "Refresh Interval": "Refresh Interval",
    "How often to refresh this source (minutes)": "How often to refresh this source (minutes)",
    "Color": "Color",
    "Color for events from this source (optional)": "Color for events from this source (optional)",
    "Show Type": "Show Type",
    "How to display events from this source in calendar views": "How to display events from this source in calendar views",
    "Event": "Event",
    "Badge": "Badge",
    "Show All-Day Events": "Show All-Day Events",
    "Include all-day events from this source": "Include all-day events from this source",
    "Show Timed Events": "Show Timed Events",
    "Include timed events from this source": "Include timed events from this source",
    "Authentication (Optional)": "Authentication (Optional)",
    "Authentication Type": "Authentication Type",
    "Type of authentication required": "Type of authentication required",
    "ICS Auth None": "None",
    "Basic Auth": "Basic Auth",
    "Bearer Token": "Bearer Token",
    "Custom Headers": "Custom Headers",
    "ICS Username": "Username",
    "ICS Password": "Password",
    "ICS Bearer Token": "Bearer Token",
    "JSON object with custom headers": "JSON object with custom headers",
    "Please enter a name for the source": "Please enter a name for the source",
    "Please enter a URL for the source": "Please enter a URL for the source",
    "Please enter a valid URL": "Please enter a valid URL",
    "Color-coded Status": "Color-coded Status",
    "Status with Icons": "Status with Icons",
    "Preview": "Preview",
    "Use": "Use",
    "Save Filter Configuration": "Save Filter Configuration",
    "Load Filter Configuration": "Load Filter Configuration",
    "Save Current Filter": "Save Current Filter",
    "Load Saved Filter": "Load Saved Filter",
    "Filter Configuration Name": "Filter Configuration Name",
    "Filter Configuration Description": "Filter Configuration Description",
    "Enter a name for this filter configuration": "Enter a name for this filter configuration",
    "Enter a description for this filter configuration (optional)": "Enter a description for this filter configuration (optional)",
    "No saved filter configurations": "No saved filter configurations",
    "Select a saved filter configuration": "Select a saved filter configuration",
    "Delete Filter Configuration": "Delete Filter Configuration",
    "Are you sure you want to delete this filter configuration?": "Are you sure you want to delete this filter configuration?",
    "Filter configuration saved successfully": "Filter configuration saved successfully",
    "Filter configuration loaded successfully": "Filter configuration loaded successfully",
    "Filter configuration deleted successfully": "Filter configuration deleted successfully",
    "Failed to save filter configuration": "Failed to save filter configuration",
    "Failed to load filter configuration": "Failed to load filter configuration",
    "Failed to delete filter configuration": "Failed to delete filter configuration",
    "Filter configuration name is required": "Filter configuration name is required",
    "Toggle this to show percentage instead of completed/total count.": "Toggle this to show percentage instead of completed/total count.",
    "Customize progress ranges": "Customize progress ranges",
    "Toggle this to customize the text for different progress ranges.": "Toggle this to customize the text for different progress ranges.",
    "Apply Theme": "Apply Theme",
    "Back to main settings": "Back to main settings",
    "Support expression in format, like using data.percentages to get the percentage of completed tasks. And using math or even repeat operations to get the result.": "Support expression in format, like using data.percentages to get the percentage of completed tasks. And using math or even repeat operations to get the result.",
    "Support expression in format, like using data.percentages to get the percentage of completed tasks. And using math or even repeat functions to get the result.": "Support expression in format, like using data.percentages to get the percentage of completed tasks. And using math or even repeat functions to get the result.",
    "Target File:": "Target File:",
    "Task Properties": "Task Properties",
    "Start Date": "Start Date",
    "Due Date": "Due Date",
    "Scheduled Date": "Scheduled Date",
    "Priority": "Priority",
    "None": "None",
    "Highest": "Highest",
    "High": "High",
    "Medium": "Medium",
    "Low": "Low",
    "Lowest": "Lowest",
    "Project": "Project",
    "Project name": "Project name",
    "Context": "Context",
    "Recurrence": "Recurrence",
    "e.g., every day, every week": "e.g., every day, every week",
    "Task Content": "Task Content",
    "Task Details": "Task Details",
    "Task File": "File",
    "Edit in File": "Edit in File",
    "Mark Incomplete": "Mark Incomplete",
    "Mark Complete": "Mark Complete",
    "Task Title": "Task Title",
    "Tags": "Tags",
    "e.g. every day, every 2 weeks": "e.g. every day, every 2 weeks",
    "Forecast": "Forecast",
    "0 actions, 0 projects": "0 actions, 0 projects",
    "Toggle list/tree view": "Toggle list/tree view",
    "Focusing on Work": "Focusing on Work",
    "Unfocus": "Unfocus",
    "Past Due": "Past Due",
    "Future": "Future",
    "actions": "actions",
    "project": "project",
    "Coming Up": "Coming Up",
    "Task": "Task",
    "Tasks": "Tasks",
    "No upcoming tasks": "No upcoming tasks",
    "No tasks scheduled": "No tasks scheduled",
    "0 tasks": "0 tasks",
    "Filter tasks...": "Filter tasks...",
    "Toggle multi-select": "Toggle multi-select",
    "No projects found": "No projects found",
    "projects selected": "projects selected",
    "tasks": "tasks",
    "No tasks in the selected projects": "No tasks in the selected projects",
    "Select a project to see related tasks": "Select a project to see related tasks",
    "Configure Review for": "Configure Review for",
    "Review Frequency": "Review Frequency",
    "How often should this project be reviewed": "How often should this project be reviewed",
    "Custom...": "Custom...",
    "e.g., every 3 months": "e.g., every 3 months",
    "Last Reviewed": "Last Reviewed",
    "Please specify a review frequency": "Please specify a review frequency",
    "Review schedule updated for": "Review schedule updated for",
    "Review Projects": "Review Projects",
    "Select a project to review its tasks.": "Select a project to review its tasks.",
    "Configured for Review": "Configured for Review",
    "Not Configured": "Not Configured",
    "No projects available.": "No projects available.",
    "Select a project to review.": "Select a project to review.",
    "Show all tasks": "Show all tasks",
    "Showing all tasks, including completed tasks from previous reviews.": "Showing all tasks, including completed tasks from previous reviews.",
    "Show only new and in-progress tasks": "Show only new and in-progress tasks",
    "No tasks found for this project.": "No tasks found for this project.",
    "Review every": "Review every",
    "never": "never",
    "Last reviewed": "Last reviewed",
    "Mark as Reviewed": "Mark as Reviewed",
    "No review schedule configured for this project": "No review schedule configured for this project",
    "Configure Review Schedule": "Configure Review Schedule",
    "Project Review": "Project Review",
    "Select a project from the left sidebar to review its tasks.": "Select a project from the left sidebar to review its tasks.",
    "Inbox": "Inbox",
    "Flagged": "Flagged",
    "Review": "Review",
    "tags selected": "tags selected",
    "No tasks with the selected tags": "No tasks with the selected tags",
    "Select a tag to see related tasks": "Select a tag to see related tasks",
    "Open Task Genius view": "Open Task Genius view",
    "Open Task Genius changelog": "Open Task Genius changelog",
    "Minimal Quick Capture": "Minimal Quick Capture",
    "Refresh task index": "Refresh task index",
    "Refreshing task index...": "Refreshing task index...",
    "Task index refreshed": "Task index refreshed",
    "Failed to refresh task index": "Failed to refresh task index",
    "Force reindex all tasks": "Force reindex all tasks",
    "Clearing task cache and rebuilding index...": "Clearing task cache and rebuilding index...",
    "Task index completely rebuilt": "Task index completely rebuilt",
    "Failed to force reindex tasks": "Failed to force reindex tasks",
    "Task Genius View": "Task Genius View",
    "Toggle Sidebar": "Toggle Sidebar",
    "Details": "Details",
    "View": "View",
    "Task Genius view is a comprehensive view that allows you to manage your tasks in a more efficient way.": "Task Genius view is a comprehensive view that allows you to manage your tasks in a more efficient way.",
    "Enable task genius view": "Enable task genius view",
    "Select a task to view details": "Select a task to view details",
    "Task Status": "Status",
    "Comma separated": "Comma separated",
    "Focus": "Focus",
    "Loading more...": "Loading more...",
    "projects": "projects",
    "No tasks for this section.": "No tasks for this section.",
    "No tasks found.": "No tasks found.",
    "Switch status": "Switch status",
    "Rebuild index": "Rebuild index",
    "Rebuild": "Rebuild",
    "0 tasks, 0 projects": "0 tasks, 0 projects",
    "New Custom View": "New Custom View",
    "Create Custom View": "Create Custom View",
    "Edit View: ": "Edit View: ",
    "View Name": "View Name",
    "My Custom Task View": "My Custom Task View",
    "Icon Name": "Icon Name",
    "Enter any Lucide icon name (e.g., list-checks, filter, inbox)": "Enter any Lucide icon name (e.g., list-checks, filter, inbox)",
    "Filter Rules": "Filter Rules",
    "Hide Completed and Abandoned Tasks": "Hide Completed and Abandoned Tasks",
    "Hide completed and abandoned tasks in this view.": "Hide completed and abandoned tasks in this view.",
    "Text Contains": "Text Contains",
    "Filter tasks whose content includes this text (case-insensitive).": "Filter tasks whose content includes this text (case-insensitive).",
    "Tags Include": "Tags Include",
    "Task must include ALL these tags (comma-separated).": "Task must include ALL these tags (comma-separated).",
    "Tags Exclude": "Tags Exclude",
    "Task must NOT include ANY of these tags (comma-separated).": "Task must NOT include ANY of these tags (comma-separated).",
    "Project Is": "Project Is",
    "Task must belong to this project (exact match).": "Task must belong to this project (exact match).",
    "Priority Is": "Priority Is",
    "Task must have this priority (e.g., 1, 2, 3).": "Task must have this priority (e.g., 1, 2, 3).",
    "Status Include": "Status Include",
    "Task status must be one of these (comma-separated markers, e.g., /,>).": "Task status must be one of these (comma-separated markers, e.g., /,>).",
    "Status Exclude": "Status Exclude",
    "Task status must NOT be one of these (comma-separated markers, e.g., -,x).": "Task status must NOT be one of these (comma-separated markers, e.g., -,x).",
    "Use YYYY-MM-DD or relative terms like 'today', 'tomorrow', 'next week', 'last month'.": "Use YYYY-MM-DD or relative terms like 'today', 'tomorrow', 'next week', 'last month'.",
    "Due Date Is": "Due Date Is",
    "Start Date Is": "Start Date Is",
    "Scheduled Date Is": "Scheduled Date Is",
    "Path Includes": "Path Includes",
    "Task must contain this path (case-insensitive).": "Task must contain this path (case-insensitive).",
    "Path Excludes": "Path Excludes",
    "Task must NOT contain this path (case-insensitive).": "Task must NOT contain this path (case-insensitive).",
    "Unnamed View": "Unnamed View",
    "View configuration saved.": "View configuration saved.",
    "Hide Details": "Hide Details",
    "Show Details": "Show Details",
    "View Config": "View Config",
    "View Configuration": "View Configuration",
    "Configure the Task Genius sidebar views, visibility, order, and create custom views.": "Configure the Task Genius sidebar views, visibility, order, and create custom views.",
    "Manage Views": "Manage Views",
    "Configure sidebar views, order, visibility, and hide/show completed tasks per view.": "Configure sidebar views, order, visibility, and hide/show completed tasks per view.",
    "Show in sidebar": "Show in sidebar",
    "Edit View": "Edit View",
    "Move Up": "Move Up",
    "Move Down": "Move Down",
    "Delete View": "Delete View",
    "Add Custom View": "Add Custom View",
    "Error: View ID already exists.": "Error: View ID already exists.",
    "Events": "Events",
    "Plan": "Plan",
    "Year": "Year",
    "Month": "Month",
    "Week": "Week",
    "Day": "Day",
    "Agenda": "Agenda",
    "Back to categories": "Back to categories",
    "No matching options found": "No matching options found",
    "No matching filters found": "No matching filters found",
    "Tag": "Tag",
    "File Path": "File Path",
    "Add filter": "Add filter",
    "Clear all": "Clear all",
    "Add Card": "Add Card",
    "First Day of Week": "First Day of Week",
    "Overrides the locale default for calendar views.": "Overrides the locale default for calendar views.",
    "Show checkbox": "Show checkbox",
    "Show a checkbox for each task in the kanban view.": "Show a checkbox for each task in the kanban view.",
    "Locale Default": "Locale Default",
    "Use custom goal for progress bar": "Use custom goal for progress bar",
    "Toggle this to allow this plugin to find the pattern g::number as goal of the parent task.": "Toggle this to allow this plugin to find the pattern g::number as goal of the parent task.",
    "Prefer metadata format of task": "Prefer metadata format of task",
    "You can choose dataview format or tasks format, that will influence both index and save format.": "You can choose dataview format or tasks format, that will influence both index and save format.",
    "Task Parser Configuration": "Task Parser Configuration",
    "Configure how task metadata is parsed and recognized.": "Configure how task metadata is parsed and recognized.",
    "Project tag prefix": "Project tag prefix",
    "Customize the prefix used for project tags (e.g., 'project' for #project/myproject). Changes require reindexing.": "Customize the prefix used for project tags (e.g., 'project' for #project/myproject). Changes require reindexing.",
    "Customize the prefix used for project tags in dataview format (e.g., 'project' for [project:: myproject]). Changes require reindexing.": "Customize the prefix used for project tags in dataview format (e.g., 'project' for [project:: myproject]). Changes require reindexing.",
    "Context tag prefix": "Context tag prefix",
    "Customize the prefix used for context tags in dataview format (e.g., 'context' for [context:: home]). Note: emoji format always uses @ prefix. Changes require reindexing.": "Customize the prefix used for context tags in dataview format (e.g., 'context' for [context:: home]). Note: emoji format always uses @ prefix. Changes require reindexing.",
    "Context tags in emoji format always use @ prefix (not configurable). This setting only affects dataview format. Changes require reindexing.": "Context tags in emoji format always use @ prefix (not configurable). This setting only affects dataview format. Changes require reindexing.",
    "Area tag prefix": "Area tag prefix",
    "Customize the prefix used for area tags (e.g., 'area' for #area/work). Changes require reindexing.": "Customize the prefix used for area tags (e.g., 'area' for #area/work). Changes require reindexing.",
    "Customize the prefix used for area tags in dataview format (e.g., 'area' for [area:: work]). Changes require reindexing.": "Customize the prefix used for area tags in dataview format (e.g., 'area' for [area:: work]). Changes require reindexing.",
    "Format Examples:": "Format Examples:",
    "always uses @ prefix": "always uses @ prefix",
    "Open in new tab": "Open in new tab",
    "Open settings": "Open settings",
    "Hide in sidebar": "Hide in sidebar",
    "No items found": "No items found",
    "High Priority": "High Priority",
    "Medium Priority": "Medium Priority",
    "Low Priority": "Low Priority",
    "No tasks in the selected items": "No tasks in the selected items",
    "View Type": "View Type",
    "Select the type of view to create": "Select the type of view to create",
    "Standard View": "Standard View",
    "Two Column View": "Two Column View",
    "Items": "Items",
    "selected items": "selected items",
    "No items selected": "No items selected",
    "Two Column View Settings": "Two Column View Settings",
    "Group by Task Property": "Group by Task Property",
    "Select which task property to use for left column grouping": "Select which task property to use for left column grouping",
    "Priorities": "Priorities",
    "Contexts": "Contexts",
    "Due Dates": "Due Dates",
    "Scheduled Dates": "Scheduled Dates",
    "Start Dates": "Start Dates",
    "Files": "Files",
    "Left Column Title": "Left Column Title",
    "Title for the left column (items list)": "Title for the left column (items list)",
    "Right Column Title": "Right Column Title",
    "Default title for the right column (tasks list)": "Default title for the right column (tasks list)",
    "Multi-select Text": "Multi-select Text",
    "Text to show when multiple items are selected": "Text to show when multiple items are selected",
    "Empty State Text": "Empty State Text",
    "Text to show when no items are selected": "Text to show when no items are selected",
    "Filter Blanks": "Filter Blanks",
    "Filter out blank tasks in this view.": "Filter out blank tasks in this view.",
    "Task must contain this path (case-insensitive). Separate multiple paths with commas.": "Task must contain this path (case-insensitive). Separate multiple paths with commas.",
    "Task must NOT contain this path (case-insensitive). Separate multiple paths with commas.": "Task must NOT contain this path (case-insensitive). Separate multiple paths with commas.",
    "You have unsaved changes. Save before closing?": "You have unsaved changes. Save before closing?",
    "Rotate": "Rotate",
    "Are you sure you want to force reindex all tasks?": "Are you sure you want to force reindex all tasks?",
    "Enable progress bar in reading mode": "Enable progress bar in reading mode",
    "Toggle this to allow this plugin to show progress bars in reading mode.": "Toggle this to allow this plugin to show progress bars in reading mode.",
    "Range": "Range",
    "as a placeholder for the percentage value": "as a placeholder for the percentage value",
    "Template text with": "Template text with",
    "placeholder": "placeholder",
    "Reindex": "Reindex",
    "From now": "From now",
    "Complete workflow": "Complete workflow",
    "Quick Workflow Creation": "Quick Workflow Creation",
    "Create quick workflow": "Create quick workflow",
    "Workflow Template": "Workflow Template",
    "Choose a template to start with or create a custom workflow": "Choose a template to start with or create a custom workflow",
    "Simple Linear Workflow": "Simple Linear Workflow",
    "A basic linear workflow with sequential stages": "A basic linear workflow with sequential stages",
    "Project Management": "Project Management",
    "Standard project management workflow": "Standard project management workflow",
    "Research Process": "Research Process",
    "Academic or professional research workflow": "Academic or professional research workflow",
    "Custom Workflow": "Custom Workflow",
    "Create a custom workflow from scratch": "Create a custom workflow from scratch",
    "Workflow Name": "Workflow Name",
    "A descriptive name for your workflow": "A descriptive name for your workflow",
    "Enter workflow name": "Enter workflow name",
    "Unique identifier (auto-generated from name)": "Unique identifier (auto-generated from name)",
    "Optional description of the workflow purpose": "Optional description of the workflow purpose",
    "Describe your workflow...": "Describe your workflow...",
    "Preview of workflow stages (edit after creation for advanced options)": "Preview of workflow stages (edit after creation for advanced options)",
    "Add Stage": "Add Stage",
    "No stages defined. Choose a template or add stages manually.": "No stages defined. Choose a template or add stages manually.",
    "Create Workflow": "Create Workflow",
    "Please provide a workflow name and ID": "Please provide a workflow name and ID",
    "Please add at least one stage to the workflow": "Please add at least one stage to the workflow",
    "Workflow created successfully": "Workflow created successfully",
    "Convert task to workflow template": "Convert task to workflow template",
    "Convert to workflow template": "Convert to workflow template",
    "Convert Task to Workflow": "Convert Task to Workflow",
    "Use similar existing workflow": "Use similar existing workflow",
    "Create new workflow": "Create new workflow",
    "No task structure found at cursor position": "No task structure found at cursor position",
    "Workflow generated from task structure": "Workflow generated from task structure",
    "Workflow based on existing pattern": "Workflow based on existing pattern",
    "Workflow created from task structure": "Workflow created from task structure",
    "Start workflow here": "Start workflow here",
    "Start Workflow Here": "Start Workflow Here",
    "Add new task": "Add new task",
    "Add new sub-task": "Add new sub-task",
    "Start workflow": "Start workflow",
    "No workflows defined. Create a workflow first.": "No workflows defined. Create a workflow first.",
    "Workflow task created": "Workflow task created",
    "Convert to workflow root": "Convert to workflow root",
    "Convert Current Task to Workflow Root": "Convert Current Task to Workflow Root",
    "Convert to Workflow Root": "Convert to Workflow Root",
    "Task converted to workflow root": "Task converted to workflow root",
    "Failed to convert task": "Failed to convert task",
    "Duplicate workflow": "Duplicate workflow",
    "Duplicate Workflow": "Duplicate Workflow",
    "No workflows to duplicate": "No workflows to duplicate",
    "Workflow duplicated and saved": "Workflow duplicated and saved",
    "Workflow quick actions": "Workflow quick actions",
    "Create Quick Workflow": "Create Quick Workflow",
    "Current: ": "Current: ",
    "completed": "completed",
    "Repeatable": "Repeatable",
    "Final": "Final",
    "Sequential": "Sequential",
    "Move to": "Move to",
    "Settings": "Settings",
    "Just started": "Just started",
    "Making progress": "Making progress",
    "Half way": "Half way",
    "Good progress": "Good progress",
    "Almost there": "Almost there",
    "archived on": "archived on",
    "moved": "moved",
    "Capture your thoughts...": "Capture your thoughts...",
    "Project Workflow": "Project Workflow",
    "Planning": "Planning",
    "Development": "Development",
    "Testing": "Testing",
    "Cancelled": "Cancelled",
    "Habit": "Habit",
    "Drink a cup of good tea": "Drink a cup of good tea",
    "Watch an episode of a favorite series": "Watch an episode of a favorite series",
    "Play a game": "Play a game",
    "Eat a piece of chocolate": "Eat a piece of chocolate",
    "common": "common",
    "rare": "rare",
    "legendary": "legendary",
    "No Habits Yet": "No Habits Yet",
    "Click the open habit button to create a new habit.": "Click the open habit button to create a new habit.",
    "Please enter details": "Please enter details",
    "Goal reached": "Goal reached",
    "Exceeded goal": "Exceeded goal",
    "Active": "Active",
    "today": "today",
    "Inactive": "Inactive",
    "All Done!": "All Done!",
    "Select event...": "Select event...",
    "Create new habit": "Create new habit",
    "Edit habit": "Edit habit",
    "Habit type": "Habit type",
    "Daily habit": "Daily habit",
    "Simple daily check-in habit": "Simple daily check-in habit",
    "Count habit": "Count habit",
    "Record numeric values, e.g., how many cups of water": "Record numeric values, e.g., how many cups of water",
    "Mapping habit": "Mapping habit",
    "Use different values to map, e.g., emotion tracking": "Use different values to map, e.g., emotion tracking",
    "Scheduled habit": "Scheduled habit",
    "Habit with multiple events": "Habit with multiple events",
    "Habit name": "Habit name",
    "Display name of the habit": "Display name of the habit",
    "Optional habit description": "Optional habit description",
    "Icon": "Icon",
    "Please enter a habit name": "Please enter a habit name",
    "Property name": "Property name",
    "The property name of the daily note front matter": "The property name of the daily note front matter",
    "Completion text": "Completion text",
    "(Optional) Specific text representing completion, leave blank for any non-empty value to be considered completed": "(Optional) Specific text representing completion, leave blank for any non-empty value to be considered completed",
    "The property name in daily note front matter to store count values": "The property name in daily note front matter to store count values",
    "Minimum value": "Minimum value",
    "(Optional) Minimum value for the count": "(Optional) Minimum value for the count",
    "Maximum value": "Maximum value",
    "(Optional) Maximum value for the count": "(Optional) Maximum value for the count",
    "Unit": "Unit",
    "(Optional) Unit for the count, such as 'cups', 'times', etc.": "(Optional) Unit for the count, such as 'cups', 'times', etc.",
    "Notice threshold": "Notice threshold",
    "(Optional) Trigger a notification when this value is reached": "(Optional) Trigger a notification when this value is reached",
    "The property name in daily note front matter to store mapping values": "The property name in daily note front matter to store mapping values",
    "Value mapping": "Value mapping",
    "Define mappings from numeric values to display text": "Define mappings from numeric values to display text",
    "Add new mapping": "Add new mapping",
    "Scheduled events": "Scheduled events",
    "Add multiple events that need to be completed": "Add multiple events that need to be completed",
    "Event name": "Event name",
    "Event details": "Event details",
    "Add new event": "Add new event",
    "Please enter a property name": "Please enter a property name",
    "Please add at least one mapping value": "Please add at least one mapping value",
    "Mapping key must be a number": "Mapping key must be a number",
    "Please enter text for all mapping values": "Please enter text for all mapping values",
    "Please add at least one event": "Please add at least one event",
    "Event name cannot be empty": "Event name cannot be empty",
    "Add new habit": "Add new habit",
    "No habits yet": "No habits yet",
    "Click the button above to add your first habit": "Click the button above to add your first habit",
    "Habit updated": "Habit updated",
    "Habit added": "Habit added",
    "Delete habit": "Delete habit",
    "This action cannot be undone.": "This action cannot be undone.",
    "Habit deleted": "Habit deleted",
    "You've Earned a Reward!": "You've Earned a Reward!",
    "Your reward:": "Your reward:",
    "Image not found:": "Image not found:",
    "Claim Reward": "Claim Reward",
    "Skip": "Skip",
    "Reward": "Reward",
    "View & Index Configuration": "View & Index Configuration",
    "Enable task genius view will also enable the task genius indexer, which will provide the task genius view results from whole vault.": "Enable task genius view will also enable the task genius indexer, which will provide the task genius view results from whole vault.",
    "Use daily note path as date": "Use daily note path as date",
    "If enabled, the daily note path will be used as the date for tasks.": "If enabled, the daily note path will be used as the date for tasks.",
    "Holiday Configuration": "Holiday Configuration",
    "Configure how holiday events are detected and displayed": "Configure how holiday events are detected and displayed",
    "Enable Holiday Detection": "Enable Holiday Detection",
    "Automatically detect and group holiday events": "Automatically detect and group holiday events",
    "Grouping Strategy": "Grouping Strategy",
    "How to handle consecutive holiday events": "How to handle consecutive holiday events",
    "Show All Events": "Show All Events",
    "Show First Day Only": "Show First Day Only",
    "Show Summary": "Show Summary",
    "Show First and Last": "Show First and Last",
    "Maximum Gap Days": "Maximum Gap Days",
    "Maximum days between events to consider them consecutive": "Maximum days between events to consider them consecutive",
    "Show in Forecast": "Show in Forecast",
    "Whether to show holiday events in forecast view": "Whether to show holiday events in forecast view",
    "Show in Calendar": "Show in Calendar",
    "Whether to show holiday events in calendar view": "Whether to show holiday events in calendar view",
    "Detection Patterns": "Detection Patterns",
    "Summary Patterns": "Summary Patterns",
    "Regex patterns to match in event titles (one per line)": "Regex patterns to match in event titles (one per line)",
    "Keywords": "Keywords",
    "Keywords to detect in event text (one per line)": "Keywords to detect in event text (one per line)",
    "Categories": "Categories",
    "Event categories that indicate holidays (one per line)": "Event categories that indicate holidays (one per line)",
    "Group Display Format": "Group Display Format",
    "Format for grouped holiday display. Use {title}, {count}, {startDate}, {endDate}": "Format for grouped holiday display. Use {title}, {count}, {startDate}, {endDate}",
    "Status Mapping": "Status Mapping",
    "Configure how ICS events are mapped to task statuses": "Configure how ICS events are mapped to task statuses",
    "Enable Status Mapping": "Enable Status Mapping",
    "Automatically map ICS events to specific task statuses": "Automatically map ICS events to specific task statuses",
    "Override ICS Status": "Override ICS Status",
    "Override original ICS event status with mapped status": "Override original ICS event status with mapped status",
    "Timing Rules": "Timing Rules",
    "Past Events Status": "Past Events Status",
    "Status for events that have already ended": "Status for events that have already ended",
    "Current Events Status": "Current Events Status",
    "Status for events happening today": "Status for events happening today",
    "Future Events Status": "Future Events Status",
    "Status for events in the future": "Status for events in the future",
    "Property Rules": "Property Rules",
    "Optional rules based on event properties (higher priority than timing rules)": "Optional rules based on event properties (higher priority than timing rules)",
    "Holiday Status": "Holiday Status",
    "Status for events detected as holidays": "Status for events detected as holidays",
    "Use timing rules": "Use timing rules",
    "Category Mapping": "Category Mapping",
    "Map specific categories to statuses (format: category:status, one per line)": "Map specific categories to statuses (format: category:status, one per line)",
    "Status Incomplete": "Incomplete",
    "Status Complete": "Complete",
    "Status Cancelled": "Cancelled",
    "Status In Progress": "In Progress",
    "Status Question": "Question",
    "Task Genius will use moment.js and also this format to parse the daily note path.": "Task Genius will use moment.js and also this format to parse the daily note path.",
    "You need to set `yyyy` instead of `YYYY` in the format string. And `dd` instead of `DD`.": "You need to set `yyyy` instead of `YYYY` in the format string. And `dd` instead of `DD`.",
    "Daily note path": "Daily note path",
    "Select the folder that contains the daily note.": "Select the folder that contains the daily note.",
    "Use as date type": "Use as date type",
    "You can choose due, start, or scheduled as the date type for tasks.": "You can choose due, start, or scheduled as the date type for tasks.",
    "Due": "Due",
    "Start": "Start",
    "Scheduled": "Scheduled",
    "Configure rewards for completing tasks. Define items, their occurrence chances, and conditions.": "Configure rewards for completing tasks. Define items, their occurrence chances, and conditions.",
    "Enable rewards": "Enable rewards",
    "Toggle to enable or disable the reward system.": "Toggle to enable or disable the reward system.",
    "Occurrence levels": "Occurrence levels",
    "Define different levels of reward rarity and their probability.": "Define different levels of reward rarity and their probability.",
    "Chance must be between 0 and 100.": "Chance must be between 0 and 100.",
    "Level name (e.g., common)": "Level name (e.g., common)",
    "Chance (%)": "Chance (%)",
    "Delete level": "Delete level",
    "Add occurrence level": "Add occurrence level",
    "New level": "New level",
    "Reward items": "Reward items",
    "Manage the specific rewards that can be obtained.": "Manage the specific rewards that can be obtained.",
    "No levels defined": "No levels defined",
    "Reward name/text": "Reward name/text",
    "Inventory (-1 for ∞)": "Inventory (-1 for ∞)",
    "Invalid inventory number.": "Invalid inventory number.",
    "Condition (e.g., #tag AND project)": "Condition (e.g., #tag AND project)",
    "Image url (optional)": "Image url (optional)",
    "Delete reward item": "Delete reward item",
    "No reward items defined yet.": "No reward items defined yet.",
    "Add reward item": "Add reward item",
    "New reward": "New reward",
    "Configure habit settings, including adding new habits, editing existing habits, and managing habit completion.": "Configure habit settings, including adding new habits, editing existing habits, and managing habit completion.",
    "Enable habits": "Enable habits",
    "Reward display type": "Reward display type",
    "Choose how rewards are displayed when earned.": "Choose how rewards are displayed when earned.",
    "Modal dialog": "Modal dialog",
    "Notice (Auto-accept)": "Notice (Auto-accept)",
    "Task sorting is disabled or no sort criteria are defined in settings.": "Task sorting is disabled or no sort criteria are defined in settings.",
    "e.g. #tag1, #tag2, #tag3": "e.g. #tag1, #tag2, #tag3",
    "Overdue": "Overdue",
    "No tasks found for this tag.": "No tasks found for this tag.",
    "New custom view": "New custom view",
    "Create custom view": "Create custom view",
    "Copy view: ": "Copy view: ",
    "Copy View": "Copy View",
    "Copy view": "Copy view",
    "Copy of ": "Copy of ",
    "Creating a copy based on: ": "Creating a copy based on: ",
    "You can modify all settings below. The original view will remain unchanged.": "You can modify all settings below. The original view will remain unchanged.",
    "View copied successfully: ": "View copied successfully: ",
    "Edit view: ": "Edit view: ",
    "Icon name": "Icon name",
    "First day of week": "First day of week",
    "Overrides the locale default for forecast views.": "Overrides the locale default for forecast views.",
    "View type": "View type",
    "Standard view": "Standard view",
    "Two column view": "Two column view",
    "Two column view settings": "Two column view settings",
    "Group by task property": "Group by task property",
    "Left column title": "Left column title",
    "Right column title": "Right column title",
    "Empty state text": "Empty state text",
    "Hide completed and abandoned tasks": "Hide completed and abandoned tasks",
    "Filter blanks": "Filter blanks",
    "Text contains": "Text contains",
    "Tags include": "Tags include",
    "Tags exclude": "Tags exclude",
    "Project is": "Project is",
    "Priority is": "Priority is",
    "Status include": "Status include",
    "Status exclude": "Status exclude",
    "Due date is": "Due date is",
    "Start date is": "Start date is",
    "Scheduled date is": "Scheduled date is",
    "Path includes": "Path includes",
    "Path excludes": "Path excludes",
    "Sort Criteria": "Sort Criteria",
    "Define the order in which tasks should be sorted. Criteria are applied sequentially.": "Define the order in which tasks should be sorted. Criteria are applied sequentially.",
    "No sort criteria defined. Add criteria below.": "No sort criteria defined. Add criteria below.",
    "Content": "Content",
    "Ascending": "Ascending",
    "Descending": "Descending",
    "Ascending: High -> Low -> None. Descending: None -> Low -> High": "Ascending: High -> Low -> None. Descending: None -> Low -> High",
    "Ascending: Earlier -> Later -> None. Descending: None -> Later -> Earlier": "Ascending: Earlier -> Later -> None. Descending: None -> Later -> Earlier",
    "Ascending respects status order (Overdue first). Descending reverses it.": "Ascending respects status order (Overdue first). Descending reverses it.",
    "Ascending: A-Z. Descending: Z-A": "Ascending: A-Z. Descending: Z-A",
    "Remove Criterion": "Remove Criterion",
    "Add Sort Criterion": "Add Sort Criterion",
    "Reset to Defaults": "Reset to Defaults",
    "Has due date": "Has due date",
    "Has date": "Has date",
    "No date": "No date",
    "Any": "Any",
    "Has start date": "Has start date",
    "Has scheduled date": "Has scheduled date",
    "Has created date": "Has created date",
    "Has completed date": "Has completed date",
    "Only show tasks that match the completed date.": "Only show tasks that match the completed date.",
    "Has recurrence": "Has recurrence",
    "Has property": "Has property",
    "No property": "No property",
    "Unsaved Changes": "Unsaved Changes",
    "Sort Tasks in Section": "Sort Tasks in Section",
    "Tasks sorted (using settings). Change application needs refinement.": "Tasks sorted (using settings). Change application needs refinement.",
    "Sort Tasks in Entire Document": "Sort Tasks in Entire Document",
    "Entire document sorted (using settings).": "Entire document sorted (using settings).",
    "Tasks already sorted or no tasks found.": "Tasks already sorted or no tasks found.",
    "Task Handler": "Task Handler",
    "Show progress bars based on heading": "Show progress bars based on heading",
    "Toggle this to enable showing progress bars based on heading.": "Toggle this to enable showing progress bars based on heading.",
    "# heading": "# heading",
    "Task Sorting": "Task Sorting",
    "Configure how tasks are sorted in the document.": "Configure how tasks are sorted in the document.",
    "Enable Task Sorting": "Enable Task Sorting",
    "Toggle this to enable commands for sorting tasks.": "Toggle this to enable commands for sorting tasks.",
    "Use relative time for date": "Use relative time for date",
    "Use relative time for date in task list item, e.g. 'yesterday', 'today', 'tomorrow', 'in 2 days', '3 months ago', etc.": "Use relative time for date in task list item, e.g. 'yesterday', 'today', 'tomorrow', 'in 2 days', '3 months ago', etc.",
    "Enable inline editor": "Enable inline editor",
    "Enable inline editing of task content and metadata directly in task views. When disabled, tasks can only be edited in the source file.": "Enable inline editing of task content and metadata directly in task views. When disabled, tasks can only be edited in the source file.",
    "Ignore all tasks behind heading": "Ignore all tasks behind heading",
    "Enter the heading to ignore, e.g. '## Project', '## Inbox', separated by comma": "Enter the heading to ignore, e.g. '## Project', '## Inbox', separated by comma",
    "Focus all tasks behind heading": "Focus all tasks behind heading",
    "Enter the heading to focus, e.g. '## Project', '## Inbox', separated by comma": "Enter the heading to focus, e.g. '## Project', '## Inbox', separated by comma",
    "Level Name (e.g., common)": "Level Name (e.g., common)",
    "Delete Level": "Delete Level",
    "New Level": "New Level",
    "Reward Name/Text": "Reward Name/Text",
    "New Reward": "New Reward",
    "Created": "Created",
    "Updated": "Updated",
    "Filter Summary": "Filter Summary",
    "Root condition": "Root condition",
    "Priority (High to Low)": "Priority (High to Low)",
    "Priority (Low to High)": "Priority (Low to High)",
    "Due Date (Earliest First)": "Due Date (Earliest First)",
    "Due Date (Latest First)": "Due Date (Latest First)",
    "Scheduled Date (Earliest First)": "Scheduled Date (Earliest First)",
    "Scheduled Date (Latest First)": "Scheduled Date (Latest First)",
    "Start Date (Earliest First)": "Start Date (Earliest First)",
    "Start Date (Latest First)": "Start Date (Latest First)",
    "Created Date": "Created Date",
    "Overview": "Overview",
    "Dates": "Dates",
    "e.g. #tag1, #tag2": "e.g. #tag1, #tag2",
    "e.g. @home, @work": "e.g. @home, @work",
    "Recurrence Rule": "Recurrence Rule",
    "e.g. every day, every week": "e.g. every day, every week",
    "Edit Task": "Edit Task",
    "Load": "Load",
    "filter group": "filter group",
    "filter": "filter",
    "Match": "Match",
    "All": "All",
    "Add filter group": "Add filter group",
    "filter in this group": "filter in this group",
    "Duplicate filter group": "Duplicate filter group",
    "Remove filter group": "Remove filter group",
    "OR": "OR",
    "AND NOT": "AND NOT",
    "AND": "AND",
    "Remove filter": "Remove filter",
    "contains": "contains",
    "does not contain": "does not contain",
    "is": "is",
    "is not": "is not",
    "starts with": "starts with",
    "ends with": "ends with",
    "is empty": "is empty",
    "is not empty": "is not empty",
    "is true": "is true",
    "is false": "is false",
    "is set": "is set",
    "is not set": "is not set",
    "equals": "equals",
    "NOR": "NOR",
    "Group by": "Group by",
    "Select which task property to use for creating columns": "Select which task property to use for creating columns",
    "Hide empty columns": "Hide empty columns",
    "Hide columns that have no tasks.": "Hide columns that have no tasks.",
    "Default sort field": "Default sort field",
    "Default field to sort tasks by within each column.": "Default field to sort tasks by within each column.",
    "Default sort order": "Default sort order",
    "Default order to sort tasks within each column.": "Default order to sort tasks within each column.",
    "Custom Columns": "Custom Columns",
    "Configure custom columns for the selected grouping property": "Configure custom columns for the selected grouping property",
    "No custom columns defined. Add columns below.": "No custom columns defined. Add columns below.",
    "Column Title": "Column Title",
    "Value": "Value",
    "Remove Column": "Remove Column",
    "Add Column": "Add Column",
    "New Column": "New Column",
    "Reset Columns": "Reset Columns",
    "Task must have this priority (e.g., 1, 2, 3). You can also use 'none' to filter out tasks without a priority.": "Task must have this priority (e.g., 1, 2, 3). You can also use 'none' to filter out tasks without a priority.",
    "Filter": "Filter",
    "Reset Filter": "Reset Filter",
    "Saved Filters": "Saved Filters",
    "Manage Saved Filters": "Manage Saved Filters",
    "Filter applied: ": "Filter applied: ",
    "Recurrence date calculation": "Recurrence date calculation",
    "Choose how to calculate the next date for recurring tasks": "Choose how to calculate the next date for recurring tasks",
    "Based on due date": "Based on due date",
    "Based on scheduled date": "Based on scheduled date",
    "Based on current date": "Based on current date",
    "Task Gutter": "Task Gutter",
    "Configure the task gutter.": "Configure the task gutter.",
    "Enable task gutter": "Enable task gutter",
    "Toggle this to enable the task gutter.": "Toggle this to enable the task gutter.",
    "Line Number": "Line Number",
    "Tasks Plugin Detected": "Tasks Plugin Detected",
    "Current status management and date management may conflict with the Tasks plugin. Please check the ": "Current status management and date management may conflict with the Tasks plugin. Please check the ",
    "compatibility documentation": "compatibility documentation",
    " for more information.": " for more information.",
    "Auto Date Manager": "Auto Date Manager",
    "Automatically manage dates based on task status changes": "Automatically manage dates based on task status changes",
    "Enable auto date manager": "Enable auto date manager",
    "Toggle this to enable automatic date management when task status changes. Dates will be added/removed based on your preferred metadata format (Tasks emoji format or Dataview format).": "Toggle this to enable automatic date management when task status changes. Dates will be added/removed based on your preferred metadata format (Tasks emoji format or Dataview format).",
    "Manage completion dates": "Manage completion dates",
    "Automatically add completion dates when tasks are marked as completed, and remove them when changed to other statuses.": "Automatically add completion dates when tasks are marked as completed, and remove them when changed to other statuses.",
    "Manage start dates": "Manage start dates",
    "Automatically add start dates when tasks are marked as in progress, and remove them when changed to other statuses.": "Automatically add start dates when tasks are marked as in progress, and remove them when changed to other statuses.",
    "Manage cancelled dates": "Manage cancelled dates",
    "Automatically add cancelled dates when tasks are marked as abandoned, and remove them when changed to other statuses.": "Automatically add cancelled dates when tasks are marked as abandoned, and remove them when changed to other statuses.",
    "Beta": "Beta",
    "Beta Test Features": "Beta Test Features",
    "Experimental features that are currently in testing phase. These features may be unstable and could change or be removed in future updates.": "Experimental features that are currently in testing phase. These features may be unstable and could change or be removed in future updates.",
    "Beta Features Warning": "Beta Features Warning",
    "These features are experimental and may be unstable. They could change significantly or be removed in future updates due to Obsidian API changes or other factors. Please use with caution and provide feedback to help improve these features.": "These features are experimental and may be unstable. They could change significantly or be removed in future updates due to Obsidian API changes or other factors. Please use with caution and provide feedback to help improve these features.",
    "Base View": "Base View",
    "Advanced view management features that extend the default Task Genius views with additional functionality.": "Advanced view management features that extend the default Task Genius views with additional functionality.",
    "Enable experimental Base View functionality. This feature provides enhanced view management capabilities but may be affected by future Obsidian API changes. You may need to restart Obsidian to see the changes.": "Enable experimental Base View functionality. This feature provides enhanced view management capabilities but may be affected by future Obsidian API changes. You may need to restart Obsidian to see the changes.",
    "You need to close all bases view if you already create task view in them and remove unused view via edit them manually when disable this feature.": "You need to close all bases view if you already create task view in them and remove unused view via edit them manually when disable this feature.",
    "Enable Base View": "Enable Base View",
    "Enable experimental Base View functionality. This feature provides enhanced view management capabilities but may be affected by future Obsidian API changes.": "Enable experimental Base View functionality. This feature provides enhanced view management capabilities but may be affected by future Obsidian API changes.",
    "Enable": "Enable",
    "Beta Feedback": "Beta Feedback",
    "Help improve these features by providing feedback on your experience.": "Help improve these features by providing feedback on your experience.",
    "Report Issues": "Report Issues",
    "If you encounter any issues with beta features, please report them to help improve the plugin.": "If you encounter any issues with beta features, please report them to help improve the plugin.",
    "Report Issue": "Report Issue",
    "Table": "Table",
    "No Priority": "No Priority",
    "Click to select date": "Click to select date",
    "Enter tags separated by commas": "Enter tags separated by commas",
    "Enter project name": "Enter project name",
    "Enter context": "Enter context",
    "Invalid value": "Invalid value",
    "No tasks": "No tasks",
    "1 task": "1 task",
    "Columns": "Columns",
    "Toggle column visibility": "Toggle column visibility",
    "Switch to List Mode": "Switch to List Mode",
    "Switch to Tree Mode": "Switch to Tree Mode",
    "Collapse": "Collapse",
    "Expand": "Expand",
    "Collapse subtasks": "Collapse subtasks",
    "Expand subtasks": "Expand subtasks",
    "Click to change status": "Click to change status",
    "Click to set priority": "Click to set priority",
    "Yesterday": "Yesterday",
    "Click to edit date": "Click to edit date",
    "No tags": "No tags",
    "Click to open file": "Click to open file",
    "No tasks found": "No tasks found",
    "Completed Date": "Completed Date",
    "Loading...": "Loading...",
    "Advanced Filtering": "Advanced Filtering",
    "Use advanced multi-group filtering with complex conditions": "Use advanced multi-group filtering with complex conditions",
    "Auto-assigned from path": "Auto-assigned from path",
    "Auto-assigned from file metadata": "Auto-assigned from file metadata",
    "Auto-assigned from config file": "Auto-assigned from config file",
    "Auto-assigned": "Auto-assigned",
    "Auto from path": "Auto from path",
    "Auto from metadata": "Auto from metadata",
    "Auto from config": "Auto from config",
    "This project is automatically assigned and cannot be changed": "This project is automatically assigned and cannot be changed",
    "You can override the auto-assigned project by entering a different value": "You can override the auto-assigned project by entering a different value",
    "You can override the auto-assigned project": "You can override the auto-assigned project",
    "Complete substage and move to": "Complete substage and move to",
    "Auto-moved": "Auto-moved",
    "tasks to": "tasks to",
    "Failed to auto-move tasks:": "Failed to auto-move tasks:",
    "Enable auto-move for completed tasks": "Enable auto-move for completed tasks",
    "Automatically move completed tasks to a default file without manual selection.": "Automatically move completed tasks to a default file without manual selection.",
    "Default target file": "Default target file",
    "Default file to move completed tasks to (e.g., 'Archive.md')": "Default file to move completed tasks to (e.g., 'Archive.md')",
    "Default insertion mode": "Default insertion mode",
    "Where to insert completed tasks in the target file": "Where to insert completed tasks in the target file",
    "Default heading name": "Default heading name",
    "Heading name to insert tasks after (will be created if it doesn't exist)": "Heading name to insert tasks after (will be created if it doesn't exist)",
    "Enable auto-move for incomplete tasks": "Enable auto-move for incomplete tasks",
    "Automatically move incomplete tasks to a default file without manual selection.": "Automatically move incomplete tasks to a default file without manual selection.",
    "Default target file for incomplete tasks": "Default target file for incomplete tasks",
    "Default file to move incomplete tasks to (e.g., 'Backlog.md')": "Default file to move incomplete tasks to (e.g., 'Backlog.md')",
    "Default insertion mode for incomplete tasks": "Default insertion mode for incomplete tasks",
    "Where to insert incomplete tasks in the target file": "Where to insert incomplete tasks in the target file",
    "Default heading name for incomplete tasks": "Default heading name for incomplete tasks",
    "Heading name to insert incomplete tasks after (will be created if it doesn't exist)": "Heading name to insert incomplete tasks after (will be created if it doesn't exist)",
    "Auto-move completed subtasks to default file": "Auto-move completed subtasks to default file",
    "Auto-move direct completed subtasks to default file": "Auto-move direct completed subtasks to default file",
    "Auto-move all subtasks to default file": "Auto-move all subtasks to default file",
    "Auto-move incomplete subtasks to default file": "Auto-move incomplete subtasks to default file",
    "Auto-move direct incomplete subtasks to default file": "Auto-move direct incomplete subtasks to default file",
    "Timeline": "Timeline",
    "Timeline Sidebar": "Timeline Sidebar",
    "Open Timeline Sidebar": "Open Timeline Sidebar",
    "Enable Timeline Sidebar": "Enable Timeline Sidebar",
    "Toggle this to enable the timeline sidebar view for quick access to your daily events and tasks.": "Toggle this to enable the timeline sidebar view for quick access to your daily events and tasks.",
    "Auto-open on startup": "Auto-open on startup",
    "Automatically open the timeline sidebar when Obsidian starts.": "Automatically open the timeline sidebar when Obsidian starts.",
    "Show completed tasks": "Show completed tasks",
    "Include completed tasks in the timeline view. When disabled, only incomplete tasks will be shown.": "Include completed tasks in the timeline view. When disabled, only incomplete tasks will be shown.",
    "Focus mode by default": "Focus mode by default",
    "Enable focus mode by default, which highlights today's events and dims past/future events.": "Enable focus mode by default, which highlights today's events and dims past/future events.",
    "Maximum events to show": "Maximum events to show",
    "Maximum number of events to display in the timeline. Higher numbers may affect performance.": "Maximum number of events to display in the timeline. Higher numbers may affect performance.",
    "Open Timeline": "Open Timeline",
    "Click to open the timeline sidebar view.": "Click to open the timeline sidebar view.",
    "Timeline sidebar opened": "Timeline sidebar opened",
    "Go to today": "Go to today",
    "Focus on today": "Focus on today",
    "No events to display": "No events to display",
    "Go to task": "Go to task",
    "What's on your mind?": "What's on your mind?",
    "to": "to",
    "To Do": "To Do",
    "Done": "Done",
    "Coding": "Coding",
    "Literature Review": "Literature Review",
    "Data Collection": "Data Collection",
    "Analysis": "Analysis",
    "Writing": "Writing",
    "Published": "Published",
    "Remove stage": "Remove stage",
    "Discord": "Discord",
    "Chat with us": "Chat with us",
    "Open Discord": "Open Discord",
    "Task Genius icons are designed by": "Task Genius icons are designed by",
    "Task Genius Icons": "Task Genius Icons",
    "Add New Calendar Source": "Add New Calendar Source",
    "URL": "URL",
    "Refresh": "Refresh",
    "min": "min",
    "Edit this calendar source": "Edit this calendar source",
    "Sync": "Sync",
    "Sync this calendar source now": "Sync this calendar source now",
    "Disable": "Disable",
    "Disable this source": "Disable this source",
    "Enable this source": "Enable this source",
    "Delete this calendar source": "Delete this calendar source",
    "Are you sure you want to delete this calendar source?": "Are you sure you want to delete this calendar source?",
    "Text Replacements": "Text Replacements",
    "Configure rules to modify event text using regular expressions": "Configure rules to modify event text using regular expressions",
    "No text replacement rules configured": "No text replacement rules configured",
    "Rule Enabled": "Enabled",
    "Rule Disabled": "Disabled",
    "Rule Target": "Target",
    "Rule Pattern": "Pattern",
    "Replacement": "Replacement",
    "Are you sure you want to delete this text replacement rule?": "Are you sure you want to delete this text replacement rule?",
    "Add Text Replacement Rule": "Add Text Replacement Rule",
    "Edit Text Replacement Rule": "Edit Text Replacement Rule",
    "Rule Name": "Rule Name",
    "Descriptive name for this replacement rule": "Descriptive name for this replacement rule",
    "Remove Meeting Prefix": "Remove Meeting Prefix",
    "Whether this rule is active": "Whether this rule is active",
    "Target Field": "Target Field",
    "Which field to apply the replacement to": "Which field to apply the replacement to",
    "Summary/Title": "Summary/Title",
    "Location": "Location",
    "All Fields": "All Fields",
    "Pattern (Regular Expression)": "Pattern (Regular Expression)",
    "Regular expression pattern to match. Use parentheses for capture groups.": "Regular expression pattern to match. Use parentheses for capture groups.",
    "Text to replace matches with. Use $1, $2, etc. for capture groups.": "Text to replace matches with. Use $1, $2, etc. for capture groups.",
    "Regex Flags": "Regex Flags",
    "Regular expression flags (e.g., 'g' for global, 'i' for case-insensitive)": "Regular expression flags (e.g., 'g' for global, 'i' for case-insensitive)",
    "Examples": "Examples",
    "Remove prefix": "Remove prefix",
    "Replace room numbers": "Replace room numbers",
    "Swap words": "Swap words",
    "Test Rule": "Test Rule",
    "Output: ": "Output: ",
    "Test Input": "Test Input",
    "Enter text to test the replacement rule": "Enter text to test the replacement rule",
    "Please enter a name for the rule": "Please enter a name for the rule",
    "Please enter a pattern": "Please enter a pattern",
    "Invalid regular expression pattern": "Invalid regular expression pattern",
    "Enhanced Project Configuration": "Enhanced Project Configuration",
    "Configure advanced project detection and management features": "Configure advanced project detection and management features",
    "Enable enhanced project features": "Enable enhanced project features",
    "Enable path-based, metadata-based, and config file-based project detection": "Enable path-based, metadata-based, and config file-based project detection",
    "Path-based Project Mappings": "Path-based Project Mappings",
    "Configure project names based on file paths": "Configure project names based on file paths",
    "No path mappings configured yet.": "No path mappings configured yet.",
    "Mapping": "Mapping",
    "Path pattern (e.g., Projects/Work)": "Path pattern (e.g., Projects/Work)",
    "Add Path Mapping": "Add Path Mapping",
    "Metadata-based Project Configuration": "Metadata-based Project Configuration",
    "Configure project detection from file frontmatter": "Configure project detection from file frontmatter",
    "Enable metadata project detection": "Enable metadata project detection",
    "Detect project from file frontmatter metadata": "Detect project from file frontmatter metadata",
    "Metadata key": "Metadata key",
    "The frontmatter key to use for project name": "The frontmatter key to use for project name",
    "Inherit other metadata fields from file frontmatter": "Inherit other metadata fields from file frontmatter",
    "Allow subtasks to inherit metadata from file frontmatter. When disabled, only top-level tasks inherit file metadata.": "Allow subtasks to inherit metadata from file frontmatter. When disabled, only top-level tasks inherit file metadata.",
    "Project Configuration File": "Project Configuration File",
    "Configure project detection from project config files": "Configure project detection from project config files",
    "Enable config file project detection": "Enable config file project detection",
    "Detect project from project configuration files": "Detect project from project configuration files",
    "Config file name": "Config file name",
    "Name of the project configuration file": "Name of the project configuration file",
    "Search recursively": "Search recursively",
    "Search for config files in parent directories": "Search for config files in parent directories",
    "Metadata Mappings": "Metadata Mappings",
    "Configure how metadata fields are mapped and transformed": "Configure how metadata fields are mapped and transformed",
    "No metadata mappings configured yet.": "No metadata mappings configured yet.",
    "Source key (e.g., proj)": "Source key (e.g., proj)",
    "Select target field": "Select target field",
    "Add Metadata Mapping": "Add Metadata Mapping",
    "Default Project Naming": "Default Project Naming",
    "Configure fallback project naming when no explicit project is found": "Configure fallback project naming when no explicit project is found",
    "Enable default project naming": "Enable default project naming",
    "Use default naming strategy when no project is explicitly defined": "Use default naming strategy when no project is explicitly defined",
    "Naming strategy": "Naming strategy",
    "Strategy for generating default project names": "Strategy for generating default project names",
    "Use filename": "Use filename",
    "Use folder name": "Use folder name",
    "Use metadata field": "Use metadata field",
    "Metadata field to use as project name": "Metadata field to use as project name",
    "Enter metadata key (e.g., project-name)": "Enter metadata key (e.g., project-name)",
    "Strip file extension": "Strip file extension",
    "Remove file extension from filename when using as project name": "Remove file extension from filename when using as project name",
    "Append": "Append",
    "Prepend": "Prepend",
    "Replace": "Replace",
    "Other settings": "Other settings",
    "Use Task Genius icons": "Use Task Genius icons",
    "Use Task Genius icons for task statuses": "Use Task Genius icons for task statuses",
    "Customize the prefix used for context tags in dataview format (e.g., 'context' for [context:: home]). Changes require reindexing.": "Customize the prefix used for context tags in dataview format (e.g., 'context' for [context:: home]). Changes require reindexing.",
    "Customize the prefix used for context tags (e.g., '@home' for @home). Changes require reindexing.": "Customize the prefix used for context tags (e.g., '@home' for @home). Changes require reindexing.",
    "Area": "Area",
    "File Parsing Configuration": "File Parsing Configuration",
    "Configure how to extract tasks from file metadata and tags.": "Configure how to extract tasks from file metadata and tags.",
    "Enable file metadata parsing": "Enable file metadata parsing",
    "Parse tasks from file frontmatter metadata fields. When enabled, files with specific metadata fields will be treated as tasks.": "Parse tasks from file frontmatter metadata fields. When enabled, files with specific metadata fields will be treated as tasks.",
    "File metadata parsing enabled. Rebuilding task index...": "File metadata parsing enabled. Rebuilding task index...",
    "Task index rebuilt successfully": "Task index rebuilt successfully",
    "Failed to rebuild task index": "Failed to rebuild task index",
    "Metadata fields to parse as tasks": "Metadata fields to parse as tasks",
    "Comma-separated list of metadata fields that should be treated as tasks (e.g., dueDate, todo, complete, task)": "Comma-separated list of metadata fields that should be treated as tasks (e.g., dueDate, todo, complete, task)",
    "Task content from metadata": "Task content from metadata",
    "Which metadata field to use as task content. If not found, will use filename.": "Which metadata field to use as task content. If not found, will use filename.",
    "Default task status": "Default task status",
    "Default status for tasks created from metadata (space for incomplete, x for complete)": "Default status for tasks created from metadata (space for incomplete, x for complete)",
    "Enable tag-based task parsing": "Enable tag-based task parsing",
    "Parse tasks from file tags. When enabled, files with specific tags will be treated as tasks.": "Parse tasks from file tags. When enabled, files with specific tags will be treated as tasks.",
    "Tags to parse as tasks": "Tags to parse as tasks",
    "Comma-separated list of tags that should be treated as tasks (e.g., #todo, #task, #action, #due)": "Comma-separated list of tags that should be treated as tasks (e.g., #todo, #task, #action, #due)",
    "Enable worker processing": "Enable worker processing",
    "Use background worker for file parsing to improve performance. Recommended for large vaults.": "Use background worker for file parsing to improve performance. Recommended for large vaults.",
    "What do you want to do today?": "What do you want to do today?",
    "More options": "More options",
    "Hide weekends": "Hide weekends",
    "Hide weekend columns (Saturday and Sunday) in calendar views.": "Hide weekend columns (Saturday and Sunday) in calendar views.",
    "Hide weekend columns (Saturday and Sunday) in forecast calendar.": "Hide weekend columns (Saturday and Sunday) in forecast calendar.",
    "Continue": "Continue",
    "Convert current task to workflow root": "Convert current task to workflow root",
    "Matrix": "Matrix",
    "More actions": "More actions",
    "Open in file": "Open in file",
    "Copy task": "Copy task",
    "Mark as urgent": "Mark as urgent",
    "Mark as important": "Mark as important",
    "Remove urgent tag": "Remove urgent tag",
    "Remove important tag": "Remove important tag",
    "Overdue by {days} days": "Overdue by {days} days",
    "Due today": "Due today",
    "Due tomorrow": "Due tomorrow",
    "Due in {days} days": "Due in {days} days",
    "Loading tasks...": "Loading tasks...",
    "task": "task",
    "No crisis tasks - great job!": "No crisis tasks - great job!",
    "No planning tasks - consider adding some goals": "No planning tasks - consider adding some goals",
    "No interruptions - focus time!": "No interruptions - focus time!",
    "No time wasters - excellent focus!": "No time wasters - excellent focus!",
    "No tasks in this quadrant": "No tasks in this quadrant",
    "Handle immediately. These are critical tasks that need your attention now.": "Handle immediately. These are critical tasks that need your attention now.",
    "Schedule and plan. These tasks are key to your long-term success.": "Schedule and plan. These tasks are key to your long-term success.",
    "Delegate if possible. These tasks are urgent but don't require your specific skills.": "Delegate if possible. These tasks are urgent but don't require your specific skills.",
    "Eliminate or minimize. These tasks may be time wasters.": "Eliminate or minimize. These tasks may be time wasters.",
    "Review and categorize these tasks appropriately.": "Review and categorize these tasks appropriately.",
    "Urgent & Important": "Urgent & Important",
    "Do First - Crisis & emergencies": "Do First - Crisis & emergencies",
    "Not Urgent & Important": "Not Urgent & Important",
    "Schedule - Planning & development": "Schedule - Planning & development",
    "Urgent & Not Important": "Urgent & Not Important",
    "Delegate - Interruptions & distractions": "Delegate - Interruptions & distractions",
    "Not Urgent & Not Important": "Not Urgent & Not Important",
    "Eliminate - Time wasters": "Eliminate - Time wasters",
    "Task Priority Matrix": "Task Priority Matrix",
    "Created Date (Newest First)": "Created Date (Newest First)",
    "Created Date (Oldest First)": "Created Date (Oldest First)",
    "Toggle empty columns": "Toggle empty columns",
    "Failed to update task": "Failed to update task",
    "Loading more tasks...": "Loading more tasks...",
    "Quadrant Classification Method": "Quadrant Classification Method",
    "Choose how to classify tasks into quadrants": "Choose how to classify tasks into quadrants",
    "Use Priority Levels": "Use Priority Levels",
    "Use Tags": "Use Tags",
    "Urgent Priority Threshold": "Urgent Priority Threshold",
    "Tasks with priority >= this value are considered urgent (1-5)": "Tasks with priority >= this value are considered urgent (1-5)",
    "Important Priority Threshold": "Important Priority Threshold",
    "Tasks with priority >= this value are considered important (1-5)": "Tasks with priority >= this value are considered important (1-5)",
    "Urgent Tag": "Urgent Tag",
    "Tag to identify urgent tasks (e.g., #urgent, #fire)": "Tag to identify urgent tasks (e.g., #urgent, #fire)",
    "Important Tag": "Important Tag",
    "Tag to identify important tasks (e.g., #important, #key)": "Tag to identify important tasks (e.g., #important, #key)",
    "Urgent Threshold Days": "Urgent Threshold Days",
    "Tasks due within this many days are considered urgent": "Tasks due within this many days are considered urgent",
    "Auto Update Priority": "Auto Update Priority",
    "Automatically update task priority when moved between quadrants": "Automatically update task priority when moved between quadrants",
    "Auto Update Tags": "Auto Update Tags",
    "Automatically add/remove urgent/important tags when moved between quadrants": "Automatically add/remove urgent/important tags when moved between quadrants",
    "Hide Empty Quadrants": "Hide Empty Quadrants",
    "Hide quadrants that have no tasks": "Hide quadrants that have no tasks",
    "Select action type...": "Select action type...",
    "Delete task": "Delete task",
    "Delete Task": "Delete Task",
    "Delete task only": "Delete task only",
    "Delete task and all subtasks": "Delete task and all subtasks",
    "This task has {n} subtasks. How would you like to proceed?": "This task has {n} subtasks. How would you like to proceed?",
    "Are you sure you want to delete this task?": "Are you sure you want to delete this task?",
    "Task deleted": "Task deleted",
    "Failed to delete task": "Failed to delete task",
    "Keep task": "Keep task",
    "Complete related tasks": "Complete related tasks",
    "Move task": "Move task",
    "Archive task": "Archive task",
    "Duplicate task": "Duplicate task",
    "Enter task IDs separated by commas": "Enter task IDs separated by commas",
    "Comma-separated list of task IDs to complete when this task is completed": "Comma-separated list of task IDs to complete when this task is completed",
    "Path to target file": "Path to target file",
    "Target Section (Optional)": "Target Section (Optional)",
    "Section name in target file": "Section name in target file",
    "Archive File (Optional)": "Archive File (Optional)",
    "Default: Archive/Completed Tasks.md": "Default: Archive/Completed Tasks.md",
    "Archive Section (Optional)": "Archive Section (Optional)",
    "Default: Completed Tasks": "Default: Completed Tasks",
    "Target File (Optional)": "Target File (Optional)",
    "Default: same file": "Default: same file",
    "Preserve Metadata": "Preserve Metadata",
    "Keep completion dates and other metadata in the duplicated task": "Keep completion dates and other metadata in the duplicated task",
    "Overdue by": "Overdue by",
    "days": "days",
    "Due in": "Due in",
    "Refresh Statistics": "Refresh Statistics",
    "Manually refresh filter statistics to see current data": "Manually refresh filter statistics to see current data",
    "Refreshing...": "Refreshing...",
    "No filter data available": "No filter data available",
    "Error loading statistics": "Error loading statistics",
    "Target": "Target",
    "Configure checkbox status settings": "Configure checkbox status settings",
    "Auto complete parent checkbox": "Auto complete parent checkbox",
    "Toggle this to allow this plugin to auto complete parent checkbox when all child tasks are completed.": "Toggle this to allow this plugin to auto complete parent checkbox when all child tasks are completed.",
    "When some but not all child tasks are completed, mark the parent checkbox as 'In Progress'. Only works when 'Auto complete parent' is enabled.": "When some but not all child tasks are completed, mark the parent checkbox as 'In Progress'. Only works when 'Auto complete parent' is enabled.",
    "Select a predefined checkbox status collection or customize your own": "Select a predefined checkbox status collection or customize your own",
    "Checkbox Switcher": "Checkbox Switcher",
    "Enable checkbox status switcher": "Enable checkbox status switcher",
    "Replace default checkboxes with styled text marks that follow your checkbox status cycle when clicked.": "Replace default checkboxes with styled text marks that follow your checkbox status cycle when clicked.",
    "Make the text mark in source mode follow the checkbox status cycle when clicked.": "Make the text mark in source mode follow the checkbox status cycle when clicked.",
    "Automatically manage dates based on checkbox status changes": "Automatically manage dates based on checkbox status changes",
    "Toggle this to enable automatic date management when checkbox status changes. Dates will be added/removed based on your preferred metadata format (Tasks emoji format or Dataview format).": "Toggle this to enable automatic date management when checkbox status changes. Dates will be added/removed based on your preferred metadata format (Tasks emoji format or Dataview format).",
    "Default view mode": "Default view mode",
    "Choose the default display mode for all views. This affects how tasks are displayed when you first open a view or create a new view.": "Choose the default display mode for all views. This affects how tasks are displayed when you first open a view or create a new view.",
    "List View": "List View",
    "Tree View": "Tree View",
    "Global Filter Configuration": "Global Filter Configuration",
    "Configure global filter rules that apply to all Views by default. Individual Views can override these settings.": "Configure global filter rules that apply to all Views by default. Individual Views can override these settings.",
    "Cancelled Date": "Cancelled Date",
    "Depends On": "Depends On",
    "Task IDs separated by commas": "Task IDs separated by commas",
    "Task ID": "Task ID",
    "Unique task identifier": "Unique task identifier",
    "Action to execute when task is completed": "Action to execute when task is completed",
    "Comma-separated list of task IDs this task depends on": "Comma-separated list of task IDs this task depends on",
    "Unique identifier for this task": "Unique identifier for this task",
    "Configure On Completion Action": "Configure On Completion Action",
    "URL to the ICS/iCal file (supports http://, https://, and webcal:// protocols)": "URL to the ICS/iCal file (supports http://, https://, and webcal:// protocols)",
    "Task mark display style": "Task mark display style",
    "Choose how task marks are displayed: default checkboxes, custom text marks, or Task Genius icons.": "Choose how task marks are displayed: default checkboxes, custom text marks, or Task Genius icons.",
    "Default checkboxes": "Default checkboxes",
    "Custom text marks": "Custom text marks",
    "Task Genius icons": "Task Genius icons",
    "Time Parsing Settings": "Time Parsing Settings",
    "Enable Time Parsing": "Enable Time Parsing",
    "Automatically parse natural language time expressions in Quick Capture": "Automatically parse natural language time expressions in Quick Capture",
    "Automatically parse natural language time expressions and specific times (12:00, 1:30 PM, 12:00-13:00)": "Automatically parse natural language time expressions and specific times (12:00, 1:30 PM, 12:00-13:00)",
    "Remove Original Time Expressions": "Remove Original Time Expressions",
    "Remove parsed time expressions from the task text": "Remove parsed time expressions from the task text",
    "Supported Languages": "Supported Languages",
    "Currently supports English and Chinese time expressions. More languages may be added in future updates.": "Currently supports English and Chinese time expressions. More languages may be added in future updates.",
    "Date Keywords Configuration": "Date Keywords Configuration",
    "Start Date Keywords": "Start Date Keywords",
    "Keywords that indicate start dates (comma-separated)": "Keywords that indicate start dates (comma-separated)",
    "Due Date Keywords": "Due Date Keywords",
    "Keywords that indicate due dates (comma-separated)": "Keywords that indicate due dates (comma-separated)",
    "Scheduled Date Keywords": "Scheduled Date Keywords",
    "Keywords that indicate scheduled dates (comma-separated)": "Keywords that indicate scheduled dates (comma-separated)",
    "Time Format Configuration": "Time Format Configuration",
    "Preferred Time Format": "Preferred Time Format",
    "Default format preference for ambiguous time expressions": "Default format preference for ambiguous time expressions",
    "12-hour format (1:30 PM)": "12-hour format (1:30 PM)",
    "24-hour format (13:30)": "24-hour format (13:30)",
    "Default AM/PM Period": "Default AM/PM Period",
    "Default period when AM/PM is ambiguous in 12-hour format": "Default period when AM/PM is ambiguous in 12-hour format",
    "AM (Morning)": "AM (Morning)",
    "PM (Afternoon/Evening)": "PM (Afternoon/Evening)",
    "Midnight Crossing Behavior": "Midnight Crossing Behavior",
    "How to handle time ranges that cross midnight (e.g., 23:00-01:00)": "How to handle time ranges that cross midnight (e.g., 23:00-01:00)",
    "Next day (23:00 today - 01:00 tomorrow)": "Next day (23:00 today - 01:00 tomorrow)",
    "Same day (treat as error)": "Same day (treat as error)",
    "Show error": "Show error",
    "Time Range Separators": "Time Range Separators",
    "Characters used to separate time ranges (comma-separated)": "Characters used to separate time ranges (comma-separated)",
    "Configure...": "Configure...",
    "Collapse quick input": "Collapse quick input",
    "Expand quick input": "Expand quick input",
    "Set Priority": "Set Priority",
    "Clear Flags": "Clear Flags",
    "Filter by Priority": "Filter by Priority",
    "New Project": "New Project",
    "Archive Completed": "Archive Completed",
    "Project Statistics": "Project Statistics",
    "Manage Tags": "Manage Tags",
    "Time Parsing": "Time Parsing",
    "Date": "Date",
    "Day after tomorrow": "Day after tomorrow",
    "Next week": "Next week",
    "Next month": "Next month",
    "Choose date...": "Choose date...",
    "Set date": "Set date",
    "Set location": "Set location",
    "Add tags": "Add tags",
    "Fixed location": "Fixed location",
    "Enter your task...": "Enter your task...",
    "Add date (triggers ~)": "Add date (triggers ~)",
    "Set priority (triggers !)": "Set priority (triggers !)",
    "Target Location": "Target Location",
    "Set target location (triggers *)": "Set target location (triggers *)",
    "Add tags (triggers #)": "Add tags (triggers #)",
    "Minimal Mode": "Minimal Mode",
    "Enable minimal mode": "Enable minimal mode",
    "Enable simplified single-line quick capture with inline suggestions": "Enable simplified single-line quick capture with inline suggestions",
    "Suggest trigger character": "Suggest trigger character",
    "Character to trigger the suggestion menu": "Character to trigger the suggestion menu",
    "Highest Priority": "Highest Priority",
    "🔺 Highest priority task": "🔺 Highest priority task",
    "Highest priority set": "Highest priority set",
    "⏫ High priority task": "⏫ High priority task",
    "High priority set": "High priority set",
    "🔼 Medium priority task": "🔼 Medium priority task",
    "Medium priority set": "Medium priority set",
    "🔽 Low priority task": "🔽 Low priority task",
    "Low priority set": "Low priority set",
    "Lowest Priority": "Lowest Priority",
    "⏬ Lowest priority task": "⏬ Lowest priority task",
    "Lowest priority set": "Lowest priority set",
    "Set due date to today": "Set due date to today",
    "Due date set to today": "Due date set to today",
    "Set due date to tomorrow": "Set due date to tomorrow",
    "Due date set to tomorrow": "Due date set to tomorrow",
    "Pick Date": "Pick Date",
    "Open date picker": "Open date picker",
    "Set scheduled date": "Set scheduled date",
    "Scheduled date set": "Scheduled date set",
    "Save to inbox": "Save to inbox",
    "Target set to Inbox": "Target set to Inbox",
    "Daily Note": "Daily Note",
    "Save to today's daily note": "Save to today's daily note",
    "Target set to Daily Note": "Target set to Daily Note",
    "Current File": "Current File",
    "Save to current file": "Save to current file",
    "Target set to Current File": "Target set to Current File",
    "Choose File": "Choose File",
    "Open file picker": "Open file picker",
    "Save to recent file": "Save to recent file",
    "Target set to": "Target set to",
    "Important": "Important",
    "Tagged as important": "Tagged as important",
    "Urgent": "Urgent",
    "Tagged as urgent": "Tagged as urgent",
    "Work": "Work",
    "Work related task": "Work related task",
    "Tagged as work": "Tagged as work",
    "Personal": "Personal",
    "Personal task": "Personal task",
    "Tagged as personal": "Tagged as personal",
    "Choose Tag": "Choose Tag",
    "Open tag picker": "Open tag picker",
    "Existing tag": "Existing tag",
    "Tagged with": "Tagged with",
    "Toggle quick capture panel in editor (Globally)": "Toggle quick capture panel in editor (Globally)",
    "Selected Mode": "Selected Mode",
    "Features that will be enabled": "Features that will be enabled",
    "Don't worry! You can customize any of these settings later in the plugin settings.": "Don't worry! You can customize any of these settings later in the plugin settings.",
    "Available views": "Available views",
    "Key settings": "Key settings",
    "Progress bars": "Progress bars",
    "Enabled (both graphical and text)": "Enabled (both graphical and text)",
    "Task status switching": "Task status switching",
    "Workflow management": "Workflow management",
    "Reward system": "Reward system",
    "Habit tracking": "Habit tracking",
    "Performance optimization": "Performance optimization",
    "Configuration Changes": "Configuration Changes",
    "Your custom views will be preserved": "Your custom views will be preserved",
    "New views to be added": "New views to be added",
    "Existing views to be updated": "Existing views to be updated",
    "Feature changes": "Feature changes",
    "Only template settings will be applied. Your existing custom configurations will be preserved.": "Only template settings will be applied. Your existing custom configurations will be preserved.",
    "Congratulations!": "Congratulations!",
    "Task Genius has been configured with your selected preferences": "Task Genius has been configured with your selected preferences",
    "Your Configuration": "Your Configuration",
    "Quick Start Guide": "Quick Start Guide",
    "What's next?": "What's next?",
    "Open Task Genius view from the left ribbon": "Open Task Genius view from the left ribbon",
    "Create your first task using Quick Capture": "Create your first task using Quick Capture",
    "Explore different views to organize your tasks": "Explore different views to organize your tasks",
    "Customize settings anytime in plugin settings": "Customize settings anytime in plugin settings",
    "Helpful Resources": "Helpful Resources",
    "Complete guide to all features": "Complete guide to all features",
    "Community": "Community",
    "Get help and share tips": "Get help and share tips",
    "Customize Task Genius": "Customize Task Genius",
    "Click the Task Genius icon in the left sidebar": "Click the Task Genius icon in the left sidebar",
    "Start with the Inbox view to see all your tasks": "Start with the Inbox view to see all your tasks",
    "Use quick capture panel to quickly add your first task": "Use quick capture panel to quickly add your first task",
    "Try the Forecast view to see tasks by date": "Try the Forecast view to see tasks by date",
    "Open Task Genius and explore the available views": "Open Task Genius and explore the available views",
    "Set up a project using the Projects view": "Set up a project using the Projects view",
    "Try the Kanban board for visual task management": "Try the Kanban board for visual task management",
    "Use workflow stages to track task progress": "Use workflow stages to track task progress",
    "Explore all available views and their configurations": "Explore all available views and their configurations",
    "Set up complex workflows for your projects": "Set up complex workflows for your projects",
    "Configure habits and rewards to stay motivated": "Configure habits and rewards to stay motivated",
    "Integrate with external calendars and systems": "Integrate with external calendars and systems",
    "Open Task Genius from the left sidebar": "Open Task Genius from the left sidebar",
    "Create your first task": "Create your first task",
    "Explore the different views available": "Explore the different views available",
    "Customize settings as needed": "Customize settings as needed",
    "Thank you for your positive feedback!": "Thank you for your positive feedback!",
    "Thank you for your feedback. We'll continue improving the experience.": "Thank you for your feedback. We'll continue improving the experience.",
    "Share detailed feedback": "Share detailed feedback",
    "Skip onboarding": "Skip onboarding",
    "Back": "Back",
    "Welcome to Task Genius": "Welcome to Task Genius",
    "Transform your task management with advanced progress tracking and workflow automation": "Transform your task management with advanced progress tracking and workflow automation",
    "Progress Tracking": "Progress Tracking",
    "Visual progress bars and completion tracking for all your tasks": "Visual progress bars and completion tracking for all your tasks",
    "Organize tasks by projects with advanced filtering and sorting": "Organize tasks by projects with advanced filtering and sorting",
    "Workflow Automation": "Workflow Automation",
    "Automate task status changes and improve your productivity": "Automate task status changes and improve your productivity",
    "Multiple Views": "Multiple Views",
    "Kanban boards, calendars, Gantt charts, and more visualization options": "Kanban boards, calendars, Gantt charts, and more visualization options",
    "This quick setup will help you configure Task Genius based on your experience level and needs. You can always change these settings later.": "This quick setup will help you configure Task Genius based on your experience level and needs. You can always change these settings later.",
    "Choose Your Usage Mode": "Choose Your Usage Mode",
    "Select the configuration that best matches your task management experience": "Select the configuration that best matches your task management experience",
    "Configuration Preview": "Configuration Preview",
    "Review the settings that will be applied for your selected mode": "Review the settings that will be applied for your selected mode",
    "Include task creation guide": "Include task creation guide",
    "Show a quick tutorial on creating your first task": "Show a quick tutorial on creating your first task",
    "Create Your First Task": "Create Your First Task",
    "Learn how to create and format tasks in Task Genius": "Learn how to create and format tasks in Task Genius",
    "Setup Complete!": "Setup Complete!",
    "Task Genius is now configured and ready to use": "Task Genius is now configured and ready to use",
    "Start Using Task Genius": "Start Using Task Genius",
    "Task Genius Setup": "Task Genius Setup",
    "Skip setup": "Skip setup",
    "We noticed you've already configured Task Genius": "We noticed you've already configured Task Genius",
    "Your current configuration includes:": "Your current configuration includes:",
    "Would you like to run the setup wizard anyway?": "Would you like to run the setup wizard anyway?",
    "Yes, show me the setup wizard": "Yes, show me the setup wizard",
    "No, I'm happy with my current setup": "No, I'm happy with my current setup",
    "Learn the different ways to create and format tasks in Task Genius. You can use either emoji-based or Dataview-style syntax.": "Learn the different ways to create and format tasks in Task Genius. You can use either emoji-based or Dataview-style syntax.",
    "Task Format Examples": "Task Format Examples",
    "Basic Task": "Basic Task",
    "With Emoji Metadata": "With Emoji Metadata",
    "📅 = Due date, 🔺 = High priority, #project/ = Docs project tag": "📅 = Due date, 🔺 = High priority, #project/ = Docs project tag",
    "With Dataview Metadata": "With Dataview Metadata",
    "Mixed Format": "Mixed Format",
    "Combine emoji and dataview syntax as needed": "Combine emoji and dataview syntax as needed",
    "Task Status Markers": "Task Status Markers",
    "Not started": "Not started",
    "In progress": "In progress",
    "Common Metadata Symbols": "Common Metadata Symbols",
    "Due date": "Due date",
    "Start date": "Start date",
    "Scheduled date": "Scheduled date",
    "Higher priority": "Higher priority",
    "Lower priority": "Lower priority",
    "Recurring task": "Recurring task",
    "Project/tag": "Project/tag",
    "Use quick capture panel to quickly capture tasks from anywhere in Obsidian.": "Use quick capture panel to quickly capture tasks from anywhere in Obsidian.",
    "Try Quick Capture": "Try Quick Capture",
    "Quick capture is now enabled in your configuration!": "Quick capture is now enabled in your configuration!",
    "Failed to open quick capture. Please try again later.": "Failed to open quick capture. Please try again later.",
    "Try It Yourself": "Try It Yourself",
    "Practice creating a task with the format you prefer:": "Practice creating a task with the format you prefer:",
    "Practice Task": "Practice Task",
    "Enter a task using any of the formats shown above": "Enter a task using any of the formats shown above",
    "- [ ] Your task here": "- [ ] Your task here",
    "Validate Task": "Validate Task",
    "Please enter a task to validate": "Please enter a task to validate",
    "This doesn't look like a valid task. Tasks should start with '- [ ]'": "This doesn't look like a valid task. Tasks should start with '- [ ]'",
    "Valid task format!": "Valid task format!",
    "Emoji metadata": "Emoji metadata",
    "Dataview metadata": "Dataview metadata",
    "Project tags": "Project tags",
    "Detected features: ": "Detected features: ",
    "Onboarding": "Onboarding",
    "Restart the welcome guide and setup wizard": "Restart the welcome guide and setup wizard",
    "Restart Onboarding": "Restart Onboarding",
    "Copy": "Copy",
    "Copied!": "Copied!",
    "MCP integration is only available on desktop": "MCP integration is only available on desktop",
    "MCP Server Status": "MCP Server Status",
    "Enable MCP Server": "Enable MCP Server",
    "Start the MCP server to allow external tool connections": "Start the MCP server to allow external tool connections",
    "WARNING: Enabling the MCP server will allow external AI tools and applications to access and modify your task data. This includes:\n\n• Reading all tasks and their details\n• Creating new tasks\n• Updating existing tasks\n• Deleting tasks\n• Accessing task metadata and properties\n\nOnly enable this if you trust the applications that will connect to the MCP server. Make sure to keep your authentication token secure.\n\nDo you want to continue?": "WARNING: Enabling the MCP server will allow external AI tools and applications to access and modify your task data. This includes:\n\n• Reading all tasks and their details\n• Creating new tasks\n• Updating existing tasks\n• Deleting tasks\n• Accessing task metadata and properties\n\nOnly enable this if you trust the applications that will connect to the MCP server. Make sure to keep your authentication token secure.\n\nDo you want to continue?",
    "MCP Server enabled. Keep your authentication token secure!": "MCP Server enabled. Keep your authentication token secure!",
    "Server Configuration": "Server Configuration",
    "Host": "Host",
    "Server host address. Use 127.0.0.1 for local only, 0.0.0.0 for all interfaces": "Server host address. Use 127.0.0.1 for local only, 0.0.0.0 for all interfaces",
    "Security Warning": "Security Warning",
    "⚠️ **WARNING**: Switching to 0.0.0.0 will make the MCP server accessible from external networks.\n\nThis could expose your Obsidian data to:\n- Other devices on your local network\n- Potentially the internet if your firewall is misconfigured\n\n**Only proceed if you:**\n- Understand the security implications\n- Have properly configured your firewall\n- Need external access for legitimate reasons\n\nAre you sure you want to continue?": "⚠️ **WARNING**: Switching to 0.0.0.0 will make the MCP server accessible from external networks.\n\nThis could expose your Obsidian data to:\n- Other devices on your local network\n- Potentially the internet if your firewall is misconfigured\n\n**Only proceed if you:**\n- Understand the security implications\n- Have properly configured your firewall\n- Need external access for legitimate reasons\n\nAre you sure you want to continue?",
    "Yes, I understand the risks": "Yes, I understand the risks",
    "Host changed to 0.0.0.0. Server is now accessible from external networks.": "Host changed to 0.0.0.0. Server is now accessible from external networks.",
    "Port": "Port",
    "Server port number (default: 7777)": "Server port number (default: 7777)",
    "Authentication": "Authentication",
    "Authentication Token": "Authentication Token",
    "Bearer token for authenticating MCP requests (keep this secret)": "Bearer token for authenticating MCP requests (keep this secret)",
    "Show": "Show",
    "Hide": "Hide",
    "Token copied to clipboard": "Token copied to clipboard",
    "Regenerate": "Regenerate",
    "New token generated": "New token generated",
    "Advanced Settings": "Advanced Settings",
    "Enable CORS": "Enable CORS",
    "Allow cross-origin requests (required for web clients)": "Allow cross-origin requests (required for web clients)",
    "Log Level": "Log Level",
    "Logging verbosity for debugging": "Logging verbosity for debugging",
    "Error": "Error",
    "Warning": "Warning",
    "Info": "Info",
    "Debug": "Debug",
    "Server Actions": "Server Actions",
    "Test Connection": "Test Connection",
    "Test the MCP server connection": "Test the MCP server connection",
    "Test": "Test",
    "Testing...": "Testing...",
    "Connection test successful! MCP server is working.": "Connection test successful! MCP server is working.",
    "Connection test failed: ": "Connection test failed: ",
    "Restart Server": "Restart Server",
    "Stop and restart the MCP server": "Stop and restart the MCP server",
    "Restart": "Restart",
    "MCP server restarted": "MCP server restarted",
    "Failed to restart server: ": "Failed to restart server: ",
    "Use Next Available Port": "Use Next Available Port",
    "Port updated to ": "Port updated to ",
    "No available port found in range": "No available port found in range",
    "Client Configuration": "Client Configuration",
    "Authentication Method": "Authentication Method",
    "Choose the authentication method for client configurations": "Choose the authentication method for client configurations",
    "Method B: Combined Bearer (Recommended)": "Method B: Combined Bearer (Recommended)",
    "Method A: Custom Headers": "Method A: Custom Headers",
    "Supported Authentication Methods:": "Supported Authentication Methods:",
    "API Documentation": "API Documentation",
    "Server Endpoint": "Server Endpoint",
    "Copy URL": "Copy URL",
    "Available Tools": "Available Tools",
    "Loading tools...": "Loading tools...",
    "No tools available": "No tools available",
    "Failed to load tools. Is the MCP server running?": "Failed to load tools. Is the MCP server running?",
    "Example Request": "Example Request",
    "MCP Server not initialized": "MCP Server not initialized",
    "Running": "Running",
    "Stopped": "Stopped",
    "Uptime": "Uptime",
    "Requests": "Requests",
    "Toggle this to enable Org-mode style quick capture panel.": "Toggle this to enable Org-mode style quick capture panel.",
    "Auto-add task prefix": "Auto-add task prefix",
    "Automatically add task checkbox prefix to captured content": "Automatically add task checkbox prefix to captured content",
    "Task prefix format": "Task prefix format",
    "The prefix to add before captured content (e.g., '- [ ]' for task, '- ' for list item)": "The prefix to add before captured content (e.g., '- [ ]' for task, '- ' for list item)",
    "Search settings": "Search settings",
    "Search results": "Search results",
    "Project Tree View Settings": "Project Tree View Settings",
    "Configure how projects are displayed in tree view.": "Configure how projects are displayed in tree view.",
    "Default project view mode": "Default project view mode",
    "Choose whether to display projects as a flat list or hierarchical tree by default.": "Choose whether to display projects as a flat list or hierarchical tree by default.",
    "Auto-expand project tree": "Auto-expand project tree",
    "Automatically expand all project nodes when opening the project view in tree mode.": "Automatically expand all project nodes when opening the project view in tree mode.",
    "Show empty project folders": "Show empty project folders",
    "Display project folders even if they don't contain any tasks.": "Display project folders even if they don't contain any tasks.",
    "Project path separator": "Project path separator",
    "Character used to separate project hierarchy levels (e.g., '/' in 'Project/SubProject').": "Character used to separate project hierarchy levels (e.g., '/' in 'Project/SubProject').",
    "Enable dynamic metadata positioning": "Enable dynamic metadata positioning",
    "Intelligently position task metadata. When enabled, metadata appears on the same line as short tasks and below long tasks. When disabled, metadata always appears below the task content.": "Intelligently position task metadata. When enabled, metadata appears on the same line as short tasks and below long tasks. When disabled, metadata always appears below the task content.",
    "Toggle tree/list view": "Toggle tree/list view",
    "Clear date": "Clear date",
    "Clear priority": "Clear priority",
    "Clear all tags": "Clear all tags",
    "🔺 Highest priority": "🔺 Highest priority",
    "⏫ High priority": "⏫ High priority",
    "🔼 Medium priority": "🔼 Medium priority",
    "🔽 Low priority": "🔽 Low priority",
    "⏬ Lowest priority": "⏬ Lowest priority",
    "Fixed File": "Fixed File",
    "Save to Inbox.md": "Save to Inbox.md",
    "Open Task Genius Setup": "Open Task Genius Setup",
    "MCP Integration": "MCP Integration",
    "Beginner": "Beginner",
    "Basic task management with essential features": "Basic task management with essential features",
    "Basic progress bars": "Basic progress bars",
    "Essential views (Inbox, Forecast, Projects)": "Essential views (Inbox, Forecast, Projects)",
    "Simple task status tracking": "Simple task status tracking",
    "Quick task capture": "Quick task capture",
    "Date picker functionality": "Date picker functionality",
    "Project management with enhanced workflows": "Project management with enhanced workflows",
    "Full progress bar customization": "Full progress bar customization",
    "Extended views (Kanban, Calendar, Table)": "Extended views (Kanban, Calendar, Table)",
    "Project management features": "Project management features",
    "Basic workflow automation": "Basic workflow automation",
    "Advanced filtering and sorting": "Advanced filtering and sorting",
    "Power User": "Power User",
    "Full-featured experience with all capabilities": "Full-featured experience with all capabilities",
    "All views and advanced configurations": "All views and advanced configurations",
    "Complex workflow definitions": "Complex workflow definitions",
    "Reward and habit tracking systems": "Reward and habit tracking systems",
    "Performance optimizations": "Performance optimizations",
    "Advanced integrations": "Advanced integrations",
    "Experimental features": "Experimental features",
    "Timeline and calendar sync": "Timeline and calendar sync",
    "Not configured": "Not configured",
    "Custom": "Custom",
    "Custom views created": "Custom views created",
    "Progress bar settings modified": "Progress bar settings modified",
    "Task status settings configured": "Task status settings configured",
    "Quick capture configured": "Quick capture configured",
    "Workflow settings enabled": "Workflow settings enabled",
    "Advanced features enabled": "Advanced features enabled",
    "File parsing customized": "File parsing customized",
    // Settings Migration
    "Settings Migration Required": "Settings Migration Required",
    "Task Genius has detected duplicate settings that can cause confusion. ": "Task Genius has detected duplicate settings that can cause confusion. ",
    "We recommend migrating to the new unified FileSource system for better organization.": "We recommend migrating to the new unified FileSource system for better organization.",
    "Auto-Migrate Settings": "Auto-Migrate Settings",
    "Settings migrated successfully! ": "Settings migrated successfully! ",
    " changes applied.": " changes applied.",
    "Migration failed. Please check console for details.": "Migration failed. Please check console for details.",
    "Learn More": "Learn More",
    // FileSource
    "FileSource": "FileSource",
    "FileSource Configuration": "FileSource Configuration",
    "Go to FileSource Settings": "Go to FileSource Settings",
    "Note: This setting will be deprecated in favor of the unified FileSource system.": "Note: This setting will be deprecated in favor of the unified FileSource system.",
    "Note: FileSource settings have been moved to a dedicated tab for better organization and to avoid duplication with file metadata parsing.": "Note: FileSource settings have been moved to a dedicated tab for better organization and to avoid duplication with file metadata parsing.",
    "Configure Ignore Headings": "Configure Ignore Headings",
    "Configure Focus Headings": "Configure Focus Headings",
    "{{count}} heading(s) configured": "{{count}} heading(s) configured",
    "Add headings to ignore. Tasks under these headings will be excluded from indexing. Examples: '## Project', '## Inbox', '# Archive'": "Add headings to ignore. Tasks under these headings will be excluded from indexing. Examples: '## Project', '## Inbox', '# Archive'",
    "Add headings to focus on. Only tasks under these headings will be included in indexing. Examples: '## Project', '## Inbox', '# Tasks'": "Add headings to focus on. Only tasks under these headings will be included in indexing. Examples: '## Project', '## Inbox', '# Tasks'",
    "Enter heading (e.g., ## Inbox)": "Enter heading (e.g., ## Inbox)",
    "Enter heading (e.g., ## Tasks)": "Enter heading (e.g., ## Tasks)",
    "No items configured. Click 'Add Item' to get started.": "No items configured. Click 'Add Item' to get started.",
    "Enter value": "Enter value",
    "Delete item": "Delete item",
    "Delete this item": "Delete this item",
    "Add Item": "Add Item"
};
export default translations;
//# sourceMappingURL=data:application/json;base64,