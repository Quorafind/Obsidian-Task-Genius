// Mock for @codemirror/view
export class EditorView {
    constructor(config = {}) {
        this.state = config.state || null;
    }
    dispatch(transaction) {
        // Mock implementation
    }
}
export class WidgetType {
    eq(other) {
        return false;
    }
    toDOM() {
        return document.createElement("div");
    }
    ignoreEvent(event) {
        return false;
    }
}
export class ViewPlugin {
    static fromClass(cls, spec) {
        return {
            extension: true,
            cls,
            spec,
        };
    }
}
export class ViewUpdate {
    constructor(view) {
        this.docChanged = false;
        this.selectionSet = false;
        this.viewportChanged = false;
        this.view = view;
    }
}
export class Decoration {
    static widget(spec) {
        return {
            spec,
            range: (from, to) => ({ from, to, spec }),
        };
    }
    static replace(spec) {
        return {
            spec,
            range: (from, to) => ({ from, to, spec }),
        };
    }
    static set(decorations) {
        return {
            size: decorations.length,
            update: () => Decoration.none,
        };
    }
}
Decoration.none = {
    size: 0,
    update: () => Decoration.none,
};
export class DecorationSet {
    constructor() {
        this.size = 0;
    }
    update(spec) {
        return this;
    }
}
DecorationSet.empty = Decoration.none;
export class MatchDecorator {
    constructor(spec) {
        // Mock implementation
    }
    createDeco(view) {
        return Decoration.none;
    }
    updateDeco(update, decorations) {
        return decorations;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZW1pcnJvci12aWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29kZW1pcnJvci12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDRCQUE0QjtBQUU1QixNQUFNLE9BQU8sVUFBVTtJQUd0QixZQUFZLFNBQWMsRUFBRTtRQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDO0lBQ25DLENBQUM7SUFFRCxRQUFRLENBQUMsV0FBZ0I7UUFDeEIsc0JBQXNCO0lBQ3ZCLENBQUM7Q0FDRDtBQUVELE1BQU0sT0FBTyxVQUFVO0lBQ3RCLEVBQUUsQ0FBQyxLQUFVO1FBQ1osT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQsS0FBSztRQUNKLE9BQU8sUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQVk7UUFDdkIsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0NBQ0Q7QUFFRCxNQUFNLE9BQU8sVUFBVTtJQUN0QixNQUFNLENBQUMsU0FBUyxDQUFDLEdBQVEsRUFBRSxJQUFVO1FBQ3BDLE9BQU87WUFDTixTQUFTLEVBQUUsSUFBSTtZQUNmLEdBQUc7WUFDSCxJQUFJO1NBQ0osQ0FBQztJQUNILENBQUM7Q0FDRDtBQUVELE1BQU0sT0FBTyxVQUFVO0lBTXRCLFlBQVksSUFBZ0I7UUFMNUIsZUFBVSxHQUFZLEtBQUssQ0FBQztRQUM1QixpQkFBWSxHQUFZLEtBQUssQ0FBQztRQUM5QixvQkFBZSxHQUFZLEtBQUssQ0FBQztRQUloQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNsQixDQUFDO0NBQ0Q7QUFFRCxNQUFNLE9BQU8sVUFBVTtJQU10QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQVM7UUFDdEIsT0FBTztZQUNOLElBQUk7WUFDSixLQUFLLEVBQUUsQ0FBQyxJQUFZLEVBQUUsRUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUN6RCxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBUztRQUN2QixPQUFPO1lBQ04sSUFBSTtZQUNKLEtBQUssRUFBRSxDQUFDLElBQVksRUFBRSxFQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ3pELENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFrQjtRQUM1QixPQUFPO1lBQ04sSUFBSSxFQUFFLFdBQVcsQ0FBQyxNQUFNO1lBQ3hCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSTtTQUM3QixDQUFDO0lBQ0gsQ0FBQzs7QUF4Qk0sZUFBSSxHQUFHO0lBQ2IsSUFBSSxFQUFFLENBQUM7SUFDUCxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUk7Q0FDN0IsQ0FBQztBQXdCSCxNQUFNLE9BQU8sYUFBYTtJQUExQjtRQUVDLFNBQUksR0FBVyxDQUFDLENBQUM7SUFLbEIsQ0FBQztJQUhBLE1BQU0sQ0FBQyxJQUFTO1FBQ2YsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDOztBQUxNLG1CQUFLLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztBQVFoQyxNQUFNLE9BQU8sY0FBYztJQUMxQixZQUFZLElBQVM7UUFDcEIsc0JBQXNCO0lBQ3ZCLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBZ0I7UUFDMUIsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxVQUFVLENBQUMsTUFBa0IsRUFBRSxXQUEwQjtRQUN4RCxPQUFPLFdBQVcsQ0FBQztJQUNwQixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2NrIGZvciBAY29kZW1pcnJvci92aWV3XHJcblxyXG5leHBvcnQgY2xhc3MgRWRpdG9yVmlldyB7XHJcblx0c3RhdGU6IGFueTtcclxuXHJcblx0Y29uc3RydWN0b3IoY29uZmlnOiBhbnkgPSB7fSkge1xyXG5cdFx0dGhpcy5zdGF0ZSA9IGNvbmZpZy5zdGF0ZSB8fCBudWxsO1xyXG5cdH1cclxuXHJcblx0ZGlzcGF0Y2godHJhbnNhY3Rpb246IGFueSkge1xyXG5cdFx0Ly8gTW9jayBpbXBsZW1lbnRhdGlvblxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdpZGdldFR5cGUge1xyXG5cdGVxKG90aGVyOiBhbnkpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdHRvRE9NKCk6IEhUTUxFbGVtZW50IHtcclxuXHRcdHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cdH1cclxuXHJcblx0aWdub3JlRXZlbnQoZXZlbnQ6IEV2ZW50KTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVmlld1BsdWdpbiB7XHJcblx0c3RhdGljIGZyb21DbGFzcyhjbHM6IGFueSwgc3BlYz86IGFueSkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0ZXh0ZW5zaW9uOiB0cnVlLFxyXG5cdFx0XHRjbHMsXHJcblx0XHRcdHNwZWMsXHJcblx0XHR9O1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFZpZXdVcGRhdGUge1xyXG5cdGRvY0NoYW5nZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRzZWxlY3Rpb25TZXQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHR2aWV3cG9ydENoYW5nZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHR2aWV3OiBFZGl0b3JWaWV3O1xyXG5cclxuXHRjb25zdHJ1Y3Rvcih2aWV3OiBFZGl0b3JWaWV3KSB7XHJcblx0XHR0aGlzLnZpZXcgPSB2aWV3O1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERlY29yYXRpb24ge1xyXG5cdHN0YXRpYyBub25lID0ge1xyXG5cdFx0c2l6ZTogMCxcclxuXHRcdHVwZGF0ZTogKCkgPT4gRGVjb3JhdGlvbi5ub25lLFxyXG5cdH07XHJcblxyXG5cdHN0YXRpYyB3aWRnZXQoc3BlYzogYW55KSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzcGVjLFxyXG5cdFx0XHRyYW5nZTogKGZyb206IG51bWJlciwgdG86IG51bWJlcikgPT4gKHsgZnJvbSwgdG8sIHNwZWMgfSksXHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHJlcGxhY2Uoc3BlYzogYW55KSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzcGVjLFxyXG5cdFx0XHRyYW5nZTogKGZyb206IG51bWJlciwgdG86IG51bWJlcikgPT4gKHsgZnJvbSwgdG8sIHNwZWMgfSksXHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHNldChkZWNvcmF0aW9uczogYW55W10pIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHNpemU6IGRlY29yYXRpb25zLmxlbmd0aCxcclxuXHRcdFx0dXBkYXRlOiAoKSA9PiBEZWNvcmF0aW9uLm5vbmUsXHJcblx0XHR9O1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERlY29yYXRpb25TZXQge1xyXG5cdHN0YXRpYyBlbXB0eSA9IERlY29yYXRpb24ubm9uZTtcclxuXHRzaXplOiBudW1iZXIgPSAwO1xyXG5cclxuXHR1cGRhdGUoc3BlYzogYW55KSB7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNYXRjaERlY29yYXRvciB7XHJcblx0Y29uc3RydWN0b3Ioc3BlYzogYW55KSB7XHJcblx0XHQvLyBNb2NrIGltcGxlbWVudGF0aW9uXHJcblx0fVxyXG5cclxuXHRjcmVhdGVEZWNvKHZpZXc6IEVkaXRvclZpZXcpIHtcclxuXHRcdHJldHVybiBEZWNvcmF0aW9uLm5vbmU7XHJcblx0fVxyXG5cclxuXHR1cGRhdGVEZWNvKHVwZGF0ZTogVmlld1VwZGF0ZSwgZGVjb3JhdGlvbnM6IERlY29yYXRpb25TZXQpIHtcclxuXHRcdHJldHVybiBkZWNvcmF0aW9ucztcclxuXHR9XHJcbn1cclxuIl19