import { Component } from "obsidian";
export class CalendarViewComponent extends Component {
    constructor(plugin, app, containerEl, events, options = {} // Provide default empty options
    ) {
        super(); // Call the base class constructor
        this.containerEl = containerEl;
        this.events = events;
        this.options = options;
    }
    // Example common method (can be implemented here or left abstract)
    handleEventClick(ev, event) {
        if (this.options.onEventClick) {
            this.options.onEventClick(ev, event);
        }
    }
    // Lifecycle methods from Component might be overridden here or in subclasses
    onload() {
        super.onload();
        this.render(); // Initial render on load
    }
    onunload() {
        // Clean up resources, remove event listeners, etc.
        this.containerEl.empty();
        super.onunload();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS12aWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmFzZS12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBTyxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUM7QUE2QjFDLE1BQU0sT0FBZ0IscUJBQXNCLFNBQVEsU0FBUztJQUs1RCxZQUNDLE1BQTZCLEVBQzdCLEdBQVEsRUFDUixXQUF3QixFQUN4QixNQUF1QixFQUN2QixVQUErQixFQUFFLENBQUMsZ0NBQWdDOztRQUVsRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLGtDQUFrQztRQUMzQyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBTUQsbUVBQW1FO0lBQ3pELGdCQUFnQixDQUFDLEVBQWMsRUFBRSxLQUFvQjtRQUM5RCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNyQztJQUNGLENBQUM7SUFFRCw2RUFBNkU7SUFDN0UsTUFBTTtRQUNMLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLHlCQUF5QjtJQUN6QyxDQUFDO0lBRUQsUUFBUTtRQUNQLG1EQUFtRDtRQUNuRCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3pCLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAsIENvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBDYWxlbmRhckV2ZW50IH0gZnJvbSAnQC9jb21wb25lbnRzL2ZlYXR1cmVzL2NhbGVuZGFyL2luZGV4JztcclxuaW1wb3J0IFRhc2tQcm9ncmVzc0JhclBsdWdpbiBmcm9tIFwiQC9pbmRleFwiO1xyXG5cclxuaW50ZXJmYWNlIEV2ZW50TWFwIHtcclxuXHRvbkV2ZW50Q2xpY2s6IChldjogTW91c2VFdmVudCwgZXZlbnQ6IENhbGVuZGFyRXZlbnQpID0+IHZvaWQ7XHJcblx0b25FdmVudEhvdmVyOiAoZXY6IE1vdXNlRXZlbnQsIGV2ZW50OiBDYWxlbmRhckV2ZW50KSA9PiB2b2lkO1xyXG5cdG9uRGF5Q2xpY2s6IChcclxuXHRcdGV2OiBNb3VzZUV2ZW50LFxyXG5cdFx0ZGF5OiBudW1iZXIsXHJcblx0XHRvcHRpb25zOiB7XHJcblx0XHRcdGJlaGF2aW9yOiBcIm9wZW4tcXVpY2stY2FwdHVyZVwiIHwgXCJvcGVuLXRhc2stdmlld1wiO1xyXG5cdFx0fVxyXG5cdCkgPT4gdm9pZDtcclxuXHRvbkRheUhvdmVyOiAoZXY6IE1vdXNlRXZlbnQsIGRheTogbnVtYmVyKSA9PiB2b2lkO1xyXG5cdG9uTW9udGhDbGljazogKGV2OiBNb3VzZUV2ZW50LCBtb250aDogbnVtYmVyKSA9PiB2b2lkO1xyXG5cdG9uTW9udGhIb3ZlcjogKGV2OiBNb3VzZUV2ZW50LCBtb250aDogbnVtYmVyKSA9PiB2b2lkO1xyXG5cdG9uWWVhckNsaWNrOiAoZXY6IE1vdXNlRXZlbnQsIHllYXI6IG51bWJlcikgPT4gdm9pZDtcclxuXHRvblllYXJIb3ZlcjogKGV2OiBNb3VzZUV2ZW50LCB5ZWFyOiBudW1iZXIpID0+IHZvaWQ7XHJcblx0b25FdmVudENvbnRleHRNZW51OiAoZXY6IE1vdXNlRXZlbnQsIGV2ZW50OiBDYWxlbmRhckV2ZW50KSA9PiB2b2lkO1xyXG5cdG9uRXZlbnRDb21wbGV0ZTogKGV2OiBNb3VzZUV2ZW50LCBldmVudDogQ2FsZW5kYXJFdmVudCkgPT4gdm9pZDtcclxufVxyXG5cclxuLy8gQ29tYmluZSBldmVudCBoYW5kbGVycyBpbnRvIGEgc2luZ2xlIG9wdGlvbnMgb2JqZWN0LCBtYWtpbmcgdGhlbSBvcHRpb25hbFxyXG5leHBvcnQgaW50ZXJmYWNlIENhbGVuZGFyVmlld09wdGlvbnMgZXh0ZW5kcyBQYXJ0aWFsPEV2ZW50TWFwPiB7XHJcblx0Ly8gQWRkIG90aGVyIGNvbW1vbiB2aWV3IG9wdGlvbnMgaGVyZSBpZiBuZWVkZWRcclxuXHRnZXRCYWRnZUV2ZW50c0ZvckRhdGU/OiAoZGF0ZTogRGF0ZSkgPT4gQ2FsZW5kYXJFdmVudFtdO1xyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2FsZW5kYXJWaWV3Q29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHRwcm90ZWN0ZWQgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50O1xyXG5cdHByb3RlY3RlZCBldmVudHM6IENhbGVuZGFyRXZlbnRbXTtcclxuXHRwcm90ZWN0ZWQgb3B0aW9uczogQ2FsZW5kYXJWaWV3T3B0aW9ucztcclxuXHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHRwbHVnaW46IFRhc2tQcm9ncmVzc0JhclBsdWdpbixcclxuXHRcdGFwcDogQXBwLFxyXG5cdFx0Y29udGFpbmVyRWw6IEhUTUxFbGVtZW50LFxyXG5cdFx0ZXZlbnRzOiBDYWxlbmRhckV2ZW50W10sXHJcblx0XHRvcHRpb25zOiBDYWxlbmRhclZpZXdPcHRpb25zID0ge30gLy8gUHJvdmlkZSBkZWZhdWx0IGVtcHR5IG9wdGlvbnNcclxuXHQpIHtcclxuXHRcdHN1cGVyKCk7IC8vIENhbGwgdGhlIGJhc2UgY2xhc3MgY29uc3RydWN0b3JcclxuXHRcdHRoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcclxuXHRcdHRoaXMuZXZlbnRzID0gZXZlbnRzO1xyXG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHR9XHJcblxyXG5cdC8vIEFic3RyYWN0IG1ldGhvZCBmb3IgcmVuZGVyaW5nIHRoZSBzcGVjaWZpYyB2aWV3IGNvbnRlbnRcclxuXHQvLyBTdWJjbGFzc2VzIChNb250aFZpZXcsIFdlZWtWaWV3LCBEYXlWaWV3KSBtdXN0IGltcGxlbWVudCB0aGlzXHJcblx0YWJzdHJhY3QgcmVuZGVyKCk6IHZvaWQ7XHJcblxyXG5cdC8vIEV4YW1wbGUgY29tbW9uIG1ldGhvZCAoY2FuIGJlIGltcGxlbWVudGVkIGhlcmUgb3IgbGVmdCBhYnN0cmFjdClcclxuXHRwcm90ZWN0ZWQgaGFuZGxlRXZlbnRDbGljayhldjogTW91c2VFdmVudCwgZXZlbnQ6IENhbGVuZGFyRXZlbnQpOiB2b2lkIHtcclxuXHRcdGlmICh0aGlzLm9wdGlvbnMub25FdmVudENsaWNrKSB7XHJcblx0XHRcdHRoaXMub3B0aW9ucy5vbkV2ZW50Q2xpY2soZXYsIGV2ZW50KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIExpZmVjeWNsZSBtZXRob2RzIGZyb20gQ29tcG9uZW50IG1pZ2h0IGJlIG92ZXJyaWRkZW4gaGVyZSBvciBpbiBzdWJjbGFzc2VzXHJcblx0b25sb2FkKCk6IHZvaWQge1xyXG5cdFx0c3VwZXIub25sb2FkKCk7XHJcblx0XHR0aGlzLnJlbmRlcigpOyAvLyBJbml0aWFsIHJlbmRlciBvbiBsb2FkXHJcblx0fVxyXG5cclxuXHRvbnVubG9hZCgpOiB2b2lkIHtcclxuXHRcdC8vIENsZWFuIHVwIHJlc291cmNlcywgcmVtb3ZlIGV2ZW50IGxpc3RlbmVycywgZXRjLlxyXG5cdFx0dGhpcy5jb250YWluZXJFbC5lbXB0eSgpO1xyXG5cdFx0c3VwZXIub251bmxvYWQoKTtcclxuXHR9XHJcbn1cclxuIl19