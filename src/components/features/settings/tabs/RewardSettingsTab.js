import { __awaiter } from "tslib";
import { Setting, debounce, Notice } from "obsidian";
import { t } from "src/translations/manager";
import { ImageSuggest } from "@/components/ui/inputs/AutoComplete";
export function renderRewardSettingsTab(settingTab, containerEl) {
    new Setting(containerEl)
        .setName(t("Rewards"))
        .setDesc(t("Configure rewards for completing tasks. Define items, their occurrence chances, and conditions."))
        .setHeading();
    // --- Enable Rewards ---
    new Setting(containerEl)
        .setName(t("Enable rewards"))
        .setDesc(t("Toggle to enable or disable the reward system."))
        .addToggle((toggle) => toggle
        .setValue(settingTab.plugin.settings.rewards.enableRewards)
        .onChange((value) => __awaiter(this, void 0, void 0, function* () {
        settingTab.plugin.settings.rewards.enableRewards = value;
        settingTab.applySettingsUpdate();
        setTimeout(() => {
            settingTab.display();
        }, 200);
    })));
    if (!settingTab.plugin.settings.rewards.enableRewards) {
        return; // Don't render the rest if rewards are disabled
    }
    // --- Reward Display Type ---
    new Setting(containerEl)
        .setName(t("Reward display type"))
        .setDesc(t("Choose how rewards are displayed when earned."))
        .addDropdown((dropdown) => {
        dropdown
            .addOption("modal", t("Modal dialog"))
            .addOption("notice", t("Notice (Auto-accept)"))
            .setValue(settingTab.plugin.settings.rewards.showRewardType || "modal")
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            settingTab.plugin.settings.rewards.showRewardType = value;
            settingTab.applySettingsUpdate();
        }));
    });
    // --- Occurrence Levels ---
    new Setting(containerEl)
        .setName(t("Occurrence levels"))
        .setDesc(t("Define different levels of reward rarity and their probability."))
        .setHeading();
    const occurrenceLevelsContainer = containerEl.createDiv({
        cls: "rewards-levels-container",
    });
    const debounceChanceUpdate = debounce((text, level, value, index) => {
        const chance = parseInt(value, 10);
        if (!isNaN(chance) && chance >= 0 && chance <= 100) {
            settingTab.plugin.settings.rewards.occurrenceLevels[index].chance = chance;
            settingTab.applySettingsUpdate();
        }
        else {
            // Optional: Provide feedback for invalid input
            new Notice(t("Chance must be between 0 and 100."));
            text.setValue(level.chance.toString()); // Revert
        }
    }, 1000);
    const debounceNameUpdate = debounce((value, index) => {
        settingTab.plugin.settings.rewards.occurrenceLevels[index].name =
            value.trim();
        settingTab.applySettingsUpdate();
    }, 1000);
    settingTab.plugin.settings.rewards.occurrenceLevels.forEach((level, index) => {
        const levelSetting = new Setting(occurrenceLevelsContainer)
            .setClass("rewards-level-row")
            .addText((text) => text
            .setPlaceholder(t("Level Name (e.g., common)"))
            .setValue(level.name)
            .onChange((value) => {
            debounceNameUpdate(value, index);
        }))
            .addText((text) => text
            .setPlaceholder(t("Chance (%)"))
            .setValue(level.chance.toString())
            .onChange((value) => {
            debounceChanceUpdate(text, level, value, index);
        }))
            .addButton((button) => button
            .setIcon("trash")
            .setTooltip(t("Delete Level"))
            .setClass("mod-warning")
            .onClick(() => {
            settingTab.plugin.settings.rewards.occurrenceLevels.splice(index, 1);
            settingTab.applySettingsUpdate();
            setTimeout(() => {
                settingTab.display();
            }, 200);
        }));
    });
    new Setting(occurrenceLevelsContainer).addButton((button) => button
        .setButtonText(t("Add occurrence level"))
        .setCta()
        .onClick(() => {
        const newLevel = {
            name: t("New Level"),
            chance: 0,
        };
        settingTab.plugin.settings.rewards.occurrenceLevels.push(newLevel);
        settingTab.applySettingsUpdate();
        setTimeout(() => {
            settingTab.display();
        }, 200);
    }));
    // --- Reward Items ---
    new Setting(containerEl)
        .setName(t("Reward items"))
        .setDesc(t("Manage the specific rewards that can be obtained."))
        .setHeading();
    const rewardItemsContainer = containerEl.createDiv({
        cls: "rewards-items-container",
    });
    // Get available occurrence level names for dropdown
    const levelNames = settingTab.plugin.settings.rewards.occurrenceLevels.map((l) => l.name);
    if (levelNames.length === 0)
        levelNames.push(t("No levels defined"));
    settingTab.plugin.settings.rewards.rewardItems.forEach((item, index) => {
        const itemSetting = new Setting(rewardItemsContainer)
            .setClass("rewards-item-row")
            .addTextArea((text) => text // Use TextArea for potentially longer names
            .setPlaceholder(t("Reward Name/Text"))
            .setValue(item.name)
            .onChange((value) => {
            settingTab.plugin.settings.rewards.rewardItems[index].name = value;
            settingTab.applySettingsUpdate();
        }))
            .addDropdown((dropdown) => {
            levelNames.forEach((levelName) => {
                dropdown.addOption(levelName, levelName);
            });
            dropdown
                .setValue(item.occurrence || levelNames[0]) // Handle missing/default
                .onChange((value) => {
                settingTab.plugin.settings.rewards.rewardItems[index].occurrence = value;
                settingTab.applySettingsUpdate();
            });
        })
            .addText((text) => {
            text.inputEl.ariaLabel = t("Inventory (-1 for ∞)");
            text.setPlaceholder(t("Inventory (-1 for ∞)")) // For Inventory
                .setValue(item.inventory.toString())
                .onChange((value) => {
                const inventory = parseInt(value, 10);
                if (!isNaN(inventory)) {
                    settingTab.plugin.settings.rewards.rewardItems[index].inventory = inventory;
                    settingTab.applySettingsUpdate();
                }
                else {
                    new Notice(t("Invalid inventory number."));
                    text.setValue(item.inventory.toString()); // Revert
                }
            });
        })
            .addText((text) => text // For Condition
            .setPlaceholder(t("Condition (e.g., #tag AND project)"))
            .setValue(item.condition || "")
            .onChange((value) => {
            settingTab.plugin.settings.rewards.rewardItems[index].condition = value.trim() || undefined; // Store as undefined if empty
            settingTab.applySettingsUpdate();
        }))
            .addText((text) => {
            text.setPlaceholder(t("Image url (optional)")) // For Image URL
                .setValue(item.imageUrl || "")
                .onChange((value) => {
                settingTab.plugin.settings.rewards.rewardItems[index].imageUrl = value.trim() || undefined; // Store as undefined if empty
                settingTab.applySettingsUpdate();
            });
            new ImageSuggest(settingTab.app, text.inputEl, settingTab.plugin);
        })
            .addButton((button) => button
            .setIcon("trash")
            .setTooltip(t("Delete reward item"))
            .setClass("mod-warning")
            .onClick(() => {
            settingTab.plugin.settings.rewards.rewardItems.splice(index, 1);
            settingTab.applySettingsUpdate();
            setTimeout(() => {
                settingTab.display();
            }, 200);
        }));
        // Add some spacing or dividers if needed visually
        rewardItemsContainer.createEl("hr", {
            cls: "rewards-item-divider",
        });
    });
    if (settingTab.plugin.settings.rewards.rewardItems.length === 0) {
        rewardItemsContainer.createEl("p", {
            text: t("No reward items defined yet."),
            cls: "setting-item-description",
        });
    }
    new Setting(rewardItemsContainer).addButton((button) => button
        .setButtonText(t("Add reward item"))
        .setCta()
        .onClick(() => {
        var _a;
        const newItem = {
            id: `reward-${Date.now()}-${Math.random()
                .toString(36)
                .substring(2, 7)}`,
            name: t("New Reward"),
            occurrence: ((_a = settingTab.plugin.settings.rewards.occurrenceLevels[0]) === null || _a === void 0 ? void 0 : _a.name) || "default",
            inventory: -1, // Default to infinite
        };
        settingTab.plugin.settings.rewards.rewardItems.push(newItem);
        settingTab.applySettingsUpdate();
        setTimeout(() => {
            settingTab.display();
        }, 200);
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmV3YXJkU2V0dGluZ3NUYWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJSZXdhcmRTZXR0aW5nc1RhYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQWlCLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUdwRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRW5FLE1BQU0sVUFBVSx1QkFBdUIsQ0FDdEMsVUFBcUMsRUFDckMsV0FBd0I7SUFFeEIsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ3RCLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDckIsT0FBTyxDQUNQLENBQUMsQ0FDQSxpR0FBaUcsQ0FDakcsQ0FDRDtTQUNBLFVBQVUsRUFBRSxDQUFDO0lBRWYseUJBQXlCO0lBQ3pCLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQztTQUN0QixPQUFPLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDNUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO1NBQzVELFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQ3JCLE1BQU07U0FDSixRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztTQUMxRCxRQUFRLENBQUMsQ0FBTyxLQUFLLEVBQUUsRUFBRTtRQUN6QixVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUN6RCxVQUFVLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUNqQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2YsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3RCLENBQUMsRUFBRSxHQUFH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VCxDQUFBLE1BQUEsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQywwQ0FDbkQsSUFBSSxLQUFJLFNBQVM7WUFDckIsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLHNCQUFzQjtTQUNyQyxDQUFDO1FBQ0YsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0QsVUFBVSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDakMsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNmLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN0QixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDVCxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNldHRpbmcsIGRlYm91bmNlLCBUZXh0Q29tcG9uZW50LCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgT2NjdXJyZW5jZUxldmVsLCBSZXdhcmRJdGVtIH0gZnJvbSBcInNyYy9jb21tb24vc2V0dGluZy1kZWZpbml0aW9uXCI7XHJcbmltcG9ydCB7IFRhc2tQcm9ncmVzc0JhclNldHRpbmdUYWIgfSBmcm9tIFwic3JjL3NldHRpbmdcIjtcclxuaW1wb3J0IHsgdCB9IGZyb20gXCJzcmMvdHJhbnNsYXRpb25zL21hbmFnZXJcIjtcclxuaW1wb3J0IHsgSW1hZ2VTdWdnZXN0IH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9pbnB1dHMvQXV0b0NvbXBsZXRlXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyUmV3YXJkU2V0dGluZ3NUYWIoXHJcblx0c2V0dGluZ1RhYjogVGFza1Byb2dyZXNzQmFyU2V0dGluZ1RhYixcclxuXHRjb250YWluZXJFbDogSFRNTEVsZW1lbnRcclxuKSB7XHJcblx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHQuc2V0TmFtZSh0KFwiUmV3YXJkc1wiKSlcclxuXHRcdC5zZXREZXNjKFxyXG5cdFx0XHR0KFxyXG5cdFx0XHRcdFwiQ29uZmlndXJlIHJld2FyZHMgZm9yIGNvbXBsZXRpbmcgdGFza3MuIERlZmluZSBpdGVtcywgdGhlaXIgb2NjdXJyZW5jZSBjaGFuY2VzLCBhbmQgY29uZGl0aW9ucy5cIlxyXG5cdFx0XHQpXHJcblx0XHQpXHJcblx0XHQuc2V0SGVhZGluZygpO1xyXG5cclxuXHQvLyAtLS0gRW5hYmxlIFJld2FyZHMgLS0tXHJcblx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHQuc2V0TmFtZSh0KFwiRW5hYmxlIHJld2FyZHNcIikpXHJcblx0XHQuc2V0RGVzYyh0KFwiVG9nZ2xlIHRvIGVuYWJsZSBvciBkaXNhYmxlIHRoZSByZXdhcmQgc3lzdGVtLlwiKSlcclxuXHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0LnNldFZhbHVlKHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLnJld2FyZHMuZW5hYmxlUmV3YXJkcylcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRzZXR0aW5nVGFiLnBsdWdpbi5zZXR0aW5ncy5yZXdhcmRzLmVuYWJsZVJld2FyZHMgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdHNldHRpbmdUYWIuYXBwbHlTZXR0aW5nc1VwZGF0ZSgpO1xyXG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdHNldHRpbmdUYWIuZGlzcGxheSgpO1xyXG5cdFx0XHRcdFx0fSwgMjAwKTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0KTtcclxuXHJcblx0aWYgKCFzZXR0aW5nVGFiLnBsdWdpbi5zZXR0aW5ncy5yZXdhcmRzLmVuYWJsZVJld2FyZHMpIHtcclxuXHRcdHJldHVybjsgLy8gRG9uJ3QgcmVuZGVyIHRoZSByZXN0IGlmIHJld2FyZHMgYXJlIGRpc2FibGVkXHJcblx0fVxyXG5cclxuXHQvLyAtLS0gUmV3YXJkIERpc3BsYXkgVHlwZSAtLS1cclxuXHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdC5zZXROYW1lKHQoXCJSZXdhcmQgZGlzcGxheSB0eXBlXCIpKVxyXG5cdFx0LnNldERlc2ModChcIkNob29zZSBob3cgcmV3YXJkcyBhcmUgZGlzcGxheWVkIHdoZW4gZWFybmVkLlwiKSlcclxuXHRcdC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcclxuXHRcdFx0ZHJvcGRvd25cclxuXHRcdFx0XHQuYWRkT3B0aW9uKFwibW9kYWxcIiwgdChcIk1vZGFsIGRpYWxvZ1wiKSlcclxuXHRcdFx0XHQuYWRkT3B0aW9uKFwibm90aWNlXCIsIHQoXCJOb3RpY2UgKEF1dG8tYWNjZXB0KVwiKSlcclxuXHRcdFx0XHQuc2V0VmFsdWUoXHJcblx0XHRcdFx0XHRzZXR0aW5nVGFiLnBsdWdpbi5zZXR0aW5ncy5yZXdhcmRzLnNob3dSZXdhcmRUeXBlIHx8IFwibW9kYWxcIlxyXG5cdFx0XHRcdClcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBcIm1vZGFsXCIgfCBcIm5vdGljZVwiKSA9PiB7XHJcblx0XHRcdFx0XHRzZXR0aW5nVGFiLnBsdWdpbi5zZXR0aW5ncy5yZXdhcmRzLnNob3dSZXdhcmRUeXBlID0gdmFsdWU7XHJcblx0XHRcdFx0XHRzZXR0aW5nVGFiLmFwcGx5U2V0dGluZ3NVcGRhdGUoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHQvLyAtLS0gT2NjdXJyZW5jZSBMZXZlbHMgLS0tXHJcblx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHQuc2V0TmFtZSh0KFwiT2NjdXJyZW5jZSBsZXZlbHNcIikpXHJcblx0XHQuc2V0RGVzYyhcclxuXHRcdFx0dChcIkRlZmluZSBkaWZmZXJlbnQgbGV2ZWxzIG9mIHJld2FyZCByYXJpdHkgYW5kIHRoZWlyIHByb2JhYmlsaXR5LlwiKVxyXG5cdFx0KVxyXG5cdFx0LnNldEhlYWRpbmcoKTtcclxuXHJcblx0Y29uc3Qgb2NjdXJyZW5jZUxldmVsc0NvbnRhaW5lciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7XHJcblx0XHRjbHM6IFwicmV3YXJkcy1sZXZlbHMtY29udGFpbmVyXCIsXHJcblx0fSk7XHJcblxyXG5cdGNvbnN0IGRlYm91bmNlQ2hhbmNlVXBkYXRlID0gZGVib3VuY2UoXHJcblx0XHQoXHJcblx0XHRcdHRleHQ6IFRleHRDb21wb25lbnQsXHJcblx0XHRcdGxldmVsOiBPY2N1cnJlbmNlTGV2ZWwsXHJcblx0XHRcdHZhbHVlOiBzdHJpbmcsXHJcblx0XHRcdGluZGV4OiBudW1iZXJcclxuXHRcdCkgPT4ge1xyXG5cdFx0XHRjb25zdCBjaGFuY2UgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xyXG5cdFx0XHRpZiAoIWlzTmFOKGNoYW5jZSkgJiYgY2hhbmNlID49IDAgJiYgY2hhbmNlIDw9IDEwMCkge1xyXG5cdFx0XHRcdHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLnJld2FyZHMub2NjdXJyZW5jZUxldmVsc1tcclxuXHRcdFx0XHRcdGluZGV4XHJcblx0XHRcdFx0XS5jaGFuY2UgPSBjaGFuY2U7XHJcblx0XHRcdFx0c2V0dGluZ1RhYi5hcHBseVNldHRpbmdzVXBkYXRlKCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gT3B0aW9uYWw6IFByb3ZpZGUgZmVlZGJhY2sgZm9yIGludmFsaWQgaW5wdXRcclxuXHRcdFx0XHRuZXcgTm90aWNlKHQoXCJDaGFuY2UgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC5cIikpO1xyXG5cdFx0XHRcdHRleHQuc2V0VmFsdWUobGV2ZWwuY2hhbmNlLnRvU3RyaW5nKCkpOyAvLyBSZXZlcnRcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdDEwMDBcclxuXHQpO1xyXG5cclxuXHRjb25zdCBkZWJvdW5jZU5hbWVVcGRhdGUgPSBkZWJvdW5jZSgodmFsdWU6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4ge1xyXG5cdFx0c2V0dGluZ1RhYi5wbHVnaW4uc2V0dGluZ3MucmV3YXJkcy5vY2N1cnJlbmNlTGV2ZWxzW2luZGV4XS5uYW1lID1cclxuXHRcdFx0dmFsdWUudHJpbSgpO1xyXG5cdFx0c2V0dGluZ1RhYi5hcHBseVNldHRpbmdzVXBkYXRlKCk7XHJcblx0fSwgMTAwMCk7XHJcblxyXG5cdHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLnJld2FyZHMub2NjdXJyZW5jZUxldmVscy5mb3JFYWNoKFxyXG5cdFx0KGxldmVsLCBpbmRleCkgPT4ge1xyXG5cdFx0XHRjb25zdCBsZXZlbFNldHRpbmcgPSBuZXcgU2V0dGluZyhvY2N1cnJlbmNlTGV2ZWxzQ29udGFpbmVyKVxyXG5cdFx0XHRcdC5zZXRDbGFzcyhcInJld2FyZHMtbGV2ZWwtcm93XCIpXHJcblx0XHRcdFx0LmFkZFRleHQoKHRleHQpID0+XHJcblx0XHRcdFx0XHR0ZXh0XHJcblx0XHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcih0KFwiTGV2ZWwgTmFtZSAoZS5nLiwgY29tbW9uKVwiKSlcclxuXHRcdFx0XHRcdFx0LnNldFZhbHVlKGxldmVsLm5hbWUpXHJcblx0XHRcdFx0XHRcdC5vbkNoYW5nZSgodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRkZWJvdW5jZU5hbWVVcGRhdGUodmFsdWUsIGluZGV4KTtcclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHQpXHJcblx0XHRcdFx0LmFkZFRleHQoKHRleHQpID0+XHJcblx0XHRcdFx0XHR0ZXh0XHJcblx0XHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcih0KFwiQ2hhbmNlICglKVwiKSlcclxuXHRcdFx0XHRcdFx0LnNldFZhbHVlKGxldmVsLmNoYW5jZS50b1N0cmluZygpKVxyXG5cdFx0XHRcdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0ZGVib3VuY2VDaGFuY2VVcGRhdGUodGV4dCwgbGV2ZWwsIHZhbHVlLCBpbmRleCk7XHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KVxyXG5cdFx0XHRcdC5hZGRCdXR0b24oKGJ1dHRvbikgPT5cclxuXHRcdFx0XHRcdGJ1dHRvblxyXG5cdFx0XHRcdFx0XHQuc2V0SWNvbihcInRyYXNoXCIpXHJcblx0XHRcdFx0XHRcdC5zZXRUb29sdGlwKHQoXCJEZWxldGUgTGV2ZWxcIikpXHJcblx0XHRcdFx0XHRcdC5zZXRDbGFzcyhcIm1vZC13YXJuaW5nXCIpXHJcblx0XHRcdFx0XHRcdC5vbkNsaWNrKCgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRzZXR0aW5nVGFiLnBsdWdpbi5zZXR0aW5ncy5yZXdhcmRzLm9jY3VycmVuY2VMZXZlbHMuc3BsaWNlKFxyXG5cdFx0XHRcdFx0XHRcdFx0aW5kZXgsXHJcblx0XHRcdFx0XHRcdFx0XHQxXHJcblx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0XHRzZXR0aW5nVGFiLmFwcGx5U2V0dGluZ3NVcGRhdGUoKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRzZXR0aW5nVGFiLmRpc3BsYXkoKTtcclxuXHRcdFx0XHRcdFx0XHR9LCAyMDApO1xyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdCk7XHJcblx0XHR9XHJcblx0KTtcclxuXHJcblx0bmV3IFNldHRpbmcob2NjdXJyZW5jZUxldmVsc0NvbnRhaW5lcikuYWRkQnV0dG9uKChidXR0b24pID0+XHJcblx0XHRidXR0b25cclxuXHRcdFx0LnNldEJ1dHRvblRleHQodChcIkFkZCBvY2N1cnJlbmNlIGxldmVsXCIpKVxyXG5cdFx0XHQuc2V0Q3RhKClcclxuXHRcdFx0Lm9uQ2xpY2soKCkgPT4ge1xyXG5cdFx0XHRcdGNvbnN0IG5ld0xldmVsOiBPY2N1cnJlbmNlTGV2ZWwgPSB7XHJcblx0XHRcdFx0XHRuYW1lOiB0KFwiTmV3IExldmVsXCIpLFxyXG5cdFx0XHRcdFx0Y2hhbmNlOiAwLFxyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0c2V0dGluZ1RhYi5wbHVnaW4uc2V0dGluZ3MucmV3YXJkcy5vY2N1cnJlbmNlTGV2ZWxzLnB1c2goXHJcblx0XHRcdFx0XHRuZXdMZXZlbFxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFx0c2V0dGluZ1RhYi5hcHBseVNldHRpbmdzVXBkYXRlKCk7XHJcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRzZXR0aW5nVGFiLmRpc3BsYXkoKTtcclxuXHRcdFx0XHR9LCAyMDApO1xyXG5cdFx0XHR9KVxyXG5cdCk7XHJcblxyXG5cdC8vIC0tLSBSZXdhcmQgSXRlbXMgLS0tXHJcblx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHQuc2V0TmFtZSh0KFwiUmV3YXJkIGl0ZW1zXCIpKVxyXG5cdFx0LnNldERlc2ModChcIk1hbmFnZSB0aGUgc3BlY2lmaWMgcmV3YXJkcyB0aGF0IGNhbiBiZSBvYnRhaW5lZC5cIikpXHJcblx0XHQuc2V0SGVhZGluZygpO1xyXG5cclxuXHRjb25zdCByZXdhcmRJdGVtc0NvbnRhaW5lciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7XHJcblx0XHRjbHM6IFwicmV3YXJkcy1pdGVtcy1jb250YWluZXJcIixcclxuXHR9KTtcclxuXHJcblx0Ly8gR2V0IGF2YWlsYWJsZSBvY2N1cnJlbmNlIGxldmVsIG5hbWVzIGZvciBkcm9wZG93blxyXG5cdGNvbnN0IGxldmVsTmFtZXMgPSBzZXR0aW5nVGFiLnBsdWdpbi5zZXR0aW5ncy5yZXdhcmRzLm9jY3VycmVuY2VMZXZlbHMubWFwKFxyXG5cdFx0KGwpID0+IGwubmFtZVxyXG5cdCk7XHJcblx0aWYgKGxldmVsTmFtZXMubGVuZ3RoID09PSAwKSBsZXZlbE5hbWVzLnB1c2godChcIk5vIGxldmVscyBkZWZpbmVkXCIpKTtcclxuXHJcblx0c2V0dGluZ1RhYi5wbHVnaW4uc2V0dGluZ3MucmV3YXJkcy5yZXdhcmRJdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG5cdFx0Y29uc3QgaXRlbVNldHRpbmcgPSBuZXcgU2V0dGluZyhyZXdhcmRJdGVtc0NvbnRhaW5lcilcclxuXHRcdFx0LnNldENsYXNzKFwicmV3YXJkcy1pdGVtLXJvd1wiKVxyXG5cdFx0XHQuYWRkVGV4dEFyZWEoKHRleHQpID0+XHJcblx0XHRcdFx0dGV4dCAvLyBVc2UgVGV4dEFyZWEgZm9yIHBvdGVudGlhbGx5IGxvbmdlciBuYW1lc1xyXG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKHQoXCJSZXdhcmQgTmFtZS9UZXh0XCIpKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKGl0ZW0ubmFtZSlcclxuXHRcdFx0XHRcdC5vbkNoYW5nZSgodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0c2V0dGluZ1RhYi5wbHVnaW4uc2V0dGluZ3MucmV3YXJkcy5yZXdhcmRJdGVtc1tcclxuXHRcdFx0XHRcdFx0XHRpbmRleFxyXG5cdFx0XHRcdFx0XHRdLm5hbWUgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0c2V0dGluZ1RhYi5hcHBseVNldHRpbmdzVXBkYXRlKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpXHJcblx0XHRcdC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcclxuXHRcdFx0XHRsZXZlbE5hbWVzLmZvckVhY2goKGxldmVsTmFtZSkgPT4ge1xyXG5cdFx0XHRcdFx0ZHJvcGRvd24uYWRkT3B0aW9uKGxldmVsTmFtZSwgbGV2ZWxOYW1lKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRkcm9wZG93blxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKGl0ZW0ub2NjdXJyZW5jZSB8fCBsZXZlbE5hbWVzWzBdKSAvLyBIYW5kbGUgbWlzc2luZy9kZWZhdWx0XHJcblx0XHRcdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLnJld2FyZHMucmV3YXJkSXRlbXNbXHJcblx0XHRcdFx0XHRcdFx0aW5kZXhcclxuXHRcdFx0XHRcdFx0XS5vY2N1cnJlbmNlID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdHNldHRpbmdUYWIuYXBwbHlTZXR0aW5nc1VwZGF0ZSgpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdH0pXHJcblx0XHRcdC5hZGRUZXh0KCh0ZXh0KSA9PiB7XHJcblx0XHRcdFx0dGV4dC5pbnB1dEVsLmFyaWFMYWJlbCA9IHQoXCJJbnZlbnRvcnkgKC0xIGZvciDiiJ4pXCIpO1xyXG5cdFx0XHRcdHRleHQuc2V0UGxhY2Vob2xkZXIodChcIkludmVudG9yeSAoLTEgZm9yIOKInilcIikpIC8vIEZvciBJbnZlbnRvcnlcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZShpdGVtLmludmVudG9yeS50b1N0cmluZygpKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRjb25zdCBpbnZlbnRvcnkgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xyXG5cdFx0XHRcdFx0XHRpZiAoIWlzTmFOKGludmVudG9yeSkpIHtcclxuXHRcdFx0XHRcdFx0XHRzZXR0aW5nVGFiLnBsdWdpbi5zZXR0aW5ncy5yZXdhcmRzLnJld2FyZEl0ZW1zW1xyXG5cdFx0XHRcdFx0XHRcdFx0aW5kZXhcclxuXHRcdFx0XHRcdFx0XHRdLmludmVudG9yeSA9IGludmVudG9yeTtcclxuXHRcdFx0XHRcdFx0XHRzZXR0aW5nVGFiLmFwcGx5U2V0dGluZ3NVcGRhdGUoKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRuZXcgTm90aWNlKHQoXCJJbnZhbGlkIGludmVudG9yeSBudW1iZXIuXCIpKTtcclxuXHRcdFx0XHRcdFx0XHR0ZXh0LnNldFZhbHVlKGl0ZW0uaW52ZW50b3J5LnRvU3RyaW5nKCkpOyAvLyBSZXZlcnRcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdH0pXHJcblx0XHRcdC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG5cdFx0XHRcdHRleHQgLy8gRm9yIENvbmRpdGlvblxyXG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKHQoXCJDb25kaXRpb24gKGUuZy4sICN0YWcgQU5EIHByb2plY3QpXCIpKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKGl0ZW0uY29uZGl0aW9uIHx8IFwiXCIpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLnJld2FyZHMucmV3YXJkSXRlbXNbXHJcblx0XHRcdFx0XHRcdFx0aW5kZXhcclxuXHRcdFx0XHRcdFx0XS5jb25kaXRpb24gPSB2YWx1ZS50cmltKCkgfHwgdW5kZWZpbmVkOyAvLyBTdG9yZSBhcyB1bmRlZmluZWQgaWYgZW1wdHlcclxuXHRcdFx0XHRcdFx0c2V0dGluZ1RhYi5hcHBseVNldHRpbmdzVXBkYXRlKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpXHJcblx0XHRcdC5hZGRUZXh0KCh0ZXh0KSA9PiB7XHJcblx0XHRcdFx0dGV4dC5zZXRQbGFjZWhvbGRlcih0KFwiSW1hZ2UgdXJsIChvcHRpb25hbClcIikpIC8vIEZvciBJbWFnZSBVUkxcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZShpdGVtLmltYWdlVXJsIHx8IFwiXCIpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLnJld2FyZHMucmV3YXJkSXRlbXNbXHJcblx0XHRcdFx0XHRcdFx0aW5kZXhcclxuXHRcdFx0XHRcdFx0XS5pbWFnZVVybCA9IHZhbHVlLnRyaW0oKSB8fCB1bmRlZmluZWQ7IC8vIFN0b3JlIGFzIHVuZGVmaW5lZCBpZiBlbXB0eVxyXG5cdFx0XHRcdFx0XHRzZXR0aW5nVGFiLmFwcGx5U2V0dGluZ3NVcGRhdGUoKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRuZXcgSW1hZ2VTdWdnZXN0KFxyXG5cdFx0XHRcdFx0c2V0dGluZ1RhYi5hcHAsXHJcblx0XHRcdFx0XHR0ZXh0LmlucHV0RWwsXHJcblx0XHRcdFx0XHRzZXR0aW5nVGFiLnBsdWdpblxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH0pXHJcblx0XHRcdC5hZGRCdXR0b24oKGJ1dHRvbikgPT5cclxuXHRcdFx0XHRidXR0b25cclxuXHRcdFx0XHRcdC5zZXRJY29uKFwidHJhc2hcIilcclxuXHRcdFx0XHRcdC5zZXRUb29sdGlwKHQoXCJEZWxldGUgcmV3YXJkIGl0ZW1cIikpXHJcblx0XHRcdFx0XHQuc2V0Q2xhc3MoXCJtb2Qtd2FybmluZ1wiKVxyXG5cdFx0XHRcdFx0Lm9uQ2xpY2soKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRzZXR0aW5nVGFiLnBsdWdpbi5zZXR0aW5ncy5yZXdhcmRzLnJld2FyZEl0ZW1zLnNwbGljZShcclxuXHRcdFx0XHRcdFx0XHRpbmRleCxcclxuXHRcdFx0XHRcdFx0XHQxXHJcblx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdHNldHRpbmdUYWIuYXBwbHlTZXR0aW5nc1VwZGF0ZSgpO1xyXG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRzZXR0aW5nVGFiLmRpc3BsYXkoKTtcclxuXHRcdFx0XHRcdFx0fSwgMjAwKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblx0XHQvLyBBZGQgc29tZSBzcGFjaW5nIG9yIGRpdmlkZXJzIGlmIG5lZWRlZCB2aXN1YWxseVxyXG5cdFx0cmV3YXJkSXRlbXNDb250YWluZXIuY3JlYXRlRWwoXCJoclwiLCB7XHJcblx0XHRcdGNsczogXCJyZXdhcmRzLWl0ZW0tZGl2aWRlclwiLFxyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdGlmIChzZXR0aW5nVGFiLnBsdWdpbi5zZXR0aW5ncy5yZXdhcmRzLnJld2FyZEl0ZW1zLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0cmV3YXJkSXRlbXNDb250YWluZXIuY3JlYXRlRWwoXCJwXCIsIHtcclxuXHRcdFx0dGV4dDogdChcIk5vIHJld2FyZCBpdGVtcyBkZWZpbmVkIHlldC5cIiksXHJcblx0XHRcdGNsczogXCJzZXR0aW5nLWl0ZW0tZGVzY3JpcHRpb25cIixcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0bmV3IFNldHRpbmcocmV3YXJkSXRlbXNDb250YWluZXIpLmFkZEJ1dHRvbigoYnV0dG9uKSA9PlxyXG5cdFx0YnV0dG9uXHJcblx0XHRcdC5zZXRCdXR0b25UZXh0KHQoXCJBZGQgcmV3YXJkIGl0ZW1cIikpXHJcblx0XHRcdC5zZXRDdGEoKVxyXG5cdFx0XHQub25DbGljaygoKSA9PiB7XHJcblx0XHRcdFx0Y29uc3QgbmV3SXRlbTogUmV3YXJkSXRlbSA9IHtcclxuXHRcdFx0XHRcdGlkOiBgcmV3YXJkLSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpXHJcblx0XHRcdFx0XHRcdC50b1N0cmluZygzNilcclxuXHRcdFx0XHRcdFx0LnN1YnN0cmluZygyLCA3KX1gLCAvLyBTaW1wbGUgdW5pcXVlIElEXHJcblx0XHRcdFx0XHRuYW1lOiB0KFwiTmV3IFJld2FyZFwiKSxcclxuXHRcdFx0XHRcdG9jY3VycmVuY2U6XHJcblx0XHRcdFx0XHRcdHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLnJld2FyZHMub2NjdXJyZW5jZUxldmVsc1swXVxyXG5cdFx0XHRcdFx0XHRcdD8ubmFtZSB8fCBcImRlZmF1bHRcIiwgLy8gVXNlIGZpcnN0IGxldmVsIG9yIGRlZmF1bHRcclxuXHRcdFx0XHRcdGludmVudG9yeTogLTEsIC8vIERlZmF1bHQgdG8gaW5maW5pdGVcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLnJld2FyZHMucmV3YXJkSXRlbXMucHVzaChuZXdJdGVtKTtcclxuXHRcdFx0XHRzZXR0aW5nVGFiLmFwcGx5U2V0dGluZ3NVcGRhdGUoKTtcclxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdHNldHRpbmdUYWIuZGlzcGxheSgpO1xyXG5cdFx0XHRcdH0sIDIwMCk7XHJcblx0XHRcdH0pXHJcblx0KTtcclxufVxyXG4iXX0=