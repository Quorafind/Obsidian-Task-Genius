import { __awaiter } from "tslib";
import { Setting } from "obsidian";
import { t } from "@/translations/helper";
export function renderDatePrioritySettingsTab(settingTab, containerEl) {
    new Setting(containerEl)
        .setName(t("Priority Picker Settings"))
        .setDesc(t("Toggle to enable priority picker dropdown for emoji and letter format priorities."))
        .setHeading();
    new Setting(containerEl)
        .setName(t("Enable priority picker"))
        .setDesc(t("Toggle to enable priority picker dropdown for emoji and letter format priorities."))
        .addToggle((toggle) => toggle
        .setValue(settingTab.plugin.settings.enablePriorityPicker)
        .onChange((value) => __awaiter(this, void 0, void 0, function* () {
        settingTab.plugin.settings.enablePriorityPicker = value;
        settingTab.applySettingsUpdate();
    })));
    new Setting(containerEl)
        .setName(t("Enable priority keyboard shortcuts"))
        .setDesc(t("Toggle to enable keyboard shortcuts for setting task priorities."))
        .addToggle((toggle) => toggle
        .setValue(settingTab.plugin.settings.enablePriorityKeyboardShortcuts)
        .onChange((value) => __awaiter(this, void 0, void 0, function* () {
        settingTab.plugin.settings.enablePriorityKeyboardShortcuts =
            value;
        settingTab.applySettingsUpdate();
    })));
    // Date picker settings
    new Setting(containerEl).setName(t("Date picker")).setHeading();
    new Setting(containerEl)
        .setName(t("Enable date picker"))
        .setDesc(t("Toggle this to enable date picker for tasks. This will add a calendar icon near your tasks which you can click to select a date."))
        .addToggle((toggle) => toggle
        .setValue(settingTab.plugin.settings.enableDatePicker)
        .onChange((value) => __awaiter(this, void 0, void 0, function* () {
        settingTab.plugin.settings.enableDatePicker = value;
        settingTab.applySettingsUpdate();
    })));
    // Recurrence date base setting
    new Setting(containerEl)
        .setName(t("Recurrence date calculation"))
        .setDesc(t("Choose how to calculate the next date for recurring tasks"))
        .addDropdown((dropdown) => dropdown
        .addOption("due", t("Based on due date"))
        .addOption("scheduled", t("Based on scheduled date"))
        .addOption("current", t("Based on current date"))
        .setValue(settingTab.plugin.settings.recurrenceDateBase || "due")
        .onChange((value) => __awaiter(this, void 0, void 0, function* () {
        settingTab.plugin.settings.recurrenceDateBase = value;
        settingTab.applySettingsUpdate();
    })));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0ZVByaW9yaXR5U2V0dGluZ3NUYWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEYXRlUHJpb3JpdHlTZXR0aW5nc1RhYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNuQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHMUMsTUFBTSxVQUFVLDZCQUE2QixDQUM1QyxVQUFxQyxFQUNyQyxXQUF3QjtJQUV4QixJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUM7U0FDdEIsT0FBTyxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1NBQ3RDLE9BQU8sQ0FDUCxDQUFDLENBQ0EsbUZBQW1GLENBQ25GLENBQ0Q7U0FDQSxVQUFVLEVBQUUsQ0FBQztJQUVmLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQztTQUN0QixPQUFPLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDcEMsT0FBTyxDQUNQLENBQUMsQ0FDQSxtRkFBbUYsQ0FDbkYsQ0FDRDtTQUNBLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQ3JCLE1BQU07U0FDSixRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUM7U0FDekQsUUFBUSxDQUFDLENBQU8sS0FBSyxFQUFFLEVBQUU7UUFDekIsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxDQUFDO1FBQ3hELFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQ2xDLENBQUMsQ0FBQSxDQUFDLENBQ0gsQ0FBQztJQUVILElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQztTQUN0QixPQUFPLENBQUMsQ0FBQyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7U0FDaEQsT0FBTyxDQUNQLENBQUMsQ0FDQSxrRUFBa0UsQ0FDbEUsQ0FDRDtTQUNBLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQ3JCLE1BQU07U0FDSixRQUFRLENBQ1IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsK0JBQStCLENBQzFEO1NBQ0EsUUFBUSxDQUFDLENBQU8sS0FBSyxFQUFFLEVBQUU7UUFDekIsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsK0JBQStCO1lBQ3pELEtBQUssQ0FBQztRQUNQLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQ2xDLENBQUMsQ0FBQSxDQUFDLENBQ0gsQ0FBQztJQUVILHVCQUF1QjtJQUN2QixJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7SUFFaEUsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ3RCLE9BQU8sQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUNoQyxPQUFPLENBQ1AsQ0FBQyxDQUNBLGtJQUFrSSxDQUNsSSxDQUNEO1NBQ0EsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDckIsTUFBTTtTQUNKLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztTQUNyRCxRQUFRLENBQUMsQ0FBTyxLQUFLLEVBQUUsRUFBRTtRQUN6QixVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDcEQsVUFBVSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDbEMsQ0FBQyxDQUFBLENBQUMsQ0FDSCxDQUFDO0lBRUgsK0JBQStCO0lBQy9CLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQztTQUN0QixPQUFPLENBQUMsQ0FBQyxDQUFDLDZCQUE2QixDQUFDLENBQUM7U0FDekMsT0FBTyxDQUFDLENBQUMsQ0FBQywyREFBMkQsQ0FBQyxDQUFDO1NBQ3ZFLFdBQVcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQ3pCLFFBQVE7U0FDTixTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3hDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLENBQUM7U0FDcEQsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUNoRCxRQUFRLENBQ1IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsa0JBQWtCLElBQUksS0FBSyxDQUN0RDtTQUNBLFFBQVEsQ0FBQyxDQUFPLEtBQXNDLEVBQUUsRUFBRTtRQUMxRCxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7UUFDdEQsVUFBVSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDbEMsQ0FBQyxDQUFBLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgdCB9IGZyb20gXCJAL3RyYW5zbGF0aW9ucy9oZWxwZXJcIjtcclxuaW1wb3J0IHsgVGFza1Byb2dyZXNzQmFyU2V0dGluZ1RhYiB9IGZyb20gXCJAL3NldHRpbmdcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJEYXRlUHJpb3JpdHlTZXR0aW5nc1RhYihcclxuXHRzZXR0aW5nVGFiOiBUYXNrUHJvZ3Jlc3NCYXJTZXR0aW5nVGFiLFxyXG5cdGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudFxyXG4pIHtcclxuXHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdC5zZXROYW1lKHQoXCJQcmlvcml0eSBQaWNrZXIgU2V0dGluZ3NcIikpXHJcblx0XHQuc2V0RGVzYyhcclxuXHRcdFx0dChcclxuXHRcdFx0XHRcIlRvZ2dsZSB0byBlbmFibGUgcHJpb3JpdHkgcGlja2VyIGRyb3Bkb3duIGZvciBlbW9qaSBhbmQgbGV0dGVyIGZvcm1hdCBwcmlvcml0aWVzLlwiXHJcblx0XHRcdClcclxuXHRcdClcclxuXHRcdC5zZXRIZWFkaW5nKCk7XHJcblxyXG5cdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0LnNldE5hbWUodChcIkVuYWJsZSBwcmlvcml0eSBwaWNrZXJcIikpXHJcblx0XHQuc2V0RGVzYyhcclxuXHRcdFx0dChcclxuXHRcdFx0XHRcIlRvZ2dsZSB0byBlbmFibGUgcHJpb3JpdHkgcGlja2VyIGRyb3Bkb3duIGZvciBlbW9qaSBhbmQgbGV0dGVyIGZvcm1hdCBwcmlvcml0aWVzLlwiXHJcblx0XHRcdClcclxuXHRcdClcclxuXHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0LnNldFZhbHVlKHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLmVuYWJsZVByaW9yaXR5UGlja2VyKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLmVuYWJsZVByaW9yaXR5UGlja2VyID0gdmFsdWU7XHJcblx0XHRcdFx0XHRzZXR0aW5nVGFiLmFwcGx5U2V0dGluZ3NVcGRhdGUoKTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0KTtcclxuXHJcblx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHQuc2V0TmFtZSh0KFwiRW5hYmxlIHByaW9yaXR5IGtleWJvYXJkIHNob3J0Y3V0c1wiKSlcclxuXHRcdC5zZXREZXNjKFxyXG5cdFx0XHR0KFxyXG5cdFx0XHRcdFwiVG9nZ2xlIHRvIGVuYWJsZSBrZXlib2FyZCBzaG9ydGN1dHMgZm9yIHNldHRpbmcgdGFzayBwcmlvcml0aWVzLlwiXHJcblx0XHRcdClcclxuXHRcdClcclxuXHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0LnNldFZhbHVlKFxyXG5cdFx0XHRcdFx0c2V0dGluZ1RhYi5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlUHJpb3JpdHlLZXlib2FyZFNob3J0Y3V0c1xyXG5cdFx0XHRcdClcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRzZXR0aW5nVGFiLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVQcmlvcml0eUtleWJvYXJkU2hvcnRjdXRzID1cclxuXHRcdFx0XHRcdFx0dmFsdWU7XHJcblx0XHRcdFx0XHRzZXR0aW5nVGFiLmFwcGx5U2V0dGluZ3NVcGRhdGUoKTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0KTtcclxuXHJcblx0Ly8gRGF0ZSBwaWNrZXIgc2V0dGluZ3NcclxuXHRuZXcgU2V0dGluZyhjb250YWluZXJFbCkuc2V0TmFtZSh0KFwiRGF0ZSBwaWNrZXJcIikpLnNldEhlYWRpbmcoKTtcclxuXHJcblx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHQuc2V0TmFtZSh0KFwiRW5hYmxlIGRhdGUgcGlja2VyXCIpKVxyXG5cdFx0LnNldERlc2MoXHJcblx0XHRcdHQoXHJcblx0XHRcdFx0XCJUb2dnbGUgdGhpcyB0byBlbmFibGUgZGF0ZSBwaWNrZXIgZm9yIHRhc2tzLiBUaGlzIHdpbGwgYWRkIGEgY2FsZW5kYXIgaWNvbiBuZWFyIHlvdXIgdGFza3Mgd2hpY2ggeW91IGNhbiBjbGljayB0byBzZWxlY3QgYSBkYXRlLlwiXHJcblx0XHRcdClcclxuXHRcdClcclxuXHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0LnNldFZhbHVlKHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLmVuYWJsZURhdGVQaWNrZXIpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0c2V0dGluZ1RhYi5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlRGF0ZVBpY2tlciA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0c2V0dGluZ1RhYi5hcHBseVNldHRpbmdzVXBkYXRlKCk7XHJcblx0XHRcdFx0fSlcclxuXHRcdCk7XHJcblxyXG5cdC8vIFJlY3VycmVuY2UgZGF0ZSBiYXNlIHNldHRpbmdcclxuXHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdC5zZXROYW1lKHQoXCJSZWN1cnJlbmNlIGRhdGUgY2FsY3VsYXRpb25cIikpXHJcblx0XHQuc2V0RGVzYyh0KFwiQ2hvb3NlIGhvdyB0byBjYWxjdWxhdGUgdGhlIG5leHQgZGF0ZSBmb3IgcmVjdXJyaW5nIHRhc2tzXCIpKVxyXG5cdFx0LmFkZERyb3Bkb3duKChkcm9wZG93bikgPT5cclxuXHRcdFx0ZHJvcGRvd25cclxuXHRcdFx0XHQuYWRkT3B0aW9uKFwiZHVlXCIsIHQoXCJCYXNlZCBvbiBkdWUgZGF0ZVwiKSlcclxuXHRcdFx0XHQuYWRkT3B0aW9uKFwic2NoZWR1bGVkXCIsIHQoXCJCYXNlZCBvbiBzY2hlZHVsZWQgZGF0ZVwiKSlcclxuXHRcdFx0XHQuYWRkT3B0aW9uKFwiY3VycmVudFwiLCB0KFwiQmFzZWQgb24gY3VycmVudCBkYXRlXCIpKVxyXG5cdFx0XHRcdC5zZXRWYWx1ZShcclxuXHRcdFx0XHRcdHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLnJlY3VycmVuY2VEYXRlQmFzZSB8fCBcImR1ZVwiXHJcblx0XHRcdFx0KVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWU6IFwiZHVlXCIgfCBcInNjaGVkdWxlZFwiIHwgXCJjdXJyZW50XCIpID0+IHtcclxuXHRcdFx0XHRcdHNldHRpbmdUYWIucGx1Z2luLnNldHRpbmdzLnJlY3VycmVuY2VEYXRlQmFzZSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0c2V0dGluZ1RhYi5hcHBseVNldHRpbmdzVXBkYXRlKCk7XHJcblx0XHRcdFx0fSlcclxuXHRcdCk7XHJcbn1cclxuIl19