import { emit as coreEmit, on as coreOn, Seq } from "@/dataflow/events/Events";
export const UIEvents = {
    WORKSPACE_SWITCHED: "task-genius:ui-workspace-switched",
    WORKSPACE_OVERRIDES_SAVED: "task-genius:ui-workspace-overrides-saved",
    WORKSPACE_RESET: "task-genius:ui-workspace-reset",
    DEFAULT_WORKSPACE_CHANGED: "task-genius:ui-default-workspace-changed",
    WORKSPACE_CREATED: "task-genius:ui-workspace-created",
    WORKSPACE_DELETED: "task-genius:ui-workspace-deleted",
    WORKSPACE_RENAMED: "task-genius:ui-workspace-renamed",
    // Cross-view UI events for V2 architecture
    SIDEBAR_SELECTION_CHANGED: "task-genius:sidebar-selection-changed",
    TASK_SELECTED: "task-genius:task-selected",
};
// Event emitters
export const emitWorkspaceSwitched = (app, workspaceId) => {
    coreEmit(app, UIEvents.WORKSPACE_SWITCHED, {
        workspaceId,
        seq: Seq.next()
    });
};
export const emitWorkspaceOverridesSaved = (app, workspaceId, changedKeys) => {
    coreEmit(app, UIEvents.WORKSPACE_OVERRIDES_SAVED, {
        workspaceId,
        changedKeys,
        seq: Seq.next()
    });
};
export const emitWorkspaceReset = (app, workspaceId) => {
    coreEmit(app, UIEvents.WORKSPACE_RESET, {
        workspaceId,
        seq: Seq.next()
    });
};
export const emitDefaultWorkspaceChanged = (app, workspaceId) => {
    coreEmit(app, UIEvents.DEFAULT_WORKSPACE_CHANGED, {
        workspaceId,
        seq: Seq.next()
    });
};
export const emitWorkspaceCreated = (app, workspaceId, baseId) => {
    coreEmit(app, UIEvents.WORKSPACE_CREATED, {
        workspaceId,
        baseId,
        seq: Seq.next()
    });
};
// Emitters
export const emitSidebarSelectionChanged = (app, payload) => {
    coreEmit(app, UIEvents.SIDEBAR_SELECTION_CHANGED, Object.assign(Object.assign({}, payload), { seq: Seq.next() }));
};
export const emitTaskSelected = (app, payload) => {
    coreEmit(app, UIEvents.TASK_SELECTED, Object.assign(Object.assign({}, payload), { seq: Seq.next() }));
};
// Subscribers
export const onSidebarSelectionChanged = (app, handler) => {
    return coreOn(app, UIEvents.SIDEBAR_SELECTION_CHANGED, handler);
};
export const onTaskSelected = (app, handler) => {
    return coreOn(app, UIEvents.TASK_SELECTED, handler);
};
export const emitWorkspaceDeleted = (app, workspaceId) => {
    coreEmit(app, UIEvents.WORKSPACE_DELETED, {
        workspaceId,
        seq: Seq.next()
    });
};
export const emitWorkspaceRenamed = (app, workspaceId, newName) => {
    coreEmit(app, UIEvents.WORKSPACE_RENAMED, {
        workspaceId,
        newName,
        seq: Seq.next()
    });
};
// Event subscribers
export const onWorkspaceSwitched = (app, handler) => {
    return coreOn(app, UIEvents.WORKSPACE_SWITCHED, handler);
};
export const onWorkspaceOverridesSaved = (app, handler) => {
    return coreOn(app, UIEvents.WORKSPACE_OVERRIDES_SAVED, handler);
};
export const onWorkspaceReset = (app, handler) => {
    return coreOn(app, UIEvents.WORKSPACE_RESET, handler);
};
export const onDefaultWorkspaceChanged = (app, handler) => {
    return coreOn(app, UIEvents.DEFAULT_WORKSPACE_CHANGED, handler);
};
export const onWorkspaceCreated = (app, handler) => {
    return coreOn(app, UIEvents.WORKSPACE_CREATED, handler);
};
export const onWorkspaceDeleted = (app, handler) => {
    return coreOn(app, UIEvents.WORKSPACE_DELETED, handler);
};
export const onWorkspaceRenamed = (app, handler) => {
    return coreOn(app, UIEvents.WORKSPACE_RENAMED, handler);
};
//# sourceMappingURL=data:application/json;base64,