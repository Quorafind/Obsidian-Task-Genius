import { Modal, Setting } from "obsidian";
import { getLocalDateString, getTodayLocalDateString, } from "@/utils/date/date-formatter";
import { t } from "@/translations/helper";
import "@/styles/habit.css";
export class HabitChartModal extends Modal {
    constructor(app, card, habit) {
        super(app);
        this.card = card;
        this.habit = habit;
        const dates = Object.keys(this.habit.completions || {});
        if (dates.length > 0) {
            const min = dates.reduce((min, d) => (d < min ? d : min));
            this.earliestDateStr = min;
        }
        else {
            this.earliestDateStr = getTodayLocalDateString();
        }
        this.todayStr = getTodayLocalDateString();
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        this.modalEl.toggleClass("habit-chart-modal", true);
        this.setTitle(`${this.habit.name} Â· Heatmap`);
        // Controls (use Obsidian Setting + dropdowns)
        const controls = contentEl.createDiv({ cls: "habit-chart-controls" });
        const earliestYear = Number(this.earliestDateStr.slice(0, 4));
        const currentYear = new Date().getFullYear();
        let selectedRange = "all"; // all | 7d | 30d | 365d | year
        let selectedYear = String(currentYear);
        const rangeSetting = new Setting(controls)
            .setName(t("Range"))
            .addDropdown((dd) => {
            dd.addOptions({
                all: t("All history"),
                "7d": t("Last week"),
                "30d": t("Last month"),
                "365d": t("Last year"),
                year: t("Full year"),
            });
            dd.setValue(selectedRange);
            dd.onChange((value) => {
                selectedRange = value;
                yearSetting.settingEl.toggleClass("is-disabled", value !== "year");
                yearSelect.disabled = value !== "year";
                this.renderSelected(selectedRange, selectedYear);
            });
        });
        let yearSelect = null;
        const yearSetting = new Setting(controls)
            .setName(t("Year"))
            .addDropdown((dd) => {
            yearSelect = dd.selectEl;
            for (let y = currentYear; y >= earliestYear; y--) {
                dd.addOption(String(y), String(y));
            }
            dd.setValue(selectedYear);
            dd.onChange((value) => {
                selectedYear = value;
                if (selectedRange === "year")
                    this.renderSelected(selectedRange, selectedYear);
            });
        });
        yearSetting.settingEl.toggleClass("is-disabled", selectedRange !== "year");
        yearSelect.disabled = selectedRange !== "year";
        // Heatmap host
        this.heatmapHostEl = contentEl.createDiv({
            cls: "habit-chart-heatmap",
        });
        // Initial render
        this.renderSelected(selectedRange, selectedYear);
    }
    renderSelected(range, year) {
        if (range === "all") {
            this.renderRange(this.earliestDateStr, this.todayStr);
            return;
        }
        if (range === "7d") {
            this.renderLastNDays(7);
            return;
        }
        if (range === "30d") {
            this.renderLastMonthCalendar();
            return;
        }
        if (range === "365d") {
            this.renderLastNDays(365);
            return;
        }
        if (range === "year") {
            const y = parseInt(year, 10);
            this.renderYearCalendar(y);
            return;
        }
        // Fallback
        this.renderRange(this.earliestDateStr, this.todayStr);
    }
    createCalendarContainer(rows, cols) {
        const root = this.heatmapHostEl.createDiv({
            cls: `tg-heatmap-root heatmap-md`,
        });
        const grid = root.createDiv({ cls: "heatmap-container-calendar" });
        grid.style.display = "grid";
        grid.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
        grid.style.gridTemplateRows = `repeat(${rows}, auto)`;
        grid.style.gap = "var(--size-2-2)";
        return grid;
    }
    renderYearCalendar(year) {
        this.heatmapHostEl.empty();
        const start = new Date(year, 0, 1);
        const end = new Date(year, 11, 31);
        // Align to Monday and Sunday
        const startDow = (start.getDay() + 6) % 7; // 0=Mon
        const alignedStart = new Date(start);
        alignedStart.setDate(start.getDate() - startDow);
        const endDow = end.getDay(); // 0=Sun
        const add = (7 - endDow - 1 + 7) % 7; // days to reach Sunday (endDow=0 => 0)
        const alignedEnd = new Date(end);
        alignedEnd.setDate(end.getDate() + add);
        const totalDays = Math.floor((alignedEnd.getTime() - alignedStart.getTime()) / 86400000) + 1;
        const weeks = Math.ceil(totalDays / 7);
        const grid = this.createCalendarContainer(7, weeks);
        const getVariant = (value) => this.habit.completionText ? value === 1 : value === true;
        const comps = this.habit.completions || {};
        for (let w = 0; w < weeks; w++) {
            for (let d = 0; d < 7; d++) {
                const dateObj = new Date(alignedStart.getTime() + (w * 7 + d) * 86400000);
                const dateStr = getLocalDateString(dateObj);
                const cellValue = comps[dateStr];
                const isInYear = dateObj >= start && dateObj <= end;
                const isFilled = isInYear && getVariant(cellValue);
                const cell = grid.createDiv({
                    cls: `heatmap-cell heatmap-cell-square`,
                });
                cell.dataset.date = dateStr;
                let tooltip = `${dateStr}: ` +
                    (cellValue == null
                        ? t("Missed")
                        : isFilled
                            ? t("Completed")
                            : t("Missed"));
                cell.setAttribute("aria-label", tooltip);
                if (isInYear) {
                    cell.addClass(isFilled ? "filled" : "default");
                }
                else {
                    cell.addClass("default");
                    cell.style.opacity = "0.25";
                }
            }
        }
    }
    renderLastMonthCalendar() {
        this.heatmapHostEl.empty();
        const end = new Date();
        const start = new Date(end.getTime() - 29 * 86400000);
        // align start to Monday of its week
        const startDow = (start.getDay() + 6) % 7; // 0=Mon
        const alignedStart = new Date(start);
        alignedStart.setDate(start.getDate() - startDow);
        const rows = 5, cols = 7;
        const grid = this.createCalendarContainer(rows, cols);
        const getVariant = (value) => this.habit.completionText ? value === 1 : value === true;
        const comps = this.habit.completions || {};
        for (let r = 0; r < rows; r++) {
            for (let c = 0; c < cols; c++) {
                const dayIndex = r * 7 + c;
                const dateObj = new Date(alignedStart.getTime() + dayIndex * 86400000);
                const dateStr = getLocalDateString(dateObj);
                const inRange = dateObj >= start && dateObj <= end;
                const cellValue = comps[dateStr];
                const isFilled = inRange && getVariant(cellValue);
                const cell = grid.createDiv({
                    cls: `heatmap-cell heatmap-cell-square`,
                });
                cell.dataset.date = dateStr;
                let tooltip = `${dateStr}: ` +
                    (cellValue == null
                        ? t("Missed")
                        : isFilled
                            ? t("Completed")
                            : t("Missed"));
                cell.setAttribute("aria-label", tooltip);
                cell.addClass(inRange ? (isFilled ? "filled" : "default") : "default");
                if (!inRange)
                    cell.style.opacity = "0.25";
            }
        }
    }
    renderLastNDays(n) {
        const end = new Date();
        const start = new Date(end.getTime() - (n - 1) * 24 * 60 * 60 * 1000);
        this.renderRange(getLocalDateString(start), getLocalDateString(end));
    }
    renderRange(startStr, endStr) {
        this.heatmapHostEl.empty();
        const getVariant = (value) => {
            if (this.habit.completionText)
                return value === 1;
            return value === true;
        };
        this.card.renderHeatmapRange(this.heatmapHostEl, this.habit.completions || {}, startStr, endStr, "md", getVariant);
    }
    onClose() {
        this.contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGFiaXRDaGFydE1vZGFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiSGFiaXRDaGFydE1vZGFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBTyxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRS9DLE9BQU8sRUFDTixrQkFBa0IsRUFDbEIsdUJBQXVCLEdBQ3ZCLE1BQU0sNkJBQTZCLENBQUM7QUFFckMsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFDLE9BQU8sb0JBQW9CLENBQUM7QUFFNUIsTUFBTSxPQUFPLGVBQWdCLFNBQVEsS0FBSztJQU96QyxZQUFZLEdBQVEsRUFBRSxJQUFlLEVBQUUsS0FBc0I7UUFDNUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN4RCxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQztTQUMzQjthQUFNO1lBQ04sSUFBSSxDQUFDLGVBQWUsR0FBRyx1QkFBdUIsRUFBRSxDQUFDO1NBQ2pEO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyx1QkFBdUIsRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFRCxNQUFNO1FBQ0ws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QztJQUVPLGVBQWUsQ0FBQyxDQUFTO1FBQ2hDLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdkIsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRU8sV0FBVyxDQUFDLFFBQWdCLEVBQUUsTUFBYztRQUNuRCxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDakMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWM7Z0JBQUUsT0FBTyxLQUFLLEtBQUssQ0FBQyxDQUFDO1lBQ2xELE9BQU8sS0FBSyxLQUFLLElBQUksQ0FBQztRQUN2QixDQUFDLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUMzQixJQUFJLENBQUMsYUFBYSxFQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxFQUFFLEVBQzVCLFFBQVEsRUFDUixNQUFNLEVBQ04sSUFBSSxFQUNKLFVBQVUsQ0FDVixDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU87UUFDTixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hCLENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCwgTW9kYWwsIFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgRGFpbHlIYWJpdFByb3BzIH0gZnJvbSBcIkAvdHlwZXMvaGFiaXQtY2FyZFwiO1xyXG5pbXBvcnQge1xyXG5cdGdldExvY2FsRGF0ZVN0cmluZyxcclxuXHRnZXRUb2RheUxvY2FsRGF0ZVN0cmluZyxcclxufSBmcm9tIFwiQC91dGlscy9kYXRlL2RhdGUtZm9ybWF0dGVyXCI7XHJcbmltcG9ydCB7IEhhYml0Q2FyZCB9IGZyb20gXCJAL2NvbXBvbmVudHMvZmVhdHVyZXMvaGFiaXQvaGFiaXRjYXJkL2hhYml0Y2FyZFwiO1xyXG5pbXBvcnQgeyB0IH0gZnJvbSBcIkAvdHJhbnNsYXRpb25zL2hlbHBlclwiO1xyXG5pbXBvcnQgXCJAL3N0eWxlcy9oYWJpdC5jc3NcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBIYWJpdENoYXJ0TW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcblx0cHJpdmF0ZSBoYWJpdDogRGFpbHlIYWJpdFByb3BzO1xyXG5cdHByaXZhdGUgY2FyZDogSGFiaXRDYXJkO1xyXG5cdHByaXZhdGUgaGVhdG1hcEhvc3RFbCE6IEhUTUxFbGVtZW50O1xyXG5cdHByaXZhdGUgZWFybGllc3REYXRlU3RyOiBzdHJpbmc7XHJcblx0cHJpdmF0ZSB0b2RheVN0cjogc3RyaW5nO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgY2FyZDogSGFiaXRDYXJkLCBoYWJpdDogRGFpbHlIYWJpdFByb3BzKSB7XHJcblx0XHRzdXBlcihhcHApO1xyXG5cdFx0dGhpcy5jYXJkID0gY2FyZDtcclxuXHRcdHRoaXMuaGFiaXQgPSBoYWJpdDtcclxuXHJcblx0XHRjb25zdCBkYXRlcyA9IE9iamVjdC5rZXlzKHRoaXMuaGFiaXQuY29tcGxldGlvbnMgfHwge30pO1xyXG5cdFx0aWYgKGRhdGVzLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0Y29uc3QgbWluID0gZGF0ZXMucmVkdWNlKChtaW4sIGQpID0+IChkIDwgbWluID8gZCA6IG1pbikpO1xyXG5cdFx0XHR0aGlzLmVhcmxpZXN0RGF0ZVN0ciA9IG1pbjtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuZWFybGllc3REYXRlU3RyID0gZ2V0VG9kYXlMb2NhbERhdGVTdHJpbmcoKTtcclxuXHRcdH1cclxuXHRcdHRoaXMudG9kYXlTdHIgPSBnZXRUb2RheUxvY2FsRGF0ZVN0cmluZygpO1xyXG5cdH1cclxuXHJcblx0b25PcGVuKCk6IHZvaWQge1xyXG5cdFx0Y29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcblx0XHRjb250ZW50RWwuZW1wdHkoKTtcclxuXHRcdHRoaXMubW9kYWxFbC50b2dnbGVDbGFzcyhcImhhYml0LWNoYXJ0LW1vZGFsXCIsIHRydWUpO1xyXG5cclxuXHRcdHRoaXMuc2V0VGl0bGUoYCR7dGhpcy5oYWJpdC5uYW1lfSDCtyBIZWF0bWFwYCk7XHJcblxyXG5cdFx0Ly8gQ29udHJvbHMgKHVzZSBPYnNpZGlhbiBTZXR0aW5nICsgZHJvcGRvd25zKVxyXG5cdFx0Y29uc3QgY29udHJvbHMgPSBjb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiBcImhhYml0LWNoYXJ0LWNvbnRyb2xzXCIgfSk7XHJcblx0XHRjb25zdCBlYXJsaWVzdFllYXIgPSBOdW1iZXIodGhpcy5lYXJsaWVzdERhdGVTdHIuc2xpY2UoMCwgNCkpO1xyXG5cdFx0Y29uc3QgY3VycmVudFllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XHJcblx0XHRsZXQgc2VsZWN0ZWRSYW5nZTogc3RyaW5nID0gXCJhbGxcIjsgLy8gYWxsIHwgN2QgfCAzMGQgfCAzNjVkIHwgeWVhclxyXG5cdFx0bGV0IHNlbGVjdGVkWWVhcjogc3RyaW5nID0gU3RyaW5nKGN1cnJlbnRZZWFyKTtcclxuXHJcblx0XHRjb25zdCByYW5nZVNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250cm9scylcclxuXHRcdFx0LnNldE5hbWUodChcIlJhbmdlXCIpKVxyXG5cdFx0XHQuYWRkRHJvcGRvd24oKGRkKSA9PiB7XHJcblx0XHRcdFx0ZGQuYWRkT3B0aW9ucyh7XHJcblx0XHRcdFx0XHRhbGw6IHQoXCJBbGwgaGlzdG9yeVwiKSxcclxuXHRcdFx0XHRcdFwiN2RcIjogdChcIkxhc3Qgd2Vla1wiKSxcclxuXHRcdFx0XHRcdFwiMzBkXCI6IHQoXCJMYXN0IG1vbnRoXCIpLFxyXG5cdFx0XHRcdFx0XCIzNjVkXCI6IHQoXCJMYXN0IHllYXJcIiksXHJcblx0XHRcdFx0XHR5ZWFyOiB0KFwiRnVsbCB5ZWFyXCIpLFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGRkLnNldFZhbHVlKHNlbGVjdGVkUmFuZ2UpO1xyXG5cdFx0XHRcdGRkLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0c2VsZWN0ZWRSYW5nZSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0eWVhclNldHRpbmcuc2V0dGluZ0VsLnRvZ2dsZUNsYXNzKFxyXG5cdFx0XHRcdFx0XHRcImlzLWRpc2FibGVkXCIsXHJcblx0XHRcdFx0XHRcdHZhbHVlICE9PSBcInllYXJcIlxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdHllYXJTZWxlY3QuZGlzYWJsZWQgPSB2YWx1ZSAhPT0gXCJ5ZWFyXCI7XHJcblx0XHRcdFx0XHR0aGlzLnJlbmRlclNlbGVjdGVkKHNlbGVjdGVkUmFuZ2UsIHNlbGVjdGVkWWVhcik7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdGxldCB5ZWFyU2VsZWN0OiBIVE1MU2VsZWN0RWxlbWVudCA9IG51bGwhO1xyXG5cdFx0Y29uc3QgeWVhclNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250cm9scylcclxuXHRcdFx0LnNldE5hbWUodChcIlllYXJcIikpXHJcblx0XHRcdC5hZGREcm9wZG93bigoZGQpID0+IHtcclxuXHRcdFx0XHR5ZWFyU2VsZWN0ID0gZGQuc2VsZWN0RWw7XHJcblx0XHRcdFx0Zm9yIChsZXQgeSA9IGN1cnJlbnRZZWFyOyB5ID49IGVhcmxpZXN0WWVhcjsgeS0tKSB7XHJcblx0XHRcdFx0XHRkZC5hZGRPcHRpb24oU3RyaW5nKHkpLCBTdHJpbmcoeSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRkZC5zZXRWYWx1ZShzZWxlY3RlZFllYXIpO1xyXG5cdFx0XHRcdGRkLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0c2VsZWN0ZWRZZWFyID0gdmFsdWU7XHJcblx0XHRcdFx0XHRpZiAoc2VsZWN0ZWRSYW5nZSA9PT0gXCJ5ZWFyXCIpXHJcblx0XHRcdFx0XHRcdHRoaXMucmVuZGVyU2VsZWN0ZWQoc2VsZWN0ZWRSYW5nZSwgc2VsZWN0ZWRZZWFyKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblx0XHR5ZWFyU2V0dGluZy5zZXR0aW5nRWwudG9nZ2xlQ2xhc3MoXHJcblx0XHRcdFwiaXMtZGlzYWJsZWRcIixcclxuXHRcdFx0c2VsZWN0ZWRSYW5nZSAhPT0gXCJ5ZWFyXCJcclxuXHRcdCk7XHJcblx0XHR5ZWFyU2VsZWN0LmRpc2FibGVkID0gc2VsZWN0ZWRSYW5nZSAhPT0gXCJ5ZWFyXCI7XHJcblxyXG5cdFx0Ly8gSGVhdG1hcCBob3N0XHJcblx0XHR0aGlzLmhlYXRtYXBIb3N0RWwgPSBjb250ZW50RWwuY3JlYXRlRGl2KHtcclxuXHRcdFx0Y2xzOiBcImhhYml0LWNoYXJ0LWhlYXRtYXBcIixcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIEluaXRpYWwgcmVuZGVyXHJcblx0XHR0aGlzLnJlbmRlclNlbGVjdGVkKHNlbGVjdGVkUmFuZ2UsIHNlbGVjdGVkWWVhcik7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHJlbmRlclNlbGVjdGVkKHJhbmdlOiBzdHJpbmcsIHllYXI6IHN0cmluZykge1xyXG5cdFx0aWYgKHJhbmdlID09PSBcImFsbFwiKSB7XHJcblx0XHRcdHRoaXMucmVuZGVyUmFuZ2UodGhpcy5lYXJsaWVzdERhdGVTdHIsIHRoaXMudG9kYXlTdHIpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRpZiAocmFuZ2UgPT09IFwiN2RcIikge1xyXG5cdFx0XHR0aGlzLnJlbmRlckxhc3RORGF5cyg3KTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHJhbmdlID09PSBcIjMwZFwiKSB7XHJcblx0XHRcdHRoaXMucmVuZGVyTGFzdE1vbnRoQ2FsZW5kYXIoKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHJhbmdlID09PSBcIjM2NWRcIikge1xyXG5cdFx0XHR0aGlzLnJlbmRlckxhc3RORGF5cygzNjUpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRpZiAocmFuZ2UgPT09IFwieWVhclwiKSB7XHJcblx0XHRcdGNvbnN0IHkgPSBwYXJzZUludCh5ZWFyLCAxMCk7XHJcblx0XHRcdHRoaXMucmVuZGVyWWVhckNhbGVuZGFyKHkpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHQvLyBGYWxsYmFja1xyXG5cdFx0dGhpcy5yZW5kZXJSYW5nZSh0aGlzLmVhcmxpZXN0RGF0ZVN0ciwgdGhpcy50b2RheVN0cik7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGNyZWF0ZUNhbGVuZGFyQ29udGFpbmVyKHJvd3M6IG51bWJlciwgY29sczogbnVtYmVyKSB7XHJcblx0XHRjb25zdCByb290ID0gdGhpcy5oZWF0bWFwSG9zdEVsLmNyZWF0ZURpdih7XHJcblx0XHRcdGNsczogYHRnLWhlYXRtYXAtcm9vdCBoZWF0bWFwLW1kYCxcclxuXHRcdH0pO1xyXG5cdFx0Y29uc3QgZ3JpZCA9IHJvb3QuY3JlYXRlRGl2KHsgY2xzOiBcImhlYXRtYXAtY29udGFpbmVyLWNhbGVuZGFyXCIgfSk7XHJcblx0XHQoZ3JpZCBhcyBIVE1MRGl2RWxlbWVudCkuc3R5bGUuZGlzcGxheSA9IFwiZ3JpZFwiO1xyXG5cdFx0KFxyXG5cdFx0XHRncmlkIGFzIEhUTUxEaXZFbGVtZW50XHJcblx0XHQpLnN0eWxlLmdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBgcmVwZWF0KCR7Y29sc30sIDFmcilgO1xyXG5cdFx0KFxyXG5cdFx0XHRncmlkIGFzIEhUTUxEaXZFbGVtZW50XHJcblx0XHQpLnN0eWxlLmdyaWRUZW1wbGF0ZVJvd3MgPSBgcmVwZWF0KCR7cm93c30sIGF1dG8pYDtcclxuXHRcdChncmlkIGFzIEhUTUxEaXZFbGVtZW50KS5zdHlsZS5nYXAgPSBcInZhcigtLXNpemUtMi0yKVwiO1xyXG5cdFx0cmV0dXJuIGdyaWQ7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHJlbmRlclllYXJDYWxlbmRhcih5ZWFyOiBudW1iZXIpIHtcclxuXHRcdHRoaXMuaGVhdG1hcEhvc3RFbC5lbXB0eSgpO1xyXG5cdFx0Y29uc3Qgc3RhcnQgPSBuZXcgRGF0ZSh5ZWFyLCAwLCAxKTtcclxuXHRcdGNvbnN0IGVuZCA9IG5ldyBEYXRlKHllYXIsIDExLCAzMSk7XHJcblx0XHQvLyBBbGlnbiB0byBNb25kYXkgYW5kIFN1bmRheVxyXG5cdFx0Y29uc3Qgc3RhcnREb3cgPSAoc3RhcnQuZ2V0RGF5KCkgKyA2KSAlIDc7IC8vIDA9TW9uXHJcblx0XHRjb25zdCBhbGlnbmVkU3RhcnQgPSBuZXcgRGF0ZShzdGFydCk7XHJcblx0XHRhbGlnbmVkU3RhcnQuc2V0RGF0ZShzdGFydC5nZXREYXRlKCkgLSBzdGFydERvdyk7XHJcblx0XHRjb25zdCBlbmREb3cgPSBlbmQuZ2V0RGF5KCk7IC8vIDA9U3VuXHJcblx0XHRjb25zdCBhZGQgPSAoNyAtIGVuZERvdyAtIDEgKyA3KSAlIDc7IC8vIGRheXMgdG8gcmVhY2ggU3VuZGF5IChlbmREb3c9MCA9PiAwKVxyXG5cdFx0Y29uc3QgYWxpZ25lZEVuZCA9IG5ldyBEYXRlKGVuZCk7XHJcblx0XHRhbGlnbmVkRW5kLnNldERhdGUoZW5kLmdldERhdGUoKSArIGFkZCk7XHJcblx0XHRjb25zdCB0b3RhbERheXMgPVxyXG5cdFx0XHRNYXRoLmZsb29yKFxyXG5cdFx0XHRcdChhbGlnbmVkRW5kLmdldFRpbWUoKSAtIGFsaWduZWRTdGFydC5nZXRUaW1lKCkpIC8gODY0MDAwMDBcclxuXHRcdFx0KSArIDE7XHJcblx0XHRjb25zdCB3ZWVrcyA9IE1hdGguY2VpbCh0b3RhbERheXMgLyA3KTtcclxuXHRcdGNvbnN0IGdyaWQgPSB0aGlzLmNyZWF0ZUNhbGVuZGFyQ29udGFpbmVyKDcsIHdlZWtzKTtcclxuXHJcblx0XHRjb25zdCBnZXRWYXJpYW50ID0gKHZhbHVlOiBhbnkpID0+XHJcblx0XHRcdHRoaXMuaGFiaXQuY29tcGxldGlvblRleHQgPyB2YWx1ZSA9PT0gMSA6IHZhbHVlID09PSB0cnVlO1xyXG5cdFx0Y29uc3QgY29tcHMgPSB0aGlzLmhhYml0LmNvbXBsZXRpb25zIHx8IHt9O1xyXG5cdFx0Zm9yIChsZXQgdyA9IDA7IHcgPCB3ZWVrczsgdysrKSB7XHJcblx0XHRcdGZvciAobGV0IGQgPSAwOyBkIDwgNzsgZCsrKSB7XHJcblx0XHRcdFx0Y29uc3QgZGF0ZU9iaiA9IG5ldyBEYXRlKFxyXG5cdFx0XHRcdFx0YWxpZ25lZFN0YXJ0LmdldFRpbWUoKSArICh3ICogNyArIGQpICogODY0MDAwMDBcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRcdGNvbnN0IGRhdGVTdHIgPSBnZXRMb2NhbERhdGVTdHJpbmcoZGF0ZU9iaik7XHJcblx0XHRcdFx0Y29uc3QgY2VsbFZhbHVlID0gY29tcHNbZGF0ZVN0cl07XHJcblx0XHRcdFx0Y29uc3QgaXNJblllYXIgPSBkYXRlT2JqID49IHN0YXJ0ICYmIGRhdGVPYmogPD0gZW5kO1xyXG5cdFx0XHRcdGNvbnN0IGlzRmlsbGVkID0gaXNJblllYXIgJiYgZ2V0VmFyaWFudChjZWxsVmFsdWUpO1xyXG5cdFx0XHRcdGNvbnN0IGNlbGwgPSBncmlkLmNyZWF0ZURpdih7XHJcblx0XHRcdFx0XHRjbHM6IGBoZWF0bWFwLWNlbGwgaGVhdG1hcC1jZWxsLXNxdWFyZWAsXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0Y2VsbC5kYXRhc2V0LmRhdGUgPSBkYXRlU3RyO1xyXG5cdFx0XHRcdGxldCB0b29sdGlwID1cclxuXHRcdFx0XHRcdGAke2RhdGVTdHJ9OiBgICtcclxuXHRcdFx0XHRcdChjZWxsVmFsdWUgPT0gbnVsbFxyXG5cdFx0XHRcdFx0XHQ/IHQoXCJNaXNzZWRcIilcclxuXHRcdFx0XHRcdFx0OiBpc0ZpbGxlZFxyXG5cdFx0XHRcdFx0XHQ/IHQoXCJDb21wbGV0ZWRcIilcclxuXHRcdFx0XHRcdFx0OiB0KFwiTWlzc2VkXCIpKTtcclxuXHRcdFx0XHRjZWxsLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdG9vbHRpcCk7XHJcblx0XHRcdFx0aWYgKGlzSW5ZZWFyKSB7XHJcblx0XHRcdFx0XHRjZWxsLmFkZENsYXNzKGlzRmlsbGVkID8gXCJmaWxsZWRcIiA6IFwiZGVmYXVsdFwiKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Y2VsbC5hZGRDbGFzcyhcImRlZmF1bHRcIik7XHJcblx0XHRcdFx0XHQoY2VsbCBhcyBIVE1MRGl2RWxlbWVudCkuc3R5bGUub3BhY2l0eSA9IFwiMC4yNVwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSByZW5kZXJMYXN0TW9udGhDYWxlbmRhcigpIHtcclxuXHRcdHRoaXMuaGVhdG1hcEhvc3RFbC5lbXB0eSgpO1xyXG5cdFx0Y29uc3QgZW5kID0gbmV3IERhdGUoKTtcclxuXHRcdGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoZW5kLmdldFRpbWUoKSAtIDI5ICogODY0MDAwMDApO1xyXG5cdFx0Ly8gYWxpZ24gc3RhcnQgdG8gTW9uZGF5IG9mIGl0cyB3ZWVrXHJcblx0XHRjb25zdCBzdGFydERvdyA9IChzdGFydC5nZXREYXkoKSArIDYpICUgNzsgLy8gMD1Nb25cclxuXHRcdGNvbnN0IGFsaWduZWRTdGFydCA9IG5ldyBEYXRlKHN0YXJ0KTtcclxuXHRcdGFsaWduZWRTdGFydC5zZXREYXRlKHN0YXJ0LmdldERhdGUoKSAtIHN0YXJ0RG93KTtcclxuXHRcdGNvbnN0IHJvd3MgPSA1LFxyXG5cdFx0XHRjb2xzID0gNztcclxuXHRcdGNvbnN0IGdyaWQgPSB0aGlzLmNyZWF0ZUNhbGVuZGFyQ29udGFpbmVyKHJvd3MsIGNvbHMpO1xyXG5cdFx0Y29uc3QgZ2V0VmFyaWFudCA9ICh2YWx1ZTogYW55KSA9PlxyXG5cdFx0XHR0aGlzLmhhYml0LmNvbXBsZXRpb25UZXh0ID8gdmFsdWUgPT09IDEgOiB2YWx1ZSA9PT0gdHJ1ZTtcclxuXHRcdGNvbnN0IGNvbXBzID0gdGhpcy5oYWJpdC5jb21wbGV0aW9ucyB8fCB7fTtcclxuXHRcdGZvciAobGV0IHIgPSAwOyByIDwgcm93czsgcisrKSB7XHJcblx0XHRcdGZvciAobGV0IGMgPSAwOyBjIDwgY29sczsgYysrKSB7XHJcblx0XHRcdFx0Y29uc3QgZGF5SW5kZXggPSByICogNyArIGM7XHJcblx0XHRcdFx0Y29uc3QgZGF0ZU9iaiA9IG5ldyBEYXRlKFxyXG5cdFx0XHRcdFx0YWxpZ25lZFN0YXJ0LmdldFRpbWUoKSArIGRheUluZGV4ICogODY0MDAwMDBcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRcdGNvbnN0IGRhdGVTdHIgPSBnZXRMb2NhbERhdGVTdHJpbmcoZGF0ZU9iaik7XHJcblx0XHRcdFx0Y29uc3QgaW5SYW5nZSA9IGRhdGVPYmogPj0gc3RhcnQgJiYgZGF0ZU9iaiA8PSBlbmQ7XHJcblx0XHRcdFx0Y29uc3QgY2VsbFZhbHVlID0gY29tcHNbZGF0ZVN0cl07XHJcblx0XHRcdFx0Y29uc3QgaXNGaWxsZWQgPSBpblJhbmdlICYmIGdldFZhcmlhbnQoY2VsbFZhbHVlKTtcclxuXHRcdFx0XHRjb25zdCBjZWxsID0gZ3JpZC5jcmVhdGVEaXYoe1xyXG5cdFx0XHRcdFx0Y2xzOiBgaGVhdG1hcC1jZWxsIGhlYXRtYXAtY2VsbC1zcXVhcmVgLFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGNlbGwuZGF0YXNldC5kYXRlID0gZGF0ZVN0cjtcclxuXHRcdFx0XHRsZXQgdG9vbHRpcCA9XHJcblx0XHRcdFx0XHRgJHtkYXRlU3RyfTogYCArXHJcblx0XHRcdFx0XHQoY2VsbFZhbHVlID09IG51bGxcclxuXHRcdFx0XHRcdFx0PyB0KFwiTWlzc2VkXCIpXHJcblx0XHRcdFx0XHRcdDogaXNGaWxsZWRcclxuXHRcdFx0XHRcdFx0PyB0KFwiQ29tcGxldGVkXCIpXHJcblx0XHRcdFx0XHRcdDogdChcIk1pc3NlZFwiKSk7XHJcblx0XHRcdFx0Y2VsbC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHRvb2x0aXApO1xyXG5cdFx0XHRcdGNlbGwuYWRkQ2xhc3MoXHJcblx0XHRcdFx0XHRpblJhbmdlID8gKGlzRmlsbGVkID8gXCJmaWxsZWRcIiA6IFwiZGVmYXVsdFwiKSA6IFwiZGVmYXVsdFwiXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0XHRpZiAoIWluUmFuZ2UpIChjZWxsIGFzIEhUTUxEaXZFbGVtZW50KS5zdHlsZS5vcGFjaXR5ID0gXCIwLjI1XCI7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgcmVuZGVyTGFzdE5EYXlzKG46IG51bWJlcikge1xyXG5cdFx0Y29uc3QgZW5kID0gbmV3IERhdGUoKTtcclxuXHRcdGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoZW5kLmdldFRpbWUoKSAtIChuIC0gMSkgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcclxuXHRcdHRoaXMucmVuZGVyUmFuZ2UoZ2V0TG9jYWxEYXRlU3RyaW5nKHN0YXJ0KSwgZ2V0TG9jYWxEYXRlU3RyaW5nKGVuZCkpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSByZW5kZXJSYW5nZShzdGFydFN0cjogc3RyaW5nLCBlbmRTdHI6IHN0cmluZykge1xyXG5cdFx0dGhpcy5oZWF0bWFwSG9zdEVsLmVtcHR5KCk7XHJcblx0XHRjb25zdCBnZXRWYXJpYW50ID0gKHZhbHVlOiBhbnkpID0+IHtcclxuXHRcdFx0aWYgKHRoaXMuaGFiaXQuY29tcGxldGlvblRleHQpIHJldHVybiB2YWx1ZSA9PT0gMTtcclxuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB0cnVlO1xyXG5cdFx0fTtcclxuXHRcdHRoaXMuY2FyZC5yZW5kZXJIZWF0bWFwUmFuZ2UoXHJcblx0XHRcdHRoaXMuaGVhdG1hcEhvc3RFbCxcclxuXHRcdFx0dGhpcy5oYWJpdC5jb21wbGV0aW9ucyB8fCB7fSxcclxuXHRcdFx0c3RhcnRTdHIsXHJcblx0XHRcdGVuZFN0cixcclxuXHRcdFx0XCJtZFwiLFxyXG5cdFx0XHRnZXRWYXJpYW50XHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0b25DbG9zZSgpOiB2b2lkIHtcclxuXHRcdHRoaXMuY29udGVudEVsLmVtcHR5KCk7XHJcblx0fVxyXG59XHJcbiJdfQ==