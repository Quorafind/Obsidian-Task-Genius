import { Component } from "obsidian";
/**
 * Base class for view components to unify common behaviors across special views
 * (kanban, calendar, gantt, forecast, quadrant, table, twocolumn, ...)
 *
 * Note: Intentionally minimal and non-invasive so existing components can
 * progressively migrate to extend this class without large refactors.
 */
export class ViewComponent extends Component {
    constructor(app, plugin, viewId) {
        super();
        this.configOverride = null;
        this.app = app;
        this.plugin = plugin;
        this.currentViewId = viewId;
    }
    /**
     * Inject per-view override configuration (e.g., from Bases view config)
     * Subclasses should merge this with their own config and refresh UI if needed.
     */
    setConfigOverride(override) {
        this.configOverride = override !== null && override !== void 0 ? override : null;
    }
    /** Optional hooks for specific view components to implement */
    // Provide tasks to the component (filteredTasks, allTasks, forceRefresh?)
    setTasks(_tasks, _allTasks, _forceRefresh) { }
    // Update tasks incrementally (some components expose this instead of setTasks)
    updateTasks(_tasks) { }
    // Switch internal mode (some views support different modes within the same component)
    setViewMode(_viewMode, _project) { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlld0NvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlZpZXdDb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFPLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUsxQzs7Ozs7O0dBTUc7QUFDSCxNQUFNLE9BQWdCLGFBQStCLFNBQVEsU0FBUztJQU1wRSxZQUFZLEdBQVEsRUFBRSxNQUE2QixFQUFFLE1BQWM7UUFDakUsS0FBSyxFQUFFLENBQUM7UUFIQSxtQkFBYyxHQUE4QixJQUFJLENBQUM7UUFJekQsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksaUJBQWlCLENBQUMsUUFBbUM7UUFDMUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLGFBQVIsUUFBUSxjQUFSLFFBQVEsR0FBSSxJQUFJLENBQUM7SUFDekMsQ0FBQztJQUVELCtEQUErRDtJQUMvRCwwRUFBMEU7SUFDbkUsUUFBUSxDQUFDLE1BQWMsRUFBRSxTQUFrQixFQUFFLGFBQXVCLElBQVMsQ0FBQztJQUVyRiwrRUFBK0U7SUFDeEUsV0FBVyxDQUFDLE1BQWMsSUFBUyxDQUFDO0lBRTNDLHNGQUFzRjtJQUMvRSxXQUFXLENBQUMsU0FBbUIsRUFBRSxRQUF3QixJQUFTLENBQUM7Q0FDM0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAsIENvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgVGFza1Byb2dyZXNzQmFyUGx1Z2luIGZyb20gXCJAL2luZGV4XCI7XHJcbmltcG9ydCB7IFRhc2sgfSBmcm9tIFwiQC90eXBlcy90YXNrXCI7XHJcbmltcG9ydCB7IFZpZXdNb2RlIH0gZnJvbSBcIkAvY29tbW9uL3NldHRpbmctZGVmaW5pdGlvblwiO1xyXG5cclxuLyoqXHJcbiAqIEJhc2UgY2xhc3MgZm9yIHZpZXcgY29tcG9uZW50cyB0byB1bmlmeSBjb21tb24gYmVoYXZpb3JzIGFjcm9zcyBzcGVjaWFsIHZpZXdzXHJcbiAqIChrYW5iYW4sIGNhbGVuZGFyLCBnYW50dCwgZm9yZWNhc3QsIHF1YWRyYW50LCB0YWJsZSwgdHdvY29sdW1uLCAuLi4pXHJcbiAqXHJcbiAqIE5vdGU6IEludGVudGlvbmFsbHkgbWluaW1hbCBhbmQgbm9uLWludmFzaXZlIHNvIGV4aXN0aW5nIGNvbXBvbmVudHMgY2FuXHJcbiAqIHByb2dyZXNzaXZlbHkgbWlncmF0ZSB0byBleHRlbmQgdGhpcyBjbGFzcyB3aXRob3V0IGxhcmdlIHJlZmFjdG9ycy5cclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWaWV3Q29tcG9uZW50PFRPdmVycmlkZSA9IGFueT4gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIHByb3RlY3RlZCBhcHA6IEFwcDtcclxuICBwcm90ZWN0ZWQgcGx1Z2luOiBUYXNrUHJvZ3Jlc3NCYXJQbHVnaW47XHJcbiAgcHJvdGVjdGVkIGN1cnJlbnRWaWV3SWQ6IHN0cmluZztcclxuICBwcm90ZWN0ZWQgY29uZmlnT3ZlcnJpZGU6IFBhcnRpYWw8VE92ZXJyaWRlPiB8IG51bGwgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBUYXNrUHJvZ3Jlc3NCYXJQbHVnaW4sIHZpZXdJZDogc3RyaW5nKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgIHRoaXMuY3VycmVudFZpZXdJZCA9IHZpZXdJZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluamVjdCBwZXItdmlldyBvdmVycmlkZSBjb25maWd1cmF0aW9uIChlLmcuLCBmcm9tIEJhc2VzIHZpZXcgY29uZmlnKVxyXG4gICAqIFN1YmNsYXNzZXMgc2hvdWxkIG1lcmdlIHRoaXMgd2l0aCB0aGVpciBvd24gY29uZmlnIGFuZCByZWZyZXNoIFVJIGlmIG5lZWRlZC5cclxuICAgKi9cclxuICBwdWJsaWMgc2V0Q29uZmlnT3ZlcnJpZGUob3ZlcnJpZGU6IFBhcnRpYWw8VE92ZXJyaWRlPiB8IG51bGwpOiB2b2lkIHtcclxuICAgIHRoaXMuY29uZmlnT3ZlcnJpZGUgPSBvdmVycmlkZSA/PyBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqIE9wdGlvbmFsIGhvb2tzIGZvciBzcGVjaWZpYyB2aWV3IGNvbXBvbmVudHMgdG8gaW1wbGVtZW50ICovXHJcbiAgLy8gUHJvdmlkZSB0YXNrcyB0byB0aGUgY29tcG9uZW50IChmaWx0ZXJlZFRhc2tzLCBhbGxUYXNrcywgZm9yY2VSZWZyZXNoPylcclxuICBwdWJsaWMgc2V0VGFza3MoX3Rhc2tzOiBUYXNrW10sIF9hbGxUYXNrcz86IFRhc2tbXSwgX2ZvcmNlUmVmcmVzaD86IGJvb2xlYW4pOiB2b2lkIHt9XHJcblxyXG4gIC8vIFVwZGF0ZSB0YXNrcyBpbmNyZW1lbnRhbGx5IChzb21lIGNvbXBvbmVudHMgZXhwb3NlIHRoaXMgaW5zdGVhZCBvZiBzZXRUYXNrcylcclxuICBwdWJsaWMgdXBkYXRlVGFza3MoX3Rhc2tzOiBUYXNrW10pOiB2b2lkIHt9XHJcblxyXG4gIC8vIFN3aXRjaCBpbnRlcm5hbCBtb2RlIChzb21lIHZpZXdzIHN1cHBvcnQgZGlmZmVyZW50IG1vZGVzIHdpdGhpbiB0aGUgc2FtZSBjb21wb25lbnQpXHJcbiAgcHVibGljIHNldFZpZXdNb2RlKF92aWV3TW9kZTogVmlld01vZGUsIF9wcm9qZWN0Pzogc3RyaW5nIHwgbnVsbCk6IHZvaWQge31cclxufVxyXG5cclxuIl19