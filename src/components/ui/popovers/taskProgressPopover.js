import { editorInfoField, HoverPopover, MarkdownRenderer } from "obsidian";
class TaskProgressBarPopover extends HoverPopover {
    constructor(plugin, data, parent, targetEl, waitTime = 1000) {
        super(parent, targetEl, waitTime);
        this.hoverEl.toggleClass("task-progress-bar-popover", true);
        this.plugin = plugin;
        this.data = data;
    }
    onload() {
        MarkdownRenderer.render(this.plugin.app, `
| Status | Count |
| --- | --- |
| Total | ${this.data.total} |
| Completed | ${this.data.completed} |
| In Progress | ${this.data.inProgress} |
| Abandoned | ${this.data.abandoned} |
| Not Started | ${this.data.notStarted} |
| Planned | ${this.data.planned} |
`, this.hoverEl, "", this.plugin);
    }
}
export const showPopoverWithProgressBar = (plugin, { progressBar, data, view, }) => {
    const editor = view.state.field(editorInfoField);
    if (!editor)
        return;
    new TaskProgressBarPopover(plugin, data, editor, progressBar);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFza1Byb2dyZXNzUG9wb3Zlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRhc2tQcm9ncmVzc1BvcG92ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBZSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFJeEYsTUFBTSxzQkFBdUIsU0FBUSxZQUFZO0lBV2hELFlBQ0MsTUFBNkIsRUFDN0IsSUFPQyxFQUNELE1BQW1CLEVBQ25CLFFBQXFCLEVBQ3JCLFFBQVEsR0FBRyxJQUFJO1FBRWYsS0FBSyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU07UUFDTCxnQkFBZ0IsQ0FBQyxNQUFNLENBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUNmOzs7WUFHUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7Z0JBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTO2tCQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVU7Z0JBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUztrQkFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVO2NBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTztDQUM5QixFQUNFLElBQUksQ0FBQyxPQUFPLEVBQ1osRUFBRSxFQUNGLElBQUksQ0FBQyxNQUFNLENBQ1gsQ0FBQztJQUNILENBQUM7Q0FDRDtBQUVELE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLENBQ3pDLE1BQTZCLEVBQzdCLEVBQ0MsV0FBVyxFQUNYLElBQUksRUFDSixJQUFJLEdBWUosRUFDQSxFQUFFO0lBQ0gsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDakQsSUFBSSxDQUFDLE1BQU07UUFBRSxPQUFPO0lBQ3BCLElBQUksc0JBQXNCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZWRpdG9ySW5mb0ZpZWxkLCBIb3ZlclBhcmVudCwgSG92ZXJQb3BvdmVyLCBNYXJrZG93blJlbmRlcmVyIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xyXG5pbXBvcnQgVGFza1Byb2dyZXNzQmFyUGx1Z2luIGZyb20gXCJAL2luZGV4XCI7XHJcblxyXG5jbGFzcyBUYXNrUHJvZ3Jlc3NCYXJQb3BvdmVyIGV4dGVuZHMgSG92ZXJQb3BvdmVyIHtcclxuXHRwbHVnaW46IFRhc2tQcm9ncmVzc0JhclBsdWdpbjtcclxuXHRkYXRhOiB7XHJcblx0XHRjb21wbGV0ZWQ6IHN0cmluZztcclxuXHRcdHRvdGFsOiBzdHJpbmc7XHJcblx0XHRpblByb2dyZXNzOiBzdHJpbmc7XHJcblx0XHRhYmFuZG9uZWQ6IHN0cmluZztcclxuXHRcdG5vdFN0YXJ0ZWQ6IHN0cmluZztcclxuXHRcdHBsYW5uZWQ6IHN0cmluZztcclxuXHR9O1xyXG5cclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdHBsdWdpbjogVGFza1Byb2dyZXNzQmFyUGx1Z2luLFxyXG5cdFx0ZGF0YToge1xyXG5cdFx0XHRjb21wbGV0ZWQ6IHN0cmluZztcclxuXHRcdFx0dG90YWw6IHN0cmluZztcclxuXHRcdFx0aW5Qcm9ncmVzczogc3RyaW5nO1xyXG5cdFx0XHRhYmFuZG9uZWQ6IHN0cmluZztcclxuXHRcdFx0bm90U3RhcnRlZDogc3RyaW5nO1xyXG5cdFx0XHRwbGFubmVkOiBzdHJpbmc7XHJcblx0XHR9LFxyXG5cdFx0cGFyZW50OiBIb3ZlclBhcmVudCxcclxuXHRcdHRhcmdldEVsOiBIVE1MRWxlbWVudCxcclxuXHRcdHdhaXRUaW1lID0gMTAwMFxyXG5cdCkge1xyXG5cdFx0c3VwZXIocGFyZW50LCB0YXJnZXRFbCwgd2FpdFRpbWUpO1xyXG5cclxuXHRcdHRoaXMuaG92ZXJFbC50b2dnbGVDbGFzcyhcInRhc2stcHJvZ3Jlc3MtYmFyLXBvcG92ZXJcIiwgdHJ1ZSk7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XHJcblx0fVxyXG5cclxuXHRvbmxvYWQoKTogdm9pZCB7XHJcblx0XHRNYXJrZG93blJlbmRlcmVyLnJlbmRlcihcclxuXHRcdFx0dGhpcy5wbHVnaW4uYXBwLFxyXG5cdFx0XHRgXHJcbnwgU3RhdHVzIHwgQ291bnQgfFxyXG58IC0tLSB8IC0tLSB8XHJcbnwgVG90YWwgfCAke3RoaXMuZGF0YS50b3RhbH0gfFxyXG58IENvbXBsZXRlZCB8ICR7dGhpcy5kYXRhLmNvbXBsZXRlZH0gfFxyXG58IEluIFByb2dyZXNzIHwgJHt0aGlzLmRhdGEuaW5Qcm9ncmVzc30gfFxyXG58IEFiYW5kb25lZCB8ICR7dGhpcy5kYXRhLmFiYW5kb25lZH0gfFxyXG58IE5vdCBTdGFydGVkIHwgJHt0aGlzLmRhdGEubm90U3RhcnRlZH0gfFxyXG58IFBsYW5uZWQgfCAke3RoaXMuZGF0YS5wbGFubmVkfSB8XHJcbmAsXHJcblx0XHRcdHRoaXMuaG92ZXJFbCxcclxuXHRcdFx0XCJcIixcclxuXHRcdFx0dGhpcy5wbHVnaW5cclxuXHRcdCk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2hvd1BvcG92ZXJXaXRoUHJvZ3Jlc3NCYXIgPSAoXHJcblx0cGx1Z2luOiBUYXNrUHJvZ3Jlc3NCYXJQbHVnaW4sXHJcblx0e1xyXG5cdFx0cHJvZ3Jlc3NCYXIsXHJcblx0XHRkYXRhLFxyXG5cdFx0dmlldyxcclxuXHR9OiB7XHJcblx0XHRwcm9ncmVzc0JhcjogSFRNTEVsZW1lbnQ7XHJcblx0XHRkYXRhOiB7XHJcblx0XHRcdGNvbXBsZXRlZDogc3RyaW5nO1xyXG5cdFx0XHR0b3RhbDogc3RyaW5nO1xyXG5cdFx0XHRpblByb2dyZXNzOiBzdHJpbmc7XHJcblx0XHRcdGFiYW5kb25lZDogc3RyaW5nO1xyXG5cdFx0XHRub3RTdGFydGVkOiBzdHJpbmc7XHJcblx0XHRcdHBsYW5uZWQ6IHN0cmluZztcclxuXHRcdH07XHJcblx0XHR2aWV3OiBFZGl0b3JWaWV3O1xyXG5cdH1cclxuKSA9PiB7XHJcblx0Y29uc3QgZWRpdG9yID0gdmlldy5zdGF0ZS5maWVsZChlZGl0b3JJbmZvRmllbGQpO1xyXG5cdGlmICghZWRpdG9yKSByZXR1cm47XHJcblx0bmV3IFRhc2tQcm9ncmVzc0JhclBvcG92ZXIocGx1Z2luLCBkYXRhLCBlZGl0b3IsIHByb2dyZXNzQmFyKTtcclxufTtcclxuIl19