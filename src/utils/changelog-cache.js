const STORAGE_KEY = "task-genius-changelog-cache";
const getChannelKey = (isBeta) => isBeta ? "beta" : "stable";
const isChangelogCacheEntry = (value) => {
    if (!value || typeof value !== "object") {
        return false;
    }
    const entry = value;
    return (typeof entry.version === "string" &&
        typeof entry.markdown === "string" &&
        typeof entry.sourceUrl === "string" &&
        typeof entry.updatedAt === "number");
};
const sanitizeCachePayload = (value) => {
    if (!value || typeof value !== "object") {
        return {};
    }
    const payload = value;
    const sanitized = {};
    if (isChangelogCacheEntry(payload.stable)) {
        sanitized.stable = payload.stable;
    }
    if (isChangelogCacheEntry(payload.beta)) {
        sanitized.beta = payload.beta;
    }
    return sanitized;
};
const getStorage = () => {
    var _a;
    try {
        if (typeof window === "undefined") {
            return null;
        }
        return (_a = window.localStorage) !== null && _a !== void 0 ? _a : null;
    }
    catch (_b) {
        return null;
    }
};
const loadCache = (app) => {
    try {
        if (typeof (app === null || app === void 0 ? void 0 : app.loadLocalStorage) === "function") {
            return sanitizeCachePayload(app.loadLocalStorage(STORAGE_KEY));
        }
    }
    catch (error) {
        console.warn("[ChangelogCache] Failed to load via app localStorage", error);
    }
    const storage = getStorage();
    if (!storage) {
        return {};
    }
    try {
        const raw = storage.getItem(STORAGE_KEY);
        if (!raw) {
            return {};
        }
        return sanitizeCachePayload(JSON.parse(raw));
    }
    catch (error) {
        console.warn("[ChangelogCache] Failed to load via window localStorage", error);
        return {};
    }
};
const saveCache = (cache, app) => {
    try {
        if (typeof (app === null || app === void 0 ? void 0 : app.saveLocalStorage) === "function") {
            app.saveLocalStorage(STORAGE_KEY, cache);
            return;
        }
    }
    catch (error) {
        console.warn("[ChangelogCache] Failed to save via app localStorage", error);
    }
    const storage = getStorage();
    if (!storage) {
        return;
    }
    try {
        if (!cache.stable && !cache.beta) {
            storage.removeItem(STORAGE_KEY);
            return;
        }
        storage.setItem(STORAGE_KEY, JSON.stringify(cache));
    }
    catch (error) {
        console.warn("[ChangelogCache] Failed to save via window localStorage", error);
    }
};
export const getCachedChangelog = (version, isBeta, app) => {
    const cache = loadCache(app);
    const channel = getChannelKey(isBeta);
    const entry = cache[channel];
    if (!entry || entry.version !== version) {
        return null;
    }
    return entry;
};
export const getLatestCachedChangelog = (isBeta, app) => {
    var _a;
    const cache = loadCache(app);
    const channel = getChannelKey(isBeta);
    return (_a = cache[channel]) !== null && _a !== void 0 ? _a : null;
};
export const cacheChangelog = (version, isBeta, data, app) => {
    const cache = loadCache(app);
    const channel = getChannelKey(isBeta);
    cache[channel] = {
        version,
        markdown: data.markdown,
        sourceUrl: data.sourceUrl,
        updatedAt: Date.now(),
    };
    saveCache(cache, app);
};
//# sourceMappingURL=data:application/json;base64,