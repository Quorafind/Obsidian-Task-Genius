export class DateHelper {
    dateToX(date, startDate, dayWidth) {
        if (!startDate)
            return 0;
        const clampedDate = new Date(Math.max(date.getTime(), startDate.getTime())); // Clamp date to be >= startDate
        const daysDiff = this.daysBetween(startDate, clampedDate);
        return daysDiff * dayWidth;
    }
    xToDate(x, startDate, dayWidth) {
        if (!startDate || dayWidth <= 0)
            return null;
        const days = x / dayWidth;
        return this.addDays(startDate, days);
    }
    // Simple days between calculation (ignores time part)
    daysBetween(date1, date2) {
        const d1 = this.startOfDay(date1).getTime();
        const d2 = this.startOfDay(date2).getTime();
        // Use Math.floor to handle potential floating point issues and DST changes slightly better
        return Math.floor((d2 - d1) / (1000 * 60 * 60 * 24));
    }
    addDays(date, days) {
        const result = new Date(date);
        result.setDate(result.getDate() + days);
        return result;
    }
    startOfDay(date) {
        // Clone the date to avoid modifying the original object
        const result = new Date(date);
        result.setHours(0, 0, 0, 0);
        return result;
    }
    startOfWeek(date) {
        const result = new Date(date);
        const day = result.getDay(); // 0 = Sunday, 1 = Monday, ...
        // Adjust to Monday (handle Sunday case where getDay is 0)
        const diff = result.getDate() - day + (day === 0 ? -6 : 1);
        result.setDate(diff);
        return this.startOfDay(result);
    }
    endOfWeek(date) {
        const start = this.startOfWeek(date);
        const result = this.addDays(start, 6); // End on Sunday
        result.setHours(23, 59, 59, 999); // End of Sunday
        return result;
    }
    // ISO 8601 week number calculation
    getWeekNumber(d) {
        d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
        d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7)); // Set to Thursday of the week
        const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
        const weekNo = Math.ceil(((d.getTime() - yearStart.getTime()) / 86400000 + 1) / 7);
        return weekNo;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRlLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sVUFBVTtJQUNmLE9BQU8sQ0FBQyxJQUFVLEVBQUUsU0FBZSxFQUFFLFFBQWdCO1FBQzNELElBQUksQ0FBQyxTQUFTO1lBQUUsT0FBTyxDQUFDLENBQUM7UUFDekIsTUFBTSxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUM3QyxDQUFDLENBQUMsZ0NBQWdDO1FBQ25DLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzFELE9BQU8sUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDO0lBRU0sT0FBTyxDQUFDLENBQVMsRUFBRSxTQUFlLEVBQUUsUUFBZ0I7UUFDMUQsSUFBSSxDQUFDLFNBQVMsSUFBSSxRQUFRLElBQUksQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQzdDLE1BQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsc0RBQXNEO0lBQy9DLFdBQVcsQ0FBQyxLQUFXLEVBQUUsS0FBVztRQUMxQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzVDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDNUMsMkZBQTJGO1FBQzNGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVNLE9BQU8sQ0FBQyxJQUFVLEVBQUUsSUFBWTtRQUN0QyxNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUN4QyxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFFTSxVQUFVLENBQUMsSUFBVTtRQUMzQix3REFBd0Q7UUFDeEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFFTSxXQUFXLENBQUMsSUFBVTtRQUM1QixNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyw4QkFBOEI7UUFDM0QsMERBQTBEO1FBQzFELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLFNBQVMsQ0FBQyxJQUFVO1FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0I7UUFDdkQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLGdCQUFnQjtRQUNsRCxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFFRCxtQ0FBbUM7SUFDNUIsYUFBYSxDQUFDLENBQU87UUFDM0IsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25FLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsOEJBQThCO1FBQ3ZGLE1BQU0sU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FDeEQsQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIERhdGVIZWxwZXIge1xyXG5cdHB1YmxpYyBkYXRlVG9YKGRhdGU6IERhdGUsIHN0YXJ0RGF0ZTogRGF0ZSwgZGF5V2lkdGg6IG51bWJlcik6IG51bWJlciB7XHJcblx0XHRpZiAoIXN0YXJ0RGF0ZSkgcmV0dXJuIDA7XHJcblx0XHRjb25zdCBjbGFtcGVkRGF0ZSA9IG5ldyBEYXRlKFxyXG5cdFx0XHRNYXRoLm1heChkYXRlLmdldFRpbWUoKSwgc3RhcnREYXRlLmdldFRpbWUoKSlcclxuXHRcdCk7IC8vIENsYW1wIGRhdGUgdG8gYmUgPj0gc3RhcnREYXRlXHJcblx0XHRjb25zdCBkYXlzRGlmZiA9IHRoaXMuZGF5c0JldHdlZW4oc3RhcnREYXRlLCBjbGFtcGVkRGF0ZSk7XHJcblx0XHRyZXR1cm4gZGF5c0RpZmYgKiBkYXlXaWR0aDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyB4VG9EYXRlKHg6IG51bWJlciwgc3RhcnREYXRlOiBEYXRlLCBkYXlXaWR0aDogbnVtYmVyKTogRGF0ZSB8IG51bGwge1xyXG5cdFx0aWYgKCFzdGFydERhdGUgfHwgZGF5V2lkdGggPD0gMCkgcmV0dXJuIG51bGw7XHJcblx0XHRjb25zdCBkYXlzID0geCAvIGRheVdpZHRoO1xyXG5cdFx0cmV0dXJuIHRoaXMuYWRkRGF5cyhzdGFydERhdGUsIGRheXMpO1xyXG5cdH1cclxuXHJcblx0Ly8gU2ltcGxlIGRheXMgYmV0d2VlbiBjYWxjdWxhdGlvbiAoaWdub3JlcyB0aW1lIHBhcnQpXHJcblx0cHVibGljIGRheXNCZXR3ZWVuKGRhdGUxOiBEYXRlLCBkYXRlMjogRGF0ZSk6IG51bWJlciB7XHJcblx0XHRjb25zdCBkMSA9IHRoaXMuc3RhcnRPZkRheShkYXRlMSkuZ2V0VGltZSgpO1xyXG5cdFx0Y29uc3QgZDIgPSB0aGlzLnN0YXJ0T2ZEYXkoZGF0ZTIpLmdldFRpbWUoKTtcclxuXHRcdC8vIFVzZSBNYXRoLmZsb29yIHRvIGhhbmRsZSBwb3RlbnRpYWwgZmxvYXRpbmcgcG9pbnQgaXNzdWVzIGFuZCBEU1QgY2hhbmdlcyBzbGlnaHRseSBiZXR0ZXJcclxuXHRcdHJldHVybiBNYXRoLmZsb29yKChkMiAtIGQxKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgYWRkRGF5cyhkYXRlOiBEYXRlLCBkYXlzOiBudW1iZXIpOiBEYXRlIHtcclxuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyBEYXRlKGRhdGUpO1xyXG5cdFx0cmVzdWx0LnNldERhdGUocmVzdWx0LmdldERhdGUoKSArIGRheXMpO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzdGFydE9mRGF5KGRhdGU6IERhdGUpOiBEYXRlIHtcclxuXHRcdC8vIENsb25lIHRoZSBkYXRlIHRvIGF2b2lkIG1vZGlmeWluZyB0aGUgb3JpZ2luYWwgb2JqZWN0XHJcblx0XHRjb25zdCByZXN1bHQgPSBuZXcgRGF0ZShkYXRlKTtcclxuXHRcdHJlc3VsdC5zZXRIb3VycygwLCAwLCAwLCAwKTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhcnRPZldlZWsoZGF0ZTogRGF0ZSk6IERhdGUge1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IERhdGUoZGF0ZSk7XHJcblx0XHRjb25zdCBkYXkgPSByZXN1bHQuZ2V0RGF5KCk7IC8vIDAgPSBTdW5kYXksIDEgPSBNb25kYXksIC4uLlxyXG5cdFx0Ly8gQWRqdXN0IHRvIE1vbmRheSAoaGFuZGxlIFN1bmRheSBjYXNlIHdoZXJlIGdldERheSBpcyAwKVxyXG5cdFx0Y29uc3QgZGlmZiA9IHJlc3VsdC5nZXREYXRlKCkgLSBkYXkgKyAoZGF5ID09PSAwID8gLTYgOiAxKTtcclxuXHRcdHJlc3VsdC5zZXREYXRlKGRpZmYpO1xyXG5cdFx0cmV0dXJuIHRoaXMuc3RhcnRPZkRheShyZXN1bHQpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGVuZE9mV2VlayhkYXRlOiBEYXRlKTogRGF0ZSB7XHJcblx0XHRjb25zdCBzdGFydCA9IHRoaXMuc3RhcnRPZldlZWsoZGF0ZSk7XHJcblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLmFkZERheXMoc3RhcnQsIDYpOyAvLyBFbmQgb24gU3VuZGF5XHJcblx0XHRyZXN1bHQuc2V0SG91cnMoMjMsIDU5LCA1OSwgOTk5KTsgLy8gRW5kIG9mIFN1bmRheVxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdC8vIElTTyA4NjAxIHdlZWsgbnVtYmVyIGNhbGN1bGF0aW9uXHJcblx0cHVibGljIGdldFdlZWtOdW1iZXIoZDogRGF0ZSk6IG51bWJlciB7XHJcblx0XHRkID0gbmV3IERhdGUoRGF0ZS5VVEMoZC5nZXRGdWxsWWVhcigpLCBkLmdldE1vbnRoKCksIGQuZ2V0RGF0ZSgpKSk7XHJcblx0XHRkLnNldFVUQ0RhdGUoZC5nZXRVVENEYXRlKCkgKyA0IC0gKGQuZ2V0VVRDRGF5KCkgfHwgNykpOyAvLyBTZXQgdG8gVGh1cnNkYXkgb2YgdGhlIHdlZWtcclxuXHRcdGNvbnN0IHllYXJTdGFydCA9IG5ldyBEYXRlKERhdGUuVVRDKGQuZ2V0VVRDRnVsbFllYXIoKSwgMCwgMSkpO1xyXG5cdFx0Y29uc3Qgd2Vla05vID0gTWF0aC5jZWlsKFxyXG5cdFx0XHQoKGQuZ2V0VGltZSgpIC0geWVhclN0YXJ0LmdldFRpbWUoKSkgLyA4NjQwMDAwMCArIDEpIC8gN1xyXG5cdFx0KTtcclxuXHRcdHJldHVybiB3ZWVrTm87XHJcblx0fVxyXG59XHJcbiJdfQ==