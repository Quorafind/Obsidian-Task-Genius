/**
 * File type utilities for task parsing
 */
/**
 * Supported file types for task parsing
 */
export var SupportedFileType;
(function (SupportedFileType) {
    SupportedFileType["MARKDOWN"] = "md";
    SupportedFileType["CANVAS"] = "canvas";
})(SupportedFileType || (SupportedFileType = {}));
/**
 * Check if a file is supported for task parsing
 */
export function isSupportedFile(file) {
    return isSupportedFileExtension(file.extension);
}
/**
 * Check if a file is supported for task parsing with filtering
 */
export function isSupportedFileWithFilter(file, filterManager, scope = "both") {
    // First check if the file type is supported
    if (!isSupportedFileExtension(file.extension)) {
        return false;
    }
    // Then check if the file passes the filter
    if (filterManager) {
        return filterManager.shouldIncludeFile(file, scope);
    }
    return true;
}
/**
 * Check if a file extension is supported for task parsing
 */
export function isSupportedFileExtension(extension) {
    return Object.values(SupportedFileType).includes(extension);
}
/**
 * Get the file type from a file
 */
export function getFileType(file) {
    if (file.extension === SupportedFileType.MARKDOWN) {
        return SupportedFileType.MARKDOWN;
    }
    if (file.extension === SupportedFileType.CANVAS) {
        return SupportedFileType.CANVAS;
    }
    return null;
}
/**
 * Check if a file is a markdown file
 */
export function isMarkdownFile(file) {
    return file.extension === SupportedFileType.MARKDOWN;
}
/**
 * Check if a file is a canvas file
 */
export function isCanvasFile(file) {
    return file.extension === SupportedFileType.CANVAS;
}
/**
 * Get all supported file extensions
 */
export function getSupportedExtensions() {
    return Object.values(SupportedFileType);
}
/**
 * Create a file filter function for supported files
 */
export function createSupportedFileFilter() {
    return (file) => isSupportedFile(file);
}
/**
 * Create a file filter function for supported files with filtering
 */
export function createFilteredFileFilter(filterManager) {
    return (file) => isSupportedFileWithFilter(file, filterManager);
}
/**
 * Create a combined filter function that checks both file type and custom filters
 */
export function createCombinedFileFilter(filterManager) {
    return (file) => {
        // First check file type support
        if (!isSupportedFile(file)) {
            return false;
        }
        // Then apply custom filters if provided
        if (filterManager) {
            return filterManager.shouldIncludeFile(file);
        }
        return true;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS10eXBlLWRldGVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZS10eXBlLWRldGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBS0g7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxpQkFHWDtBQUhELFdBQVksaUJBQWlCO0lBQzVCLG9DQUFlLENBQUE7SUFDZixzQ0FBaUIsQ0FBQTtBQUNsQixDQUFDLEVBSFcsaUJBQWlCLEtBQWpCLGlCQUFpQixRQUc1QjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxJQUFXO0lBQzFDLE9BQU8sd0JBQXdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSx5QkFBeUIsQ0FDeEMsSUFBVyxFQUNYLGFBQWlDLEVBQ2pDLFFBQW9DLE1BQU07SUFFMUMsNENBQTRDO0lBQzVDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDOUMsT0FBTyxLQUFLLENBQUM7S0FDYjtJQUVELDJDQUEyQztJQUMzQyxJQUFJLGFBQWEsRUFBRTtRQUNsQixPQUFPLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDcEQ7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxTQUFpQjtJQUN6RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxRQUFRLENBQy9DLFNBQThCLENBQzlCLENBQUM7QUFDSCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLElBQVc7SUFDdEMsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLGlCQUFpQixDQUFDLFFBQVEsRUFBRTtRQUNsRCxPQUFPLGlCQUFpQixDQUFDLFFBQVEsQ0FBQztLQUNsQztJQUNELElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUU7UUFDaEQsT0FBTyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7S0FDaEM7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQUMsSUFBVztJQUN6QyxPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssaUJBQWlCLENBQUMsUUFBUSxDQUFDO0FBQ3RELENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBVztJQUN2QyxPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssaUJBQWlCLENBQUMsTUFBTSxDQUFDO0FBQ3BELENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxzQkFBc0I7SUFDckMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLHlCQUF5QjtJQUN4QyxPQUFPLENBQUMsSUFBVyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLHdCQUF3QixDQUFDLGFBQWlDO0lBQ3pFLE9BQU8sQ0FBQyxJQUFXLEVBQUUsRUFBRSxDQUFDLHlCQUF5QixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztBQUN4RSxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsYUFBaUM7SUFDekUsT0FBTyxDQUFDLElBQVcsRUFBRSxFQUFFO1FBQ3RCLGdDQUFnQztRQUNoQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNCLE9BQU8sS0FBSyxDQUFDO1NBQ2I7UUFFRCx3Q0FBd0M7UUFDeEMsSUFBSSxhQUFhLEVBQUU7WUFDbEIsT0FBTyxhQUFhLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0M7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUMsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRmlsZSB0eXBlIHV0aWxpdGllcyBmb3IgdGFzayBwYXJzaW5nXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgRmlsZUZpbHRlck1hbmFnZXIgfSBmcm9tIFwiQC9tYW5hZ2Vycy9maWxlLWZpbHRlci1tYW5hZ2VyXCI7XHJcblxyXG4vKipcclxuICogU3VwcG9ydGVkIGZpbGUgdHlwZXMgZm9yIHRhc2sgcGFyc2luZ1xyXG4gKi9cclxuZXhwb3J0IGVudW0gU3VwcG9ydGVkRmlsZVR5cGUge1xyXG5cdE1BUktET1dOID0gXCJtZFwiLFxyXG5cdENBTlZBUyA9IFwiY2FudmFzXCIsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBhIGZpbGUgaXMgc3VwcG9ydGVkIGZvciB0YXNrIHBhcnNpbmdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1N1cHBvcnRlZEZpbGUoZmlsZTogVEZpbGUpOiBib29sZWFuIHtcclxuXHRyZXR1cm4gaXNTdXBwb3J0ZWRGaWxlRXh0ZW5zaW9uKGZpbGUuZXh0ZW5zaW9uKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIGEgZmlsZSBpcyBzdXBwb3J0ZWQgZm9yIHRhc2sgcGFyc2luZyB3aXRoIGZpbHRlcmluZ1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzU3VwcG9ydGVkRmlsZVdpdGhGaWx0ZXIoXHJcblx0ZmlsZTogVEZpbGUsXHJcblx0ZmlsdGVyTWFuYWdlcj86IEZpbGVGaWx0ZXJNYW5hZ2VyLFxyXG5cdHNjb3BlOiBcImJvdGhcIiB8IFwiaW5saW5lXCIgfCBcImZpbGVcIiA9IFwiYm90aFwiXHJcbik6IGJvb2xlYW4ge1xyXG5cdC8vIEZpcnN0IGNoZWNrIGlmIHRoZSBmaWxlIHR5cGUgaXMgc3VwcG9ydGVkXHJcblx0aWYgKCFpc1N1cHBvcnRlZEZpbGVFeHRlbnNpb24oZmlsZS5leHRlbnNpb24pKSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHQvLyBUaGVuIGNoZWNrIGlmIHRoZSBmaWxlIHBhc3NlcyB0aGUgZmlsdGVyXHJcblx0aWYgKGZpbHRlck1hbmFnZXIpIHtcclxuXHRcdHJldHVybiBmaWx0ZXJNYW5hZ2VyLnNob3VsZEluY2x1ZGVGaWxlKGZpbGUsIHNjb3BlKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgYSBmaWxlIGV4dGVuc2lvbiBpcyBzdXBwb3J0ZWQgZm9yIHRhc2sgcGFyc2luZ1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzU3VwcG9ydGVkRmlsZUV4dGVuc2lvbihleHRlbnNpb246IHN0cmluZyk6IGJvb2xlYW4ge1xyXG5cdHJldHVybiBPYmplY3QudmFsdWVzKFN1cHBvcnRlZEZpbGVUeXBlKS5pbmNsdWRlcyhcclxuXHRcdGV4dGVuc2lvbiBhcyBTdXBwb3J0ZWRGaWxlVHlwZVxyXG5cdCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIGZpbGUgdHlwZSBmcm9tIGEgZmlsZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGVUeXBlKGZpbGU6IFRGaWxlKTogU3VwcG9ydGVkRmlsZVR5cGUgfCBudWxsIHtcclxuXHRpZiAoZmlsZS5leHRlbnNpb24gPT09IFN1cHBvcnRlZEZpbGVUeXBlLk1BUktET1dOKSB7XHJcblx0XHRyZXR1cm4gU3VwcG9ydGVkRmlsZVR5cGUuTUFSS0RPV047XHJcblx0fVxyXG5cdGlmIChmaWxlLmV4dGVuc2lvbiA9PT0gU3VwcG9ydGVkRmlsZVR5cGUuQ0FOVkFTKSB7XHJcblx0XHRyZXR1cm4gU3VwcG9ydGVkRmlsZVR5cGUuQ0FOVkFTO1xyXG5cdH1cclxuXHRyZXR1cm4gbnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIGEgZmlsZSBpcyBhIG1hcmtkb3duIGZpbGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc01hcmtkb3duRmlsZShmaWxlOiBURmlsZSk6IGJvb2xlYW4ge1xyXG5cdHJldHVybiBmaWxlLmV4dGVuc2lvbiA9PT0gU3VwcG9ydGVkRmlsZVR5cGUuTUFSS0RPV047XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBhIGZpbGUgaXMgYSBjYW52YXMgZmlsZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2FudmFzRmlsZShmaWxlOiBURmlsZSk6IGJvb2xlYW4ge1xyXG5cdHJldHVybiBmaWxlLmV4dGVuc2lvbiA9PT0gU3VwcG9ydGVkRmlsZVR5cGUuQ0FOVkFTO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IGFsbCBzdXBwb3J0ZWQgZmlsZSBleHRlbnNpb25zXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3VwcG9ydGVkRXh0ZW5zaW9ucygpOiBzdHJpbmdbXSB7XHJcblx0cmV0dXJuIE9iamVjdC52YWx1ZXMoU3VwcG9ydGVkRmlsZVR5cGUpO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGEgZmlsZSBmaWx0ZXIgZnVuY3Rpb24gZm9yIHN1cHBvcnRlZCBmaWxlc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1cHBvcnRlZEZpbGVGaWx0ZXIoKSB7XHJcblx0cmV0dXJuIChmaWxlOiBURmlsZSkgPT4gaXNTdXBwb3J0ZWRGaWxlKGZpbGUpO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGEgZmlsZSBmaWx0ZXIgZnVuY3Rpb24gZm9yIHN1cHBvcnRlZCBmaWxlcyB3aXRoIGZpbHRlcmluZ1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZpbHRlcmVkRmlsZUZpbHRlcihmaWx0ZXJNYW5hZ2VyPzogRmlsZUZpbHRlck1hbmFnZXIpIHtcclxuXHRyZXR1cm4gKGZpbGU6IFRGaWxlKSA9PiBpc1N1cHBvcnRlZEZpbGVXaXRoRmlsdGVyKGZpbGUsIGZpbHRlck1hbmFnZXIpO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGEgY29tYmluZWQgZmlsdGVyIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGJvdGggZmlsZSB0eXBlIGFuZCBjdXN0b20gZmlsdGVyc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbWJpbmVkRmlsZUZpbHRlcihmaWx0ZXJNYW5hZ2VyPzogRmlsZUZpbHRlck1hbmFnZXIpIHtcclxuXHRyZXR1cm4gKGZpbGU6IFRGaWxlKSA9PiB7XHJcblx0XHQvLyBGaXJzdCBjaGVjayBmaWxlIHR5cGUgc3VwcG9ydFxyXG5cdFx0aWYgKCFpc1N1cHBvcnRlZEZpbGUoZmlsZSkpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFRoZW4gYXBwbHkgY3VzdG9tIGZpbHRlcnMgaWYgcHJvdmlkZWRcclxuXHRcdGlmIChmaWx0ZXJNYW5hZ2VyKSB7XHJcblx0XHRcdHJldHVybiBmaWx0ZXJNYW5hZ2VyLnNob3VsZEluY2x1ZGVGaWxlKGZpbGUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH07XHJcbn1cclxuIl19