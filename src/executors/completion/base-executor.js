import { __awaiter } from "tslib";
import { CanvasTaskUpdater } from "../../parsers/canvas-task-updater";
/**
 * Abstract base class for all onCompletion action executors
 */
export class BaseActionExecutor {
    /**
     * Execute the onCompletion action
     * @param context Execution context containing task, plugin, and app references
     * @param config Configuration for the specific action
     * @returns Promise resolving to execution result
     */
    execute(context, config) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.validateConfig(config)) {
                return this.createErrorResult("Invalid configuration");
            }
            // Route to appropriate execution method based on task type
            if (this.isCanvasTask(context.task)) {
                return this.executeForCanvas(context, config);
            }
            else {
                return this.executeForMarkdown(context, config);
            }
        });
    }
    /**
     * Helper method to create a success result
     * @param message Optional success message
     * @returns Success result
     */
    createSuccessResult(message) {
        return {
            success: true,
            message,
        };
    }
    /**
     * Helper method to create an error result
     * @param error Error message
     * @returns Error result
     */
    createErrorResult(error) {
        return {
            success: false,
            error,
        };
    }
    /**
     * Check if a task is a Canvas task
     * @param task Task to check
     * @returns true if task is a Canvas task
     */
    isCanvasTask(task) {
        return CanvasTaskUpdater.isCanvasTask(task);
    }
    /**
     * Get Canvas task updater instance from context
     * @param context Execution context
     * @returns CanvasTaskUpdater instance
     */
    getCanvasTaskUpdater(context) {
        // Prefer using the plugin's task manager if available (allows mocking in tests)
        const plugin = context.plugin;
        if (plugin === null || plugin === void 0 ? void 0 : plugin.writeAPI) {
            return plugin.writeAPI.canvasTaskUpdater;
        }
        return new CanvasTaskUpdater(context.app.vault, context.plugin);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhc2UtZXhlY3V0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU1BLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBR3RFOztHQUVHO0FBQ0gsTUFBTSxPQUFnQixrQkFBa0I7SUFDdkM7Ozs7O09BS0c7SUFDVSxPQUFPLENBQ25CLE9BQXFDLEVBQ3JDLE1BQTBCOztZQUUxQixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDakMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsdUJBQXVCLENBQUMsQ0FBQzthQUN2RDtZQUVELDJEQUEyRDtZQUMzRCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNwQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDOUM7aUJBQU07Z0JBQ04sT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQ2hEO1FBQ0YsQ0FBQztLQUFBO0lBc0NEOzs7O09BSUc7SUFDTyxtQkFBbUIsQ0FDNUIsT0FBZ0I7UUFFaEIsT0FBTztZQUNOLE9BQU8sRUFBRSxJQUFJO1lBQ2IsT0FBTztTQUNQLENBQUM7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNPLGlCQUFpQixDQUFDLEtBQWE7UUFDeEMsT0FBTztZQUNOLE9BQU8sRUFBRSxLQUFLO1lBQ2QsS0FBSztTQUNMLENBQUM7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNPLFlBQVksQ0FBQyxJQUFVO1FBQ2hDLE9BQU8saUJBQWlCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7OztPQUlHO0lBQ08sb0JBQW9CLENBQzdCLE9BQXFDO1FBRXJDLGdGQUFnRjtRQUNoRixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBK0IsQ0FBQztRQUN2RCxJQUFJLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxRQUFRLEVBQUU7WUFDckIsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDO1NBQ3pDO1FBRUQsT0FBTyxJQUFJLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRSxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG5cdE9uQ29tcGxldGlvbkNvbmZpZyxcclxuXHRPbkNvbXBsZXRpb25FeGVjdXRpb25Db250ZXh0LFxyXG5cdE9uQ29tcGxldGlvbkV4ZWN1dGlvblJlc3VsdCxcclxufSBmcm9tIFwiLi4vLi4vdHlwZXMvb25Db21wbGV0aW9uXCI7XHJcbmltcG9ydCB7IFRhc2ssIENhbnZhc1Rhc2tNZXRhZGF0YSB9IGZyb20gXCIuLi8uLi90eXBlcy90YXNrXCI7XHJcbmltcG9ydCB7IENhbnZhc1Rhc2tVcGRhdGVyIH0gZnJvbSBcIi4uLy4uL3BhcnNlcnMvY2FudmFzLXRhc2stdXBkYXRlclwiO1xyXG5pbXBvcnQgVGFza1Byb2dyZXNzQmFyUGx1Z2luIGZyb20gXCJAL2luZGV4XCI7XHJcblxyXG4vKipcclxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYWxsIG9uQ29tcGxldGlvbiBhY3Rpb24gZXhlY3V0b3JzXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUFjdGlvbkV4ZWN1dG9yIHtcclxuXHQvKipcclxuXHQgKiBFeGVjdXRlIHRoZSBvbkNvbXBsZXRpb24gYWN0aW9uXHJcblx0ICogQHBhcmFtIGNvbnRleHQgRXhlY3V0aW9uIGNvbnRleHQgY29udGFpbmluZyB0YXNrLCBwbHVnaW4sIGFuZCBhcHAgcmVmZXJlbmNlc1xyXG5cdCAqIEBwYXJhbSBjb25maWcgQ29uZmlndXJhdGlvbiBmb3IgdGhlIHNwZWNpZmljIGFjdGlvblxyXG5cdCAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGV4ZWN1dGlvbiByZXN1bHRcclxuXHQgKi9cclxuXHRwdWJsaWMgYXN5bmMgZXhlY3V0ZShcclxuXHRcdGNvbnRleHQ6IE9uQ29tcGxldGlvbkV4ZWN1dGlvbkNvbnRleHQsXHJcblx0XHRjb25maWc6IE9uQ29tcGxldGlvbkNvbmZpZyxcclxuXHQpOiBQcm9taXNlPE9uQ29tcGxldGlvbkV4ZWN1dGlvblJlc3VsdD4ge1xyXG5cdFx0aWYgKCF0aGlzLnZhbGlkYXRlQ29uZmlnKGNvbmZpZykpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY3JlYXRlRXJyb3JSZXN1bHQoXCJJbnZhbGlkIGNvbmZpZ3VyYXRpb25cIik7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUm91dGUgdG8gYXBwcm9wcmlhdGUgZXhlY3V0aW9uIG1ldGhvZCBiYXNlZCBvbiB0YXNrIHR5cGVcclxuXHRcdGlmICh0aGlzLmlzQ2FudmFzVGFzayhjb250ZXh0LnRhc2spKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmV4ZWN1dGVGb3JDYW52YXMoY29udGV4dCwgY29uZmlnKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmV4ZWN1dGVGb3JNYXJrZG93bihjb250ZXh0LCBjb25maWcpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRXhlY3V0ZSB0aGUgYWN0aW9uIGZvciBDYW52YXMgdGFza3NcclxuXHQgKiBAcGFyYW0gY29udGV4dCBFeGVjdXRpb24gY29udGV4dFxyXG5cdCAqIEBwYXJhbSBjb25maWcgQ29uZmlndXJhdGlvbiBmb3IgdGhlIGFjdGlvblxyXG5cdCAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGV4ZWN1dGlvbiByZXN1bHRcclxuXHQgKi9cclxuXHRwcm90ZWN0ZWQgYWJzdHJhY3QgZXhlY3V0ZUZvckNhbnZhcyhcclxuXHRcdGNvbnRleHQ6IE9uQ29tcGxldGlvbkV4ZWN1dGlvbkNvbnRleHQsXHJcblx0XHRjb25maWc6IE9uQ29tcGxldGlvbkNvbmZpZyxcclxuXHQpOiBQcm9taXNlPE9uQ29tcGxldGlvbkV4ZWN1dGlvblJlc3VsdD47XHJcblxyXG5cdC8qKlxyXG5cdCAqIEV4ZWN1dGUgdGhlIGFjdGlvbiBmb3IgTWFya2Rvd24gdGFza3NcclxuXHQgKiBAcGFyYW0gY29udGV4dCBFeGVjdXRpb24gY29udGV4dFxyXG5cdCAqIEBwYXJhbSBjb25maWcgQ29uZmlndXJhdGlvbiBmb3IgdGhlIGFjdGlvblxyXG5cdCAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGV4ZWN1dGlvbiByZXN1bHRcclxuXHQgKi9cclxuXHRwcm90ZWN0ZWQgYWJzdHJhY3QgZXhlY3V0ZUZvck1hcmtkb3duKFxyXG5cdFx0Y29udGV4dDogT25Db21wbGV0aW9uRXhlY3V0aW9uQ29udGV4dCxcclxuXHRcdGNvbmZpZzogT25Db21wbGV0aW9uQ29uZmlnLFxyXG5cdCk6IFByb21pc2U8T25Db21wbGV0aW9uRXhlY3V0aW9uUmVzdWx0PjtcclxuXHJcblx0LyoqXHJcblx0ICogVmFsaWRhdGUgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgZXhlY3V0b3IgdHlwZVxyXG5cdCAqIEBwYXJhbSBjb25maWcgQ29uZmlndXJhdGlvbiB0byB2YWxpZGF0ZVxyXG5cdCAqIEByZXR1cm5zIHRydWUgaWYgY29uZmlndXJhdGlvbiBpcyB2YWxpZCwgZmFsc2Ugb3RoZXJ3aXNlXHJcblx0ICovXHJcblx0cHJvdGVjdGVkIGFic3RyYWN0IHZhbGlkYXRlQ29uZmlnKGNvbmZpZzogT25Db21wbGV0aW9uQ29uZmlnKTogYm9vbGVhbjtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0IGEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGFjdGlvblxyXG5cdCAqIEBwYXJhbSBjb25maWcgQ29uZmlndXJhdGlvbiBmb3IgdGhlIGFjdGlvblxyXG5cdCAqIEByZXR1cm5zIERlc2NyaXB0aW9uIHN0cmluZ1xyXG5cdCAqL1xyXG5cdHB1YmxpYyBhYnN0cmFjdCBnZXREZXNjcmlwdGlvbihjb25maWc6IE9uQ29tcGxldGlvbkNvbmZpZyk6IHN0cmluZztcclxuXHJcblx0LyoqXHJcblx0ICogSGVscGVyIG1ldGhvZCB0byBjcmVhdGUgYSBzdWNjZXNzIHJlc3VsdFxyXG5cdCAqIEBwYXJhbSBtZXNzYWdlIE9wdGlvbmFsIHN1Y2Nlc3MgbWVzc2FnZVxyXG5cdCAqIEByZXR1cm5zIFN1Y2Nlc3MgcmVzdWx0XHJcblx0ICovXHJcblx0cHJvdGVjdGVkIGNyZWF0ZVN1Y2Nlc3NSZXN1bHQoXHJcblx0XHRtZXNzYWdlPzogc3RyaW5nLFxyXG5cdCk6IE9uQ29tcGxldGlvbkV4ZWN1dGlvblJlc3VsdCB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzdWNjZXNzOiB0cnVlLFxyXG5cdFx0XHRtZXNzYWdlLFxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhlbHBlciBtZXRob2QgdG8gY3JlYXRlIGFuIGVycm9yIHJlc3VsdFxyXG5cdCAqIEBwYXJhbSBlcnJvciBFcnJvciBtZXNzYWdlXHJcblx0ICogQHJldHVybnMgRXJyb3IgcmVzdWx0XHJcblx0ICovXHJcblx0cHJvdGVjdGVkIGNyZWF0ZUVycm9yUmVzdWx0KGVycm9yOiBzdHJpbmcpOiBPbkNvbXBsZXRpb25FeGVjdXRpb25SZXN1bHQge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c3VjY2VzczogZmFsc2UsXHJcblx0XHRcdGVycm9yLFxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrIGlmIGEgdGFzayBpcyBhIENhbnZhcyB0YXNrXHJcblx0ICogQHBhcmFtIHRhc2sgVGFzayB0byBjaGVja1xyXG5cdCAqIEByZXR1cm5zIHRydWUgaWYgdGFzayBpcyBhIENhbnZhcyB0YXNrXHJcblx0ICovXHJcblx0cHJvdGVjdGVkIGlzQ2FudmFzVGFzayh0YXNrOiBUYXNrKTogdGFzayBpcyBUYXNrPENhbnZhc1Rhc2tNZXRhZGF0YT4ge1xyXG5cdFx0cmV0dXJuIENhbnZhc1Rhc2tVcGRhdGVyLmlzQ2FudmFzVGFzayh0YXNrKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCBDYW52YXMgdGFzayB1cGRhdGVyIGluc3RhbmNlIGZyb20gY29udGV4dFxyXG5cdCAqIEBwYXJhbSBjb250ZXh0IEV4ZWN1dGlvbiBjb250ZXh0XHJcblx0ICogQHJldHVybnMgQ2FudmFzVGFza1VwZGF0ZXIgaW5zdGFuY2VcclxuXHQgKi9cclxuXHRwcm90ZWN0ZWQgZ2V0Q2FudmFzVGFza1VwZGF0ZXIoXHJcblx0XHRjb250ZXh0OiBPbkNvbXBsZXRpb25FeGVjdXRpb25Db250ZXh0LFxyXG5cdCk6IENhbnZhc1Rhc2tVcGRhdGVyIHtcclxuXHRcdC8vIFByZWZlciB1c2luZyB0aGUgcGx1Z2luJ3MgdGFzayBtYW5hZ2VyIGlmIGF2YWlsYWJsZSAoYWxsb3dzIG1vY2tpbmcgaW4gdGVzdHMpXHJcblx0XHRjb25zdCBwbHVnaW4gPSBjb250ZXh0LnBsdWdpbiBhcyBUYXNrUHJvZ3Jlc3NCYXJQbHVnaW47XHJcblx0XHRpZiAocGx1Z2luPy53cml0ZUFQSSkge1xyXG5cdFx0XHRyZXR1cm4gcGx1Z2luLndyaXRlQVBJLmNhbnZhc1Rhc2tVcGRhdGVyO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBuZXcgQ2FudmFzVGFza1VwZGF0ZXIoY29udGV4dC5hcHAudmF1bHQsIGNvbnRleHQucGx1Z2luKTtcclxuXHR9XHJcbn1cclxuIl19