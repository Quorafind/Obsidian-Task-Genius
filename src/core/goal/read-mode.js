import { REGEX_GOAL } from "./regex-goal";
function getParentTaskTextReadMode(taskElement) {
    // Clone the element to avoid modifying the original
    const clone = taskElement.cloneNode(true);
    // Remove all child lists (subtasks)
    const childLists = clone.querySelectorAll('ul');
    childLists.forEach(list => list.remove());
    // Remove the progress bar
    const progressBar = clone.querySelector('.cm-task-progress-bar');
    if (progressBar)
        progressBar.remove();
    // Get the text content and clean it up
    let text = clone.textContent || '';
    // Remove any extra whitespace
    text = text.trim();
    return text;
}
function extractTaskSpecificGoal(taskText) {
    if (!taskText)
        return null;
    // Match only the patterns g::number or goal::number
    const goalMatch = taskText.match(REGEX_GOAL);
    if (!goalMatch)
        return null;
    return Number(goalMatch[2]);
}
export function extractTaskAndGoalInfoReadMode(taskElement) {
    if (!taskElement)
        return null;
    // Get the text content of the task
    const taskText = getParentTaskTextReadMode(taskElement);
    if (!taskText)
        return null;
    // Check for goal in g::number or goal::number format
    return extractTaskSpecificGoal(taskText);
}
export function getCustomTotalGoalReadMode(taskElement) {
    if (!taskElement)
        return null;
    // First check if the element already has a data-custom-goal attribute
    const customGoalAttr = taskElement.getAttribute('data-custom-goal');
    if (customGoalAttr) {
        const goalValue = parseInt(customGoalAttr, 10);
        if (!isNaN(goalValue)) {
            return goalValue;
        }
    }
    // If not found in attribute, extract from task text
    const taskText = getParentTaskTextReadMode(taskElement);
    if (!taskText)
        return null;
    // Extract goal using pattern g::number or goal::number
    const goalMatch = taskText.match(REGEX_GOAL);
    if (!goalMatch)
        return null;
    const goalValue = parseInt(goalMatch[2], 10);
    // Cache the result in the data attribute for future reference
    taskElement.setAttribute('data-custom-goal', goalValue.toString());
    return goalValue;
}
export function checkIfParentElementHasGoalFormat(taskElement) {
    if (!taskElement)
        return false;
    // Get the text content of the task
    const taskText = getParentTaskTextReadMode(taskElement);
    if (!taskText)
        return false;
    // Check for goal in g::number or goal::number format
    const goalMatch = taskText.match(REGEX_GOAL);
    return !!goalMatch;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC1tb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVhZC1tb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMsU0FBUyx5QkFBeUIsQ0FBQyxXQUFvQjtJQUN0RCxvREFBb0Q7SUFDcEQsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQWdCLENBQUM7SUFFekQsb0NBQW9DO0lBQ3BDLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRCxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFFMUMsMEJBQTBCO0lBQzFCLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNqRSxJQUFJLFdBQVc7UUFBRSxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7SUFFdEMsdUNBQXVDO0lBQ3ZDLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO0lBRW5DLDhCQUE4QjtJQUM5QixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25CLE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQztBQUVELFNBQVMsdUJBQXVCLENBQUMsUUFBZ0I7SUFDN0MsSUFBSSxDQUFDLFFBQVE7UUFBRSxPQUFPLElBQUksQ0FBQztJQUUzQixvREFBb0Q7SUFDcEQsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QyxJQUFJLENBQUMsU0FBUztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBRTVCLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxNQUFNLFVBQVUsOEJBQThCLENBQUMsV0FBMkI7SUFDekUsSUFBSSxDQUFDLFdBQVc7UUFBRSxPQUFPLElBQUksQ0FBQztJQUU5QixtQ0FBbUM7SUFDbkMsTUFBTSxRQUFRLEdBQUcseUJBQXlCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEQsSUFBSSxDQUFDLFFBQVE7UUFBRSxPQUFPLElBQUksQ0FBQztJQUUzQixxREFBcUQ7SUFDckQsT0FBTyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBQ0QsTUFBTSxVQUFVLDBCQUEwQixDQUFDLFdBQTJDO0lBQ3JGLElBQUksQ0FBQyxXQUFXO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFOUIsc0VBQXNFO0lBQ3RFLE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNwRSxJQUFJLGNBQWMsRUFBRTtRQUNuQixNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxTQUFTLENBQUM7U0FDakI7S0FDRDtJQUVELG9EQUFvRDtJQUNwRCxNQUFNLFFBQVEsR0FBRyx5QkFBeUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4RCxJQUFJLENBQUMsUUFBUTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBRTNCLHVEQUF1RDtJQUN2RCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLElBQUksQ0FBQyxTQUFTO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFNUIsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUU3Qyw4REFBOEQ7SUFDOUQsV0FBVyxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUVuRSxPQUFPLFNBQVMsQ0FBQztBQUNsQixDQUFDO0FBRUQsTUFBTSxVQUFVLGlDQUFpQyxDQUFDLFdBQTJDO0lBQzVGLElBQUksQ0FBQyxXQUFXO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFL0IsbUNBQW1DO0lBQ25DLE1BQU0sUUFBUSxHQUFHLHlCQUF5QixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3hELElBQUksQ0FBQyxRQUFRO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFNUIscURBQXFEO0lBQ3JELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0MsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSRUdFWF9HT0FMIH0gZnJvbSBcIi4vcmVnZXgtZ29hbFwiO1xyXG5cclxuZnVuY3Rpb24gZ2V0UGFyZW50VGFza1RleHRSZWFkTW9kZSh0YXNrRWxlbWVudDogRWxlbWVudCk6IHN0cmluZyB7XHJcblx0Ly8gQ2xvbmUgdGhlIGVsZW1lbnQgdG8gYXZvaWQgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbFxyXG5cdGNvbnN0IGNsb25lID0gdGFza0VsZW1lbnQuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50O1xyXG5cclxuXHQvLyBSZW1vdmUgYWxsIGNoaWxkIGxpc3RzIChzdWJ0YXNrcylcclxuXHRjb25zdCBjaGlsZExpc3RzID0gY2xvbmUucXVlcnlTZWxlY3RvckFsbCgndWwnKTtcclxuXHRjaGlsZExpc3RzLmZvckVhY2gobGlzdCA9PiBsaXN0LnJlbW92ZSgpKTtcclxuXHJcblx0Ly8gUmVtb3ZlIHRoZSBwcm9ncmVzcyBiYXJcclxuXHRjb25zdCBwcm9ncmVzc0JhciA9IGNsb25lLnF1ZXJ5U2VsZWN0b3IoJy5jbS10YXNrLXByb2dyZXNzLWJhcicpO1xyXG5cdGlmIChwcm9ncmVzc0JhcikgcHJvZ3Jlc3NCYXIucmVtb3ZlKCk7XHJcblxyXG5cdC8vIEdldCB0aGUgdGV4dCBjb250ZW50IGFuZCBjbGVhbiBpdCB1cFxyXG5cdGxldCB0ZXh0ID0gY2xvbmUudGV4dENvbnRlbnQgfHwgJyc7XHJcblxyXG5cdC8vIFJlbW92ZSBhbnkgZXh0cmEgd2hpdGVzcGFjZVxyXG5cdHRleHQgPSB0ZXh0LnRyaW0oKTtcclxuXHRyZXR1cm4gdGV4dDtcclxufVxyXG5cclxuZnVuY3Rpb24gZXh0cmFjdFRhc2tTcGVjaWZpY0dvYWwodGFza1RleHQ6IHN0cmluZyk6IG51bWJlciB8IG51bGwge1xyXG4gICAgaWYgKCF0YXNrVGV4dCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgLy8gTWF0Y2ggb25seSB0aGUgcGF0dGVybnMgZzo6bnVtYmVyIG9yIGdvYWw6Om51bWJlclxyXG4gICAgY29uc3QgZ29hbE1hdGNoID0gdGFza1RleHQubWF0Y2goUkVHRVhfR09BTCk7XHJcbiAgICBpZiAoIWdvYWxNYXRjaCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgcmV0dXJuIE51bWJlcihnb2FsTWF0Y2hbMl0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFRhc2tBbmRHb2FsSW5mb1JlYWRNb2RlKHRhc2tFbGVtZW50OiBFbGVtZW50IHwgbnVsbCk6IG51bWJlciB8IG51bGwge1xyXG5cdGlmICghdGFza0VsZW1lbnQpIHJldHVybiBudWxsO1xyXG5cclxuXHQvLyBHZXQgdGhlIHRleHQgY29udGVudCBvZiB0aGUgdGFza1xyXG5cdGNvbnN0IHRhc2tUZXh0ID0gZ2V0UGFyZW50VGFza1RleHRSZWFkTW9kZSh0YXNrRWxlbWVudCk7XHJcblx0aWYgKCF0YXNrVGV4dCkgcmV0dXJuIG51bGw7XHJcblxyXG5cdC8vIENoZWNrIGZvciBnb2FsIGluIGc6Om51bWJlciBvciBnb2FsOjpudW1iZXIgZm9ybWF0XHJcblx0cmV0dXJuIGV4dHJhY3RUYXNrU3BlY2lmaWNHb2FsKHRhc2tUZXh0KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VzdG9tVG90YWxHb2FsUmVhZE1vZGUodGFza0VsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZCk6IG51bWJlciB8IG51bGwge1xyXG5cdGlmICghdGFza0VsZW1lbnQpIHJldHVybiBudWxsO1xyXG5cclxuXHQvLyBGaXJzdCBjaGVjayBpZiB0aGUgZWxlbWVudCBhbHJlYWR5IGhhcyBhIGRhdGEtY3VzdG9tLWdvYWwgYXR0cmlidXRlXHJcblx0Y29uc3QgY3VzdG9tR29hbEF0dHIgPSB0YXNrRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY3VzdG9tLWdvYWwnKTtcclxuXHRpZiAoY3VzdG9tR29hbEF0dHIpIHtcclxuXHRcdGNvbnN0IGdvYWxWYWx1ZSA9IHBhcnNlSW50KGN1c3RvbUdvYWxBdHRyLCAxMCk7XHJcblx0XHRpZiAoIWlzTmFOKGdvYWxWYWx1ZSkpIHtcclxuXHRcdFx0cmV0dXJuIGdvYWxWYWx1ZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIElmIG5vdCBmb3VuZCBpbiBhdHRyaWJ1dGUsIGV4dHJhY3QgZnJvbSB0YXNrIHRleHRcclxuXHRjb25zdCB0YXNrVGV4dCA9IGdldFBhcmVudFRhc2tUZXh0UmVhZE1vZGUodGFza0VsZW1lbnQpO1xyXG5cdGlmICghdGFza1RleHQpIHJldHVybiBudWxsO1xyXG5cclxuXHQvLyBFeHRyYWN0IGdvYWwgdXNpbmcgcGF0dGVybiBnOjpudW1iZXIgb3IgZ29hbDo6bnVtYmVyXHJcblx0Y29uc3QgZ29hbE1hdGNoID0gdGFza1RleHQubWF0Y2goUkVHRVhfR09BTCk7XHJcblx0aWYgKCFnb2FsTWF0Y2gpIHJldHVybiBudWxsO1xyXG5cclxuXHRjb25zdCBnb2FsVmFsdWUgPSBwYXJzZUludChnb2FsTWF0Y2hbMl0sIDEwKTtcclxuXHRcclxuXHQvLyBDYWNoZSB0aGUgcmVzdWx0IGluIHRoZSBkYXRhIGF0dHJpYnV0ZSBmb3IgZnV0dXJlIHJlZmVyZW5jZVxyXG5cdHRhc2tFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1jdXN0b20tZ29hbCcsIGdvYWxWYWx1ZS50b1N0cmluZygpKTtcclxuXHRcclxuXHRyZXR1cm4gZ29hbFZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tJZlBhcmVudEVsZW1lbnRIYXNHb2FsRm9ybWF0KHRhc2tFbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWQpOiBib29sZWFuIHtcclxuXHRpZiAoIXRhc2tFbGVtZW50KSByZXR1cm4gZmFsc2U7XHJcblxyXG5cdC8vIEdldCB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSB0YXNrXHJcblx0Y29uc3QgdGFza1RleHQgPSBnZXRQYXJlbnRUYXNrVGV4dFJlYWRNb2RlKHRhc2tFbGVtZW50KTtcclxuXHRpZiAoIXRhc2tUZXh0KSByZXR1cm4gZmFsc2U7XHJcblxyXG5cdC8vIENoZWNrIGZvciBnb2FsIGluIGc6Om51bWJlciBvciBnb2FsOjpudW1iZXIgZm9ybWF0XHJcblx0Y29uc3QgZ29hbE1hdGNoID0gdGFza1RleHQubWF0Y2goUkVHRVhfR09BTCk7XHJcblx0cmV0dXJuICEhZ29hbE1hdGNoO1xyXG59Il19