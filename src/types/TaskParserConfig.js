export var MetadataParseMode;
(function (MetadataParseMode) {
    MetadataParseMode["DataviewOnly"] = "dataview-only";
    MetadataParseMode["EmojiOnly"] = "emoji-only";
    MetadataParseMode["Both"] = "both";
    MetadataParseMode["None"] = "none";
})(MetadataParseMode || (MetadataParseMode = {}));
export function createDefaultParserConfig() {
    const emojiMapping = {
        // Basic date and time emojis
        "üìÖ": "dueDate",
        "üóìÔ∏è": "dueDate",
        "‚è∞": "scheduledDate",
        "‚è≥": "scheduledDate",
        "üõ´": "startDate",
        "‚úÖ": "completedDate",
        "‚ûï": "createdDate",
        "‚ùå": "cancelledDate",
        // Task management emojis
        "üÜî": "id",
        "‚õî": "dependsOn",
        "üèÅ": "onCompletion",
        // Priority emojis (Tasks plugin style)
        "üî∫": "priority",
        "‚è´": "priority",
        "üîº": "priority",
        "üîΩ": "priority",
        "‚è¨Ô∏è": "priority",
        "‚è¨": "priority",
        "üìå": "priority",
        // Other common emojis
        "üîî": "reminder",
        "‚≠ê": "starred",
        "‚ùó": "important",
        "üí°": "idea",
        "üìç": "location",
        "üîÅ": "recurrence",
        // Status and marker emojis
        "üöÄ": "status",
        "‚ö°": "energy",
        "üéØ": "goal",
        "üí∞": "cost",
        "‚è±Ô∏è": "duration",
        "üë§": "assignee",
        "üè∑Ô∏è": "label",
    };
    const specialTagPrefixes = {
        // Default special tag prefixes, support i18n
        project: "project",
        area: "area",
        context: "context",
        tag: "tag",
        // Chinese support
        È°πÁõÆ: "project",
        Âå∫Âüü: "area",
        ‰∏ä‰∏ãÊñá: "context",
        Ê†áÁ≠æ: "tag",
        // Other language support examples
        projet: "project",
        proyecto: "project",
        progetto: "project", // Italian
    };
    return {
        parseMetadata: true,
        parseTags: true,
        parseComments: true,
        parseHeadings: true,
        maxIndentSize: 8,
        maxParseIterations: 100000,
        maxMetadataIterations: 10000,
        maxTagLength: 100,
        maxEmojiValueLength: 200,
        maxStackOperations: 4000,
        maxStackSize: 1000,
        statusMapping: {},
        emojiMapping,
        metadataParseMode: MetadataParseMode.Both,
        specialTagPrefixes,
    };
}
export function createParserConfigWithStatusMapping(statusMapping) {
    const config = createDefaultParserConfig();
    config.statusMapping = statusMapping;
    return config;
}
//# sourceMappingURL=data:application/json;base64,