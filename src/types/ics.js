/**
 * ICS (iCalendar) support types and interfaces
 */
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaWNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIElDUyAoaUNhbGVuZGFyKSBzdXBwb3J0IHR5cGVzIGFuZCBpbnRlcmZhY2VzXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVGFzayB9IGZyb20gXCIuL3Rhc2tcIjtcclxuXHJcbi8qKiBJQ1MgZXZlbnQgc291cmNlIGNvbmZpZ3VyYXRpb24gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJY3NTb3VyY2Uge1xyXG5cdC8qKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIElDUyBzb3VyY2UgKi9cclxuXHRpZDogc3RyaW5nO1xyXG5cdC8qKiBEaXNwbGF5IG5hbWUgZm9yIHRoZSBzb3VyY2UgKi9cclxuXHRuYW1lOiBzdHJpbmc7XHJcblx0LyoqIFVSTCB0byB0aGUgSUNTIGZpbGUgKHN1cHBvcnRzIGh0dHA6Ly8sIGh0dHBzOi8vLCBhbmQgd2ViY2FsOi8vIHByb3RvY29scykgKi9cclxuXHR1cmw6IHN0cmluZztcclxuXHQvKiogV2hldGhlciB0aGlzIHNvdXJjZSBpcyBlbmFibGVkICovXHJcblx0ZW5hYmxlZDogYm9vbGVhbjtcclxuXHQvKiogQ29sb3IgZm9yIGV2ZW50cyBmcm9tIHRoaXMgc291cmNlICovXHJcblx0Y29sb3I/OiBzdHJpbmc7XHJcblx0LyoqIFNob3cgdHlwZSAqL1xyXG5cdHNob3dUeXBlOiBcImJhZGdlXCIgfCBcImV2ZW50XCI7XHJcblx0LyoqIFJlZnJlc2ggaW50ZXJ2YWwgaW4gbWludXRlcyAoZGVmYXVsdDogNjApICovXHJcblx0cmVmcmVzaEludGVydmFsOiBudW1iZXI7XHJcblx0LyoqIExhc3Qgc3VjY2Vzc2Z1bCBmZXRjaCB0aW1lc3RhbXAgKi9cclxuXHRsYXN0RmV0Y2hlZD86IG51bWJlcjtcclxuXHQvKiogV2hldGhlciB0byBzaG93IGFsbC1kYXkgZXZlbnRzICovXHJcblx0c2hvd0FsbERheUV2ZW50czogYm9vbGVhbjtcclxuXHQvKiogV2hldGhlciB0byBzaG93IHRpbWVkIGV2ZW50cyAqL1xyXG5cdHNob3dUaW1lZEV2ZW50czogYm9vbGVhbjtcclxuXHQvKiogRmlsdGVyIHBhdHRlcm5zIHRvIGluY2x1ZGUvZXhjbHVkZSBldmVudHMgKi9cclxuXHRmaWx0ZXJzPzogSWNzRXZlbnRGaWx0ZXI7XHJcblx0LyoqIEF1dGhlbnRpY2F0aW9uIHNldHRpbmdzIGlmIG5lZWRlZCAqL1xyXG5cdGF1dGg/OiBJY3NBdXRoQ29uZmlnO1xyXG5cdC8qKiBUZXh0IHJlcGxhY2VtZW50IHJ1bGVzIGZvciBjdXN0b21pemluZyBldmVudCBkaXNwbGF5ICovXHJcblx0dGV4dFJlcGxhY2VtZW50cz86IEljc1RleHRSZXBsYWNlbWVudFtdO1xyXG5cdC8qKiBIb2xpZGF5IGRldGVjdGlvbiBhbmQgZ3JvdXBpbmcgY29uZmlndXJhdGlvbiAqL1xyXG5cdGhvbGlkYXlDb25maWc/OiBJY3NIb2xpZGF5Q29uZmlnO1xyXG5cdC8qKiBUYXNrIHN0YXR1cyBtYXBwaW5nIGNvbmZpZ3VyYXRpb24gKi9cclxuXHRzdGF0dXNNYXBwaW5nPzogSWNzU3RhdHVzTWFwcGluZztcclxufVxyXG5cclxuLyoqIElDUyBldmVudCBmaWx0ZXIgY29uZmlndXJhdGlvbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEljc0V2ZW50RmlsdGVyIHtcclxuXHQvKiogSW5jbHVkZSBldmVudHMgbWF0Y2hpbmcgdGhlc2UgcGF0dGVybnMgKi9cclxuXHRpbmNsdWRlPzoge1xyXG5cdFx0LyoqIFN1bW1hcnkvdGl0bGUgcGF0dGVybnMgKHJlZ2V4IHN1cHBvcnRlZCkgKi9cclxuXHRcdHN1bW1hcnk/OiBzdHJpbmdbXTtcclxuXHRcdC8qKiBEZXNjcmlwdGlvbiBwYXR0ZXJucyAocmVnZXggc3VwcG9ydGVkKSAqL1xyXG5cdFx0ZGVzY3JpcHRpb24/OiBzdHJpbmdbXTtcclxuXHRcdC8qKiBMb2NhdGlvbiBwYXR0ZXJucyAocmVnZXggc3VwcG9ydGVkKSAqL1xyXG5cdFx0bG9jYXRpb24/OiBzdHJpbmdbXTtcclxuXHRcdC8qKiBDYXRlZ29yaWVzIHRvIGluY2x1ZGUgKi9cclxuXHRcdGNhdGVnb3JpZXM/OiBzdHJpbmdbXTtcclxuXHR9O1xyXG5cdC8qKiBFeGNsdWRlIGV2ZW50cyBtYXRjaGluZyB0aGVzZSBwYXR0ZXJucyAqL1xyXG5cdGV4Y2x1ZGU/OiB7XHJcblx0XHQvKiogU3VtbWFyeS90aXRsZSBwYXR0ZXJucyAocmVnZXggc3VwcG9ydGVkKSAqL1xyXG5cdFx0c3VtbWFyeT86IHN0cmluZ1tdO1xyXG5cdFx0LyoqIERlc2NyaXB0aW9uIHBhdHRlcm5zIChyZWdleCBzdXBwb3J0ZWQpICovXHJcblx0XHRkZXNjcmlwdGlvbj86IHN0cmluZ1tdO1xyXG5cdFx0LyoqIExvY2F0aW9uIHBhdHRlcm5zIChyZWdleCBzdXBwb3J0ZWQpICovXHJcblx0XHRsb2NhdGlvbj86IHN0cmluZ1tdO1xyXG5cdFx0LyoqIENhdGVnb3JpZXMgdG8gZXhjbHVkZSAqL1xyXG5cdFx0Y2F0ZWdvcmllcz86IHN0cmluZ1tdO1xyXG5cdH07XHJcbn1cclxuXHJcbi8qKiBBdXRoZW50aWNhdGlvbiBjb25maWd1cmF0aW9uIGZvciBJQ1Mgc291cmNlcyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEljc0F1dGhDb25maWcge1xyXG5cdC8qKiBBdXRoZW50aWNhdGlvbiB0eXBlICovXHJcblx0dHlwZTogXCJub25lXCIgfCBcImJhc2ljXCIgfCBcImJlYXJlclwiIHwgXCJjdXN0b21cIjtcclxuXHQvKiogVXNlcm5hbWUgZm9yIGJhc2ljIGF1dGggKi9cclxuXHR1c2VybmFtZT86IHN0cmluZztcclxuXHQvKiogUGFzc3dvcmQgZm9yIGJhc2ljIGF1dGggKi9cclxuXHRwYXNzd29yZD86IHN0cmluZztcclxuXHQvKiogQmVhcmVyIHRva2VuICovXHJcblx0dG9rZW4/OiBzdHJpbmc7XHJcblx0LyoqIEN1c3RvbSBoZWFkZXJzICovXHJcblx0aGVhZGVycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XHJcbn1cclxuXHJcbi8qKiBUZXh0IHJlcGxhY2VtZW50IHJ1bGUgZm9yIElDUyBldmVudHMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBJY3NUZXh0UmVwbGFjZW1lbnQge1xyXG5cdC8qKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyByZXBsYWNlbWVudCBydWxlICovXHJcblx0aWQ6IHN0cmluZztcclxuXHQvKiogRGlzcGxheSBuYW1lIGZvciB0aGlzIHJ1bGUgKi9cclxuXHRuYW1lOiBzdHJpbmc7XHJcblx0LyoqIFdoZXRoZXIgdGhpcyBydWxlIGlzIGVuYWJsZWQgKi9cclxuXHRlbmFibGVkOiBib29sZWFuO1xyXG5cdC8qKiBUYXJnZXQgZmllbGQgdG8gYXBwbHkgcmVwbGFjZW1lbnQgdG8gKi9cclxuXHR0YXJnZXQ6IFwic3VtbWFyeVwiIHwgXCJkZXNjcmlwdGlvblwiIHwgXCJsb2NhdGlvblwiIHwgXCJhbGxcIjtcclxuXHQvKiogUmVndWxhciBleHByZXNzaW9uIHBhdHRlcm4gdG8gbWF0Y2ggKi9cclxuXHRwYXR0ZXJuOiBzdHJpbmc7XHJcblx0LyoqIFJlcGxhY2VtZW50IHRleHQgKHN1cHBvcnRzIGNhcHR1cmUgZ3JvdXBzIGxpa2UgJDEsICQyKSAqL1xyXG5cdHJlcGxhY2VtZW50OiBzdHJpbmc7XHJcblx0LyoqIFJlZ2V4IGZsYWdzIChlLmcuLCBcImdpXCIgZm9yIGdsb2JhbCBjYXNlLWluc2Vuc2l0aXZlKSAqL1xyXG5cdGZsYWdzPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKiogSG9saWRheSBkZXRlY3Rpb24gYW5kIGdyb3VwaW5nIGNvbmZpZ3VyYXRpb24gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJY3NIb2xpZGF5Q29uZmlnIHtcclxuXHQvKiogV2hldGhlciB0byBlbmFibGUgaG9saWRheSBkZXRlY3Rpb24gKi9cclxuXHRlbmFibGVkOiBib29sZWFuO1xyXG5cdC8qKiBQYXR0ZXJucyB0byBpZGVudGlmeSBob2xpZGF5IGV2ZW50cyAqL1xyXG5cdGRldGVjdGlvblBhdHRlcm5zOiB7XHJcblx0XHQvKiogU3VtbWFyeS90aXRsZSBwYXR0ZXJucyAocmVnZXggc3VwcG9ydGVkKSAqL1xyXG5cdFx0c3VtbWFyeT86IHN0cmluZ1tdO1xyXG5cdFx0LyoqIERlc2NyaXB0aW9uIHBhdHRlcm5zIChyZWdleCBzdXBwb3J0ZWQpICovXHJcblx0XHRkZXNjcmlwdGlvbj86IHN0cmluZ1tdO1xyXG5cdFx0LyoqIENhdGVnb3JpZXMgdGhhdCBpbmRpY2F0ZSBob2xpZGF5cyAqL1xyXG5cdFx0Y2F0ZWdvcmllcz86IHN0cmluZ1tdO1xyXG5cdFx0LyoqIEtleXdvcmRzIHRoYXQgaW5kaWNhdGUgaG9saWRheXMgKi9cclxuXHRcdGtleXdvcmRzPzogc3RyaW5nW107XHJcblx0fTtcclxuXHQvKiogSG93IHRvIGhhbmRsZSBjb25zZWN1dGl2ZSBob2xpZGF5IGV2ZW50cyAqL1xyXG5cdGdyb3VwaW5nU3RyYXRlZ3k6IFwibm9uZVwiIHwgXCJmaXJzdC1vbmx5XCIgfCBcInN1bW1hcnlcIiB8IFwicmFuZ2VcIjtcclxuXHQvKiogTWF4aW11bSBnYXAgYmV0d2VlbiBldmVudHMgdG8gY29uc2lkZXIgdGhlbSBjb25zZWN1dGl2ZSAoaW4gZGF5cykgKi9cclxuXHRtYXhHYXBEYXlzOiBudW1iZXI7XHJcblx0LyoqIFdoZXRoZXIgdG8gc2hvdyBob2xpZGF5IGV2ZW50cyBpbiBmb3JlY2FzdCAqL1xyXG5cdHNob3dJbkZvcmVjYXN0OiBib29sZWFuO1xyXG5cdC8qKiBXaGV0aGVyIHRvIHNob3cgaG9saWRheSBldmVudHMgaW4gY2FsZW5kYXIgKi9cclxuXHRzaG93SW5DYWxlbmRhcjogYm9vbGVhbjtcclxuXHQvKiogQ3VzdG9tIGRpc3BsYXkgZm9ybWF0IGZvciBncm91cGVkIGhvbGlkYXlzICovXHJcblx0Z3JvdXBEaXNwbGF5Rm9ybWF0Pzogc3RyaW5nO1xyXG59XHJcblxyXG4vKiogVGFzayBzdGF0dXMgbWFwcGluZyBjb25maWd1cmF0aW9uIGZvciBJQ1MgZXZlbnRzICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSWNzU3RhdHVzTWFwcGluZyB7XHJcblx0LyoqIFdoZXRoZXIgdG8gZW5hYmxlIHN0YXR1cyBtYXBwaW5nICovXHJcblx0ZW5hYmxlZDogYm9vbGVhbjtcclxuXHQvKiogU3RhdHVzIG1hcHBpbmcgcnVsZXMgYmFzZWQgb24gZXZlbnQgdGltaW5nICovXHJcblx0dGltaW5nUnVsZXM6IHtcclxuXHRcdC8qKiBTdGF0dXMgZm9yIHBhc3QgZXZlbnRzICovXHJcblx0XHRwYXN0RXZlbnRzOiBUYXNrU3RhdHVzO1xyXG5cdFx0LyoqIFN0YXR1cyBmb3IgY3VycmVudCBldmVudHMgKGhhcHBlbmluZyB0b2RheSkgKi9cclxuXHRcdGN1cnJlbnRFdmVudHM6IFRhc2tTdGF0dXM7XHJcblx0XHQvKiogU3RhdHVzIGZvciBmdXR1cmUgZXZlbnRzICovXHJcblx0XHRmdXR1cmVFdmVudHM6IFRhc2tTdGF0dXM7XHJcblx0fTtcclxuXHQvKiogU3RhdHVzIG1hcHBpbmcgcnVsZXMgYmFzZWQgb24gZXZlbnQgcHJvcGVydGllcyAqL1xyXG5cdHByb3BlcnR5UnVsZXM/OiB7XHJcblx0XHQvKiogU3RhdHVzIG1hcHBpbmcgYmFzZWQgb24gZXZlbnQgY2F0ZWdvcmllcyAqL1xyXG5cdFx0Y2F0ZWdvcnlNYXBwaW5nPzogUmVjb3JkPHN0cmluZywgVGFza1N0YXR1cz47XHJcblx0XHQvKiogU3RhdHVzIG1hcHBpbmcgYmFzZWQgb24gZXZlbnQgc3VtbWFyeSBwYXR0ZXJucyAqL1xyXG5cdFx0c3VtbWFyeU1hcHBpbmc/OiBBcnJheTx7XHJcblx0XHRcdHBhdHRlcm46IHN0cmluZztcclxuXHRcdFx0c3RhdHVzOiBUYXNrU3RhdHVzO1xyXG5cdFx0fT47XHJcblx0XHQvKiogU3RhdHVzIG1hcHBpbmcgYmFzZWQgb24gaG9saWRheSBkZXRlY3Rpb24gKi9cclxuXHRcdGhvbGlkYXlNYXBwaW5nPzoge1xyXG5cdFx0XHQvKiogU3RhdHVzIGZvciBkZXRlY3RlZCBob2xpZGF5IGV2ZW50cyAqL1xyXG5cdFx0XHRob2xpZGF5U3RhdHVzOiBUYXNrU3RhdHVzO1xyXG5cdFx0XHQvKiogU3RhdHVzIGZvciBub24taG9saWRheSBldmVudHMgKi9cclxuXHRcdFx0bm9uSG9saWRheVN0YXR1cz86IFRhc2tTdGF0dXM7XHJcblx0XHR9O1xyXG5cdH07XHJcblx0LyoqIE92ZXJyaWRlIG9yaWdpbmFsIElDUyBzdGF0dXMgKi9cclxuXHRvdmVycmlkZUljc1N0YXR1czogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqIEF2YWlsYWJsZSB0YXNrIHN0YXR1c2VzIGZvciBJQ1MgZXZlbnQgbWFwcGluZyAqL1xyXG5leHBvcnQgdHlwZSBUYXNrU3RhdHVzID1cclxuXHR8IFwiIFwiIC8vIEluY29tcGxldGVcclxuXHR8IFwieFwiIC8vIENvbXBsZXRlXHJcblx0fCBcIi1cIiAvLyBDYW5jZWxsZWQvQWJhbmRvbmVkXHJcblx0fCBcIj5cIiAvLyBGb3J3YXJkZWQvUmVzY2hlZHVsZWRcclxuXHR8IFwiPFwiIC8vIFNjaGVkdWxlZFxyXG5cdHwgXCIhXCIgLy8gSW1wb3J0YW50XHJcblx0fCBcIj9cIiAvLyBRdWVzdGlvbi9UZW50YXRpdmVcclxuXHR8IFwiL1wiIC8vIEluIFByb2dyZXNzXHJcblx0fCBcIitcIiAvLyBQcm9cclxuXHR8IFwiKlwiIC8vIFN0YXJcclxuXHR8ICdcIicgLy8gUXVvdGVcclxuXHR8IFwibFwiIC8vIExvY2F0aW9uXHJcblx0fCBcImJcIiAvLyBCb29rbWFya1xyXG5cdHwgXCJpXCIgLy8gSW5mb3JtYXRpb25cclxuXHR8IFwiU1wiIC8vIFNhdmluZ3NcclxuXHR8IFwiSVwiIC8vIElkZWFcclxuXHR8IFwicFwiIC8vIFByb1xyXG5cdHwgXCJjXCIgLy8gQ2hhcmFjdGVyXHJcblx0fCBcImZcIiAvLyBGaXJlXHJcblx0fCBcImtcIiAvLyBLZXlcclxuXHR8IFwid1wiIC8vIFdpblxyXG5cdHwgXCJ1XCIgLy8gVXBcclxuXHR8IFwiZFwiOyAvLyBEb3duXHJcblxyXG4vKiogUmF3IElDUyBldmVudCBkYXRhICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSWNzRXZlbnQge1xyXG5cdC8qKiBVbmlxdWUgaWRlbnRpZmllciBmcm9tIElDUyAqL1xyXG5cdHVpZDogc3RyaW5nO1xyXG5cdC8qKiBFdmVudCBzdW1tYXJ5L3RpdGxlICovXHJcblx0c3VtbWFyeTogc3RyaW5nO1xyXG5cdC8qKiBFdmVudCBkZXNjcmlwdGlvbiAqL1xyXG5cdGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG5cdC8qKiBTdGFydCBkYXRlL3RpbWUgKi9cclxuXHRkdHN0YXJ0OiBEYXRlO1xyXG5cdC8qKiBFbmQgZGF0ZS90aW1lICovXHJcblx0ZHRlbmQ/OiBEYXRlO1xyXG5cdC8qKiBBbGwtZGF5IGV2ZW50IGZsYWcgKi9cclxuXHRhbGxEYXk6IGJvb2xlYW47XHJcblx0LyoqIEV2ZW50IGxvY2F0aW9uICovXHJcblx0bG9jYXRpb24/OiBzdHJpbmc7XHJcblx0LyoqIEV2ZW50IGNhdGVnb3JpZXMgKi9cclxuXHRjYXRlZ29yaWVzPzogc3RyaW5nW107XHJcblx0LyoqIEV2ZW50IHN0YXR1cyAoQ09ORklSTUVELCBURU5UQVRJVkUsIENBTkNFTExFRCkgKi9cclxuXHRzdGF0dXM/OiBzdHJpbmc7XHJcblx0LyoqIFJlY3VycmVuY2UgcnVsZSAqL1xyXG5cdHJydWxlPzogc3RyaW5nO1xyXG5cdC8qKiBFeGNlcHRpb24gZGF0ZXMgKi9cclxuXHRleGRhdGU/OiBEYXRlW107XHJcblx0LyoqIENyZWF0ZWQgdGltZXN0YW1wICovXHJcblx0Y3JlYXRlZD86IERhdGU7XHJcblx0LyoqIExhc3QgbW9kaWZpZWQgdGltZXN0YW1wICovXHJcblx0bGFzdE1vZGlmaWVkPzogRGF0ZTtcclxuXHQvKiogRXZlbnQgcHJpb3JpdHkgKDAtOSkgKi9cclxuXHRwcmlvcml0eT86IG51bWJlcjtcclxuXHQvKiogRXZlbnQgdHJhbnNwYXJlbmN5IChPUEFRVUUsIFRSQU5TUEFSRU5UKSAqL1xyXG5cdHRyYW5zcD86IHN0cmluZztcclxuXHQvKiogT3JnYW5pemVyIGluZm9ybWF0aW9uICovXHJcblx0b3JnYW5pemVyPzoge1xyXG5cdFx0bmFtZT86IHN0cmluZztcclxuXHRcdGVtYWlsPzogc3RyaW5nO1xyXG5cdH07XHJcblx0LyoqIEF0dGVuZGVlcyBpbmZvcm1hdGlvbiAqL1xyXG5cdGF0dGVuZGVlcz86IEFycmF5PHtcclxuXHRcdG5hbWU/OiBzdHJpbmc7XHJcblx0XHRlbWFpbD86IHN0cmluZztcclxuXHRcdHJvbGU/OiBzdHJpbmc7XHJcblx0XHRzdGF0dXM/OiBzdHJpbmc7XHJcblx0fT47XHJcblx0LyoqIEN1c3RvbSBwcm9wZXJ0aWVzICovXHJcblx0Y3VzdG9tUHJvcGVydGllcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XHJcblx0LyoqIFNvdXJjZSBJQ1MgY29uZmlndXJhdGlvbiAqL1xyXG5cdHNvdXJjZTogSWNzU291cmNlO1xyXG59XHJcblxyXG4vKiogSUNTIGV2ZW50IGNvbnZlcnRlZCB0byBUYXNrIGZvcm1hdCAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEljc1Rhc2sgZXh0ZW5kcyBUYXNrIHtcclxuXHQvKiogT3JpZ2luYWwgSUNTIGV2ZW50IGRhdGEgKi9cclxuXHRpY3NFdmVudDogSWNzRXZlbnQ7XHJcblx0LyoqIFdoZXRoZXIgdGhpcyB0YXNrIGlzIHJlYWQtb25seSAoZnJvbSBJQ1MpICovXHJcblx0cmVhZG9ubHk6IHRydWU7XHJcblx0LyoqIFdoZXRoZXIgdGhpcyB0YXNrIGlzIGEgYmFkZ2UgKi9cclxuXHRiYWRnZTogYm9vbGVhbjtcclxuXHQvKiogU291cmNlIGluZm9ybWF0aW9uICovXHJcblx0c291cmNlOiB7XHJcblx0XHR0eXBlOiBcImljc1wiO1xyXG5cdFx0bmFtZTogc3RyaW5nO1xyXG5cdFx0aWQ6IHN0cmluZztcclxuXHR9O1xyXG59XHJcblxyXG4vKiogSUNTIHBhcnNpbmcgcmVzdWx0ICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSWNzUGFyc2VSZXN1bHQge1xyXG5cdC8qKiBTdWNjZXNzZnVsbHkgcGFyc2VkIGV2ZW50cyAqL1xyXG5cdGV2ZW50czogSWNzRXZlbnRbXTtcclxuXHQvKiogUGFyc2luZyBlcnJvcnMgKi9cclxuXHRlcnJvcnM6IEFycmF5PHtcclxuXHRcdGxpbmU/OiBudW1iZXI7XHJcblx0XHRtZXNzYWdlOiBzdHJpbmc7XHJcblx0XHRjb250ZXh0Pzogc3RyaW5nO1xyXG5cdH0+O1xyXG5cdC8qKiBDYWxlbmRhciBtZXRhZGF0YSAqL1xyXG5cdG1ldGFkYXRhOiB7XHJcblx0XHQvKiogQ2FsZW5kYXIgbmFtZSAqL1xyXG5cdFx0Y2FsZW5kYXJOYW1lPzogc3RyaW5nO1xyXG5cdFx0LyoqIENhbGVuZGFyIGRlc2NyaXB0aW9uICovXHJcblx0XHRkZXNjcmlwdGlvbj86IHN0cmluZztcclxuXHRcdC8qKiBUaW1lIHpvbmUgKi9cclxuXHRcdHRpbWV6b25lPzogc3RyaW5nO1xyXG5cdFx0LyoqIFZlcnNpb24gKi9cclxuXHRcdHZlcnNpb24/OiBzdHJpbmc7XHJcblx0XHQvKiogUHJvZHVjdCBpZGVudGlmaWVyICovXHJcblx0XHRwcm9kaWQ/OiBzdHJpbmc7XHJcblx0fTtcclxufVxyXG5cclxuLyoqIElDUyBmZXRjaCByZXN1bHQgKi9cclxuZXhwb3J0IGludGVyZmFjZSBJY3NGZXRjaFJlc3VsdCB7XHJcblx0LyoqIFdoZXRoZXIgdGhlIGZldGNoIHdhcyBzdWNjZXNzZnVsICovXHJcblx0c3VjY2VzczogYm9vbGVhbjtcclxuXHQvKiogUGFyc2VkIHJlc3VsdCBpZiBzdWNjZXNzZnVsICovXHJcblx0ZGF0YT86IEljc1BhcnNlUmVzdWx0O1xyXG5cdC8qKiBFcnJvciBtZXNzYWdlIGlmIGZhaWxlZCAqL1xyXG5cdGVycm9yPzogc3RyaW5nO1xyXG5cdC8qKiBIVFRQIHN0YXR1cyBjb2RlICovXHJcblx0c3RhdHVzQ29kZT86IG51bWJlcjtcclxuXHQvKiogRmV0Y2ggdGltZXN0YW1wICovXHJcblx0dGltZXN0YW1wOiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKiBJQ1MgY2FjaGUgZW50cnkgKi9cclxuZXhwb3J0IGludGVyZmFjZSBJY3NDYWNoZUVudHJ5IHtcclxuXHQvKiogU291cmNlIElEICovXHJcblx0c291cmNlSWQ6IHN0cmluZztcclxuXHQvKiogQ2FjaGVkIGV2ZW50cyAqL1xyXG5cdGV2ZW50czogSWNzRXZlbnRbXTtcclxuXHQvKiogQ2FjaGUgdGltZXN0YW1wICovXHJcblx0dGltZXN0YW1wOiBudW1iZXI7XHJcblx0LyoqIENhY2hlIGV4cGlyeSB0aW1lICovXHJcblx0ZXhwaXJlc0F0OiBudW1iZXI7XHJcblx0LyoqIEVUYWcgZm9yIEhUVFAgY2FjaGluZyAqL1xyXG5cdGV0YWc/OiBzdHJpbmc7XHJcblx0LyoqIExhc3QtTW9kaWZpZWQgaGVhZGVyICovXHJcblx0bGFzdE1vZGlmaWVkPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKiogSUNTIG1hbmFnZXIgY29uZmlndXJhdGlvbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEljc01hbmFnZXJDb25maWcge1xyXG5cdC8qKiBMaXN0IG9mIElDUyBzb3VyY2VzICovXHJcblx0c291cmNlczogSWNzU291cmNlW107XHJcblx0LyoqIEdsb2JhbCByZWZyZXNoIGludGVydmFsIGluIG1pbnV0ZXMgKi9cclxuXHRnbG9iYWxSZWZyZXNoSW50ZXJ2YWw6IG51bWJlcjtcclxuXHQvKiogTWF4aW11bSBjYWNoZSBhZ2UgaW4gaG91cnMgKi9cclxuXHRtYXhDYWNoZUFnZTogbnVtYmVyO1xyXG5cdC8qKiBXaGV0aGVyIHRvIGVuYWJsZSBiYWNrZ3JvdW5kIHJlZnJlc2ggKi9cclxuXHRlbmFibGVCYWNrZ3JvdW5kUmVmcmVzaDogYm9vbGVhbjtcclxuXHQvKiogTmV0d29yayB0aW1lb3V0IGluIHNlY29uZHMgKi9cclxuXHRuZXR3b3JrVGltZW91dDogbnVtYmVyO1xyXG5cdC8qKiBNYXhpbXVtIG51bWJlciBvZiBldmVudHMgcGVyIHNvdXJjZSAqL1xyXG5cdG1heEV2ZW50c1BlclNvdXJjZTogbnVtYmVyO1xyXG5cdC8qKiBXaGV0aGVyIHRvIHNob3cgSUNTIGV2ZW50cyBpbiBjYWxlbmRhciB2aWV3cyAqL1xyXG5cdHNob3dJbkNhbGVuZGFyOiBib29sZWFuO1xyXG5cdC8qKiBXaGV0aGVyIHRvIHNob3cgSUNTIGV2ZW50cyBpbiB0YXNrIGxpc3RzICovXHJcblx0c2hvd0luVGFza0xpc3RzOiBib29sZWFuO1xyXG5cdC8qKiBEZWZhdWx0IGNvbG9yIGZvciBJQ1MgZXZlbnRzICovXHJcblx0ZGVmYXVsdEV2ZW50Q29sb3I6IHN0cmluZztcclxufVxyXG5cclxuLyoqIElDUyBzeW5jaHJvbml6YXRpb24gc3RhdHVzICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSWNzU3luY1N0YXR1cyB7XHJcblx0LyoqIFNvdXJjZSBJRCAqL1xyXG5cdHNvdXJjZUlkOiBzdHJpbmc7XHJcblx0LyoqIExhc3Qgc3luYyB0aW1lc3RhbXAgKi9cclxuXHRsYXN0U3luYz86IG51bWJlcjtcclxuXHQvKiogTmV4dCBzY2hlZHVsZWQgc3luYyAqL1xyXG5cdG5leHRTeW5jPzogbnVtYmVyO1xyXG5cdC8qKiBTeW5jIHN0YXR1cyAqL1xyXG5cdHN0YXR1czogXCJpZGxlXCIgfCBcInN5bmNpbmdcIiB8IFwiZXJyb3JcIiB8IFwiZGlzYWJsZWRcIjtcclxuXHQvKiogRXJyb3IgbWVzc2FnZSBpZiBzdGF0dXMgaXMgZXJyb3IgKi9cclxuXHRlcnJvcj86IHN0cmluZztcclxuXHQvKiogTnVtYmVyIG9mIGV2ZW50cyBzeW5jZWQgKi9cclxuXHRldmVudENvdW50PzogbnVtYmVyO1xyXG59XHJcblxyXG4vKiogSUNTIGV2ZW50IG9jY3VycmVuY2UgZm9yIHJlY3VycmluZyBldmVudHMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBJY3NFdmVudE9jY3VycmVuY2UgZXh0ZW5kcyBPbWl0PEljc0V2ZW50LCBcInJydWxlXCIgfCBcImV4ZGF0ZVwiPiB7XHJcblx0LyoqIE9yaWdpbmFsIGV2ZW50IFVJRCAqL1xyXG5cdG9yaWdpbmFsVWlkOiBzdHJpbmc7XHJcblx0LyoqIE9jY3VycmVuY2Ugc3RhcnQgdGltZSAqL1xyXG5cdG9jY3VycmVuY2VTdGFydDogRGF0ZTtcclxuXHQvKiogT2NjdXJyZW5jZSBlbmQgdGltZSAqL1xyXG5cdG9jY3VycmVuY2VFbmQ/OiBEYXRlO1xyXG5cdC8qKiBXaGV0aGVyIHRoaXMgaXMgYW4gZXhjZXB0aW9uICovXHJcblx0aXNFeGNlcHRpb246IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKiBIb2xpZGF5IGV2ZW50IGdyb3VwIGZvciBjb25zZWN1dGl2ZSBob2xpZGF5cyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEljc0hvbGlkYXlHcm91cCB7XHJcblx0LyoqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIGdyb3VwICovXHJcblx0aWQ6IHN0cmluZztcclxuXHQvKiogR3JvdXAgdGl0bGUvbmFtZSAqL1xyXG5cdHRpdGxlOiBzdHJpbmc7XHJcblx0LyoqIFN0YXJ0IGRhdGUgb2YgdGhlIGhvbGlkYXkgcGVyaW9kICovXHJcblx0c3RhcnREYXRlOiBEYXRlO1xyXG5cdC8qKiBFbmQgZGF0ZSBvZiB0aGUgaG9saWRheSBwZXJpb2QgKi9cclxuXHRlbmREYXRlOiBEYXRlO1xyXG5cdC8qKiBJbmRpdmlkdWFsIGV2ZW50cyBpbiB0aGlzIGdyb3VwICovXHJcblx0ZXZlbnRzOiBJY3NFdmVudFtdO1xyXG5cdC8qKiBTb3VyY2UgY29uZmlndXJhdGlvbiAqL1xyXG5cdHNvdXJjZTogSWNzU291cmNlO1xyXG5cdC8qKiBXaGV0aGVyIHRoaXMgaXMgYSBzaW5nbGUtZGF5IG9yIG11bHRpLWRheSBob2xpZGF5ICovXHJcblx0aXNNdWx0aURheTogYm9vbGVhbjtcclxuXHQvKiogRGlzcGxheSBzdHJhdGVneSBmb3IgdGhpcyBncm91cCAqL1xyXG5cdGRpc3BsYXlTdHJhdGVneTogXCJmaXJzdC1vbmx5XCIgfCBcInN1bW1hcnlcIiB8IFwicmFuZ2VcIjtcclxufVxyXG5cclxuLyoqIEVuaGFuY2VkIElDUyBldmVudCB3aXRoIGhvbGlkYXkgZGV0ZWN0aW9uICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSWNzRXZlbnRXaXRoSG9saWRheSBleHRlbmRzIEljc0V2ZW50IHtcclxuXHQvKiogV2hldGhlciB0aGlzIGV2ZW50IGlzIGRldGVjdGVkIGFzIGEgaG9saWRheSAqL1xyXG5cdGlzSG9saWRheTogYm9vbGVhbjtcclxuXHQvKiogSG9saWRheSBncm91cCB0aGlzIGV2ZW50IGJlbG9uZ3MgdG8gKGlmIGFueSkgKi9cclxuXHRob2xpZGF5R3JvdXA/OiBJY3NIb2xpZGF5R3JvdXA7XHJcblx0LyoqIFdoZXRoZXIgdGhpcyBldmVudCBzaG91bGQgYmUgc2hvd24gaW4gZm9yZWNhc3QgKi9cclxuXHRzaG93SW5Gb3JlY2FzdDogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqIFdlYmNhbCBVUkwgdmFsaWRhdGlvbiBhbmQgY29udmVyc2lvbiByZXN1bHQgKi9cclxuZXhwb3J0IGludGVyZmFjZSBXZWJjYWxWYWxpZGF0aW9uUmVzdWx0IHtcclxuXHQvKiogV2hldGhlciB0aGUgVVJMIGlzIHZhbGlkICovXHJcblx0aXNWYWxpZDogYm9vbGVhbjtcclxuXHQvKiogV2hldGhlciB0aGUgVVJMIGlzIGEgd2ViY2FsIFVSTCAqL1xyXG5cdGlzV2ViY2FsOiBib29sZWFuO1xyXG5cdC8qKiBUaGUgVVJMIHRvIHVzZSBmb3IgZmV0Y2hpbmcgKGNvbnZlcnRlZCBpZiBuZWVkZWQpICovXHJcblx0ZmV0Y2hVcmw/OiBzdHJpbmc7XHJcblx0LyoqIEVycm9yIG1lc3NhZ2UgaWYgdmFsaWRhdGlvbiBmYWlsZWQgKi9cclxuXHRlcnJvcj86IHN0cmluZztcclxuXHQvKiogV2FybmluZyBtZXNzYWdlIGZvciB1c2VyIGluZm9ybWF0aW9uICovXHJcblx0d2FybmluZz86IHN0cmluZztcclxufVxyXG5cclxuLyoqIFdlYmNhbC1yZWxhdGVkIGVycm9yIHR5cGVzICovXHJcbmV4cG9ydCB0eXBlIFdlYmNhbEVycm9yID1cclxuXHR8IFwiaW52YWxpZC11cmxcIlxyXG5cdHwgXCJjb252ZXJzaW9uLWZhaWxlZFwiXHJcblx0fCBcImZldGNoLWZhaWxlZFwiXHJcblx0fCBcInByb3RvY29sLW5vdC1zdXBwb3J0ZWRcIlxyXG5cdHwgXCJuZXR3b3JrLWVycm9yXCI7XHJcblxyXG4vKiogV2ViY2FsIGNvbnZlcnNpb24gb3B0aW9ucyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFdlYmNhbENvbnZlcnNpb25PcHRpb25zIHtcclxuXHQvKiogUHJlZmVyIEhUVFBTIG92ZXIgSFRUUCB3aGVuIGNvbnZlcnRpbmcgd2ViY2FsIFVSTHMgKi9cclxuXHRwcmVmZXJIdHRwcz86IGJvb2xlYW47XHJcblx0LyoqIEN1c3RvbSBwcm90b2NvbCBtYXBwaW5nIGZvciBzcGVjaWZpYyBob3N0cyAqL1xyXG5cdHByb3RvY29sTWFwcGluZz86IFJlY29yZDxzdHJpbmcsIFwiaHR0cFwiIHwgXCJodHRwc1wiPjtcclxuXHQvKiogVGltZW91dCBmb3IgVVJMIHZhbGlkYXRpb24gaW4gbWlsbGlzZWNvbmRzICovXHJcblx0dmFsaWRhdGlvblRpbWVvdXQ/OiBudW1iZXI7XHJcbn1cclxuIl19