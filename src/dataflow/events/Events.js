// Keep names simple and consistent
export const Events = {
    CACHE_READY: "task-genius:cache-ready",
    TASK_CACHE_UPDATED: "task-genius:task-cache-updated",
    FILE_UPDATED: "task-genius:file-updated",
    PROJECT_DATA_UPDATED: "task-genius:project-data-updated",
    SETTINGS_CHANGED: "task-genius:settings-changed",
    TASK_COMPLETED: "task-genius:task-completed",
    TASK_ADDED: "task-genius:task-added",
    TASK_UPDATED: "task-genius:task-updated",
    TASK_DELETED: "task-genius:task-deleted",
    WRITE_OPERATION_START: "task-genius:write-operation-start",
    WRITE_OPERATION_COMPLETE: "task-genius:write-operation-complete",
    ICS_EVENTS_UPDATED: "task-genius:ics-events-updated",
    FILE_TASK_UPDATED: "task-genius:file-task-updated",
    FILE_TASK_REMOVED: "task-genius:file-task-removed",
};
let _seq = 0;
export const Seq = {
    next() {
        _seq = (_seq + 1) >>> 0;
        return _seq;
    },
};
// Emit helpers (payload kept as any to maintain compatibility with existing trigger signatures)
export function emit(app, name, payload) {
    // @ts-expect-error keep compatibility with existing Obsidian typing overloads
    app.workspace.trigger(name, payload);
}
export function on(app, name, handler) {
    // Consumers should use component.registerEvent(on(...)) to auto-unsub
    return app.workspace.on(name, handler);
}
// Convenience
export const onTaskCacheUpdated = (app, handler) => on(app, Events.TASK_CACHE_UPDATED, handler);
export const emitTaskCacheUpdated = (app, payload) => emit(app, Events.TASK_CACHE_UPDATED, payload);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLG1DQUFtQztBQUNuQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUc7SUFDcEIsV0FBVyxFQUFFLHlCQUF5QjtJQUN0QyxrQkFBa0IsRUFBRSxnQ0FBZ0M7SUFDcEQsWUFBWSxFQUFFLDBCQUEwQjtJQUN4QyxvQkFBb0IsRUFBRSxrQ0FBa0M7SUFDeEQsZ0JBQWdCLEVBQUUsOEJBQThCO0lBQ2hELGNBQWMsRUFBRSw0QkFBNEI7SUFDNUMsVUFBVSxFQUFFLHdCQUF3QjtJQUNwQyxZQUFZLEVBQUUsMEJBQTBCO0lBQ3hDLFlBQVksRUFBRSwwQkFBMEI7SUFDeEMscUJBQXFCLEVBQUUsbUNBQW1DO0lBQzFELHdCQUF3QixFQUFFLHNDQUFzQztJQUNoRSxrQkFBa0IsRUFBRSxnQ0FBZ0M7SUFDcEQsaUJBQWlCLEVBQUUsK0JBQStCO0lBQ2xELGlCQUFpQixFQUFFLCtCQUErQjtDQUMxQyxDQUFDO0FBSVgsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFhO0lBQzNCLElBQUk7UUFDRixJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUM7QUFFRixnR0FBZ0c7QUFDaEcsTUFBTSxVQUFVLElBQUksQ0FBQyxHQUFRLEVBQUUsSUFBWSxFQUFFLE9BQWE7SUFDeEQsOEVBQThFO0lBQzlFLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRUQsTUFBTSxVQUFVLEVBQUUsQ0FBQyxHQUFRLEVBQUUsSUFBWSxFQUFFLE9BQWlDO0lBQzFFLHNFQUFzRTtJQUN0RSxPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQVcsRUFBRSxPQUFPLENBQWEsQ0FBQztBQUM1RCxDQUFDO0FBRUQsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsR0FBUSxFQUFFLE9BQStCLEVBQUUsRUFBRSxDQUM5RSxFQUFFLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM5QyxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLEdBQVEsRUFBRSxPQUFZLEVBQUUsRUFBRSxDQUM3RCxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQXBwLCBFdmVudFJlZiB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5cclxuLy8gS2VlcCBuYW1lcyBzaW1wbGUgYW5kIGNvbnNpc3RlbnRcclxuZXhwb3J0IGNvbnN0IEV2ZW50cyA9IHtcclxuICBDQUNIRV9SRUFEWTogXCJ0YXNrLWdlbml1czpjYWNoZS1yZWFkeVwiLFxyXG4gIFRBU0tfQ0FDSEVfVVBEQVRFRDogXCJ0YXNrLWdlbml1czp0YXNrLWNhY2hlLXVwZGF0ZWRcIixcclxuICBGSUxFX1VQREFURUQ6IFwidGFzay1nZW5pdXM6ZmlsZS11cGRhdGVkXCIsXHJcbiAgUFJPSkVDVF9EQVRBX1VQREFURUQ6IFwidGFzay1nZW5pdXM6cHJvamVjdC1kYXRhLXVwZGF0ZWRcIixcclxuICBTRVRUSU5HU19DSEFOR0VEOiBcInRhc2stZ2VuaXVzOnNldHRpbmdzLWNoYW5nZWRcIixcclxuICBUQVNLX0NPTVBMRVRFRDogXCJ0YXNrLWdlbml1czp0YXNrLWNvbXBsZXRlZFwiLFxyXG4gIFRBU0tfQURERUQ6IFwidGFzay1nZW5pdXM6dGFzay1hZGRlZFwiLFxyXG4gIFRBU0tfVVBEQVRFRDogXCJ0YXNrLWdlbml1czp0YXNrLXVwZGF0ZWRcIixcclxuICBUQVNLX0RFTEVURUQ6IFwidGFzay1nZW5pdXM6dGFzay1kZWxldGVkXCIsXHJcbiAgV1JJVEVfT1BFUkFUSU9OX1NUQVJUOiBcInRhc2stZ2VuaXVzOndyaXRlLW9wZXJhdGlvbi1zdGFydFwiLFxyXG4gIFdSSVRFX09QRVJBVElPTl9DT01QTEVURTogXCJ0YXNrLWdlbml1czp3cml0ZS1vcGVyYXRpb24tY29tcGxldGVcIixcclxuICBJQ1NfRVZFTlRTX1VQREFURUQ6IFwidGFzay1nZW5pdXM6aWNzLWV2ZW50cy11cGRhdGVkXCIsXHJcbiAgRklMRV9UQVNLX1VQREFURUQ6IFwidGFzay1nZW5pdXM6ZmlsZS10YXNrLXVwZGF0ZWRcIixcclxuICBGSUxFX1RBU0tfUkVNT1ZFRDogXCJ0YXNrLWdlbml1czpmaWxlLXRhc2stcmVtb3ZlZFwiLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuZXhwb3J0IHR5cGUgU2VxQ2xvY2sgPSB7IG5leHQoKTogbnVtYmVyIH07XHJcblxyXG5sZXQgX3NlcSA9IDA7XHJcbmV4cG9ydCBjb25zdCBTZXE6IFNlcUNsb2NrID0ge1xyXG4gIG5leHQoKSB7XHJcbiAgICBfc2VxID0gKF9zZXEgKyAxKSA+Pj4gMDtcclxuICAgIHJldHVybiBfc2VxO1xyXG4gIH0sXHJcbn07XHJcblxyXG4vLyBFbWl0IGhlbHBlcnMgKHBheWxvYWQga2VwdCBhcyBhbnkgdG8gbWFpbnRhaW4gY29tcGF0aWJpbGl0eSB3aXRoIGV4aXN0aW5nIHRyaWdnZXIgc2lnbmF0dXJlcylcclxuZXhwb3J0IGZ1bmN0aW9uIGVtaXQoYXBwOiBBcHAsIG5hbWU6IHN0cmluZywgcGF5bG9hZD86IGFueSk6IHZvaWQge1xyXG4gIC8vIEB0cy1leHBlY3QtZXJyb3Iga2VlcCBjb21wYXRpYmlsaXR5IHdpdGggZXhpc3RpbmcgT2JzaWRpYW4gdHlwaW5nIG92ZXJsb2Fkc1xyXG4gIGFwcC53b3Jrc3BhY2UudHJpZ2dlcihuYW1lLCBwYXlsb2FkKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uKGFwcDogQXBwLCBuYW1lOiBzdHJpbmcsIGhhbmRsZXI6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IEV2ZW50UmVmIHtcclxuICAvLyBDb25zdW1lcnMgc2hvdWxkIHVzZSBjb21wb25lbnQucmVnaXN0ZXJFdmVudChvbiguLi4pKSB0byBhdXRvLXVuc3ViXHJcbiAgcmV0dXJuIGFwcC53b3Jrc3BhY2Uub24obmFtZSBhcyBhbnksIGhhbmRsZXIpIGFzIEV2ZW50UmVmO1xyXG59XHJcblxyXG4vLyBDb252ZW5pZW5jZVxyXG5leHBvcnQgY29uc3Qgb25UYXNrQ2FjaGVVcGRhdGVkID0gKGFwcDogQXBwLCBoYW5kbGVyOiAocGF5bG9hZDogYW55KSA9PiB2b2lkKSA9PlxyXG4gIG9uKGFwcCwgRXZlbnRzLlRBU0tfQ0FDSEVfVVBEQVRFRCwgaGFuZGxlcik7XHJcbmV4cG9ydCBjb25zdCBlbWl0VGFza0NhY2hlVXBkYXRlZCA9IChhcHA6IEFwcCwgcGF5bG9hZDogYW55KSA9PlxyXG4gIGVtaXQoYXBwLCBFdmVudHMuVEFTS19DQUNIRV9VUERBVEVELCBwYXlsb2FkKTtcclxuXHJcbiJdfQ==