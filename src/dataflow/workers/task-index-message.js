/**
 * Message types for task indexing worker communication
 */
export {};
//# sourceMappingURL=data:application/json;base64,