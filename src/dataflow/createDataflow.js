/**
 * Factory function for creating and initializing the dataflow system
 */
import { __awaiter } from "tslib";
import { DataflowOrchestrator } from "./Orchestrator";
/**
 * Create and initialize a new dataflow orchestrator
 */
export function createDataflow(app, vault, metadataCache, plugin, projectOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const startTime = Date.now();
        console.log("[createDataflow] Creating dataflow orchestrator...");
        const orchestrator = new DataflowOrchestrator(app, vault, metadataCache, plugin, projectOptions);
        console.log("[createDataflow] Initializing dataflow orchestrator...");
        try {
            yield orchestrator.initialize();
            const elapsed = Date.now() - startTime;
            console.log(`[createDataflow] Dataflow orchestrator ready (took ${elapsed}ms)`);
        }
        catch (error) {
            console.error("[createDataflow] Failed to initialize orchestrator:", error);
            throw error;
        }
        return orchestrator;
    });
}
/**
 * Check if dataflow is enabled in settings
 */
export function isDataflowEnabled(plugin) {
    var _a;
    return (_a = plugin.settings.enableIndexer) !== null && _a !== void 0 ? _a : true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlRGF0YWZsb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcmVhdGVEYXRhZmxvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRzs7QUFNSCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0RDs7R0FFRztBQUNILE1BQU0sVUFBZ0IsY0FBYyxDQUNsQyxHQUFRLEVBQ1IsS0FBWSxFQUNaLGFBQTRCLEVBQzVCLE1BQTZCLEVBQzdCLGNBQXFEOztRQUVyRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO1FBRWxFLE1BQU0sWUFBWSxHQUFHLElBQUksb0JBQW9CLENBQzNDLEdBQUcsRUFDSCxLQUFLLEVBQ0wsYUFBYSxFQUNiLE1BQU0sRUFDTixjQUFjLENBQ2YsQ0FBQztRQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0RBQXdELENBQUMsQ0FBQztRQUN0RSxJQUFJO1lBQ0YsTUFBTSxZQUFZLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDaEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFNBQVMsQ0FBQztZQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLHNEQUFzRCxPQUFPLEtBQUssQ0FBQyxDQUFDO1NBQ2pGO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLHFEQUFxRCxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzVFLE1BQU0sS0FBSyxDQUFDO1NBQ2I7UUFFRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0NBQUE7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxNQUE2Qjs7SUFDN0QsT0FBTyxNQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxtQ0FBSSxJQUFJLENBQUM7QUFDL0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhbmQgaW5pdGlhbGl6aW5nIHRoZSBkYXRhZmxvdyBzeXN0ZW1cclxuICovXHJcblxyXG5pbXBvcnQgdHlwZSB7IEFwcCwgVmF1bHQsIE1ldGFkYXRhQ2FjaGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHR5cGUgVGFza1Byb2dyZXNzQmFyUGx1Z2luIGZyb20gXCIuLi9pbmRleFwiO1xyXG5pbXBvcnQgdHlwZSB7IFByb2plY3RDb25maWdNYW5hZ2VyT3B0aW9ucyB9IGZyb20gXCIuLi9tYW5hZ2Vycy9wcm9qZWN0LWNvbmZpZy1tYW5hZ2VyXCI7XHJcblxyXG5pbXBvcnQgeyBEYXRhZmxvd09yY2hlc3RyYXRvciB9IGZyb20gXCIuL09yY2hlc3RyYXRvclwiO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhbmQgaW5pdGlhbGl6ZSBhIG5ldyBkYXRhZmxvdyBvcmNoZXN0cmF0b3JcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVEYXRhZmxvdyhcclxuICBhcHA6IEFwcCxcclxuICB2YXVsdDogVmF1bHQsXHJcbiAgbWV0YWRhdGFDYWNoZTogTWV0YWRhdGFDYWNoZSxcclxuICBwbHVnaW46IFRhc2tQcm9ncmVzc0JhclBsdWdpbixcclxuICBwcm9qZWN0T3B0aW9ucz86IFBhcnRpYWw8UHJvamVjdENvbmZpZ01hbmFnZXJPcHRpb25zPlxyXG4pOiBQcm9taXNlPERhdGFmbG93T3JjaGVzdHJhdG9yPiB7XHJcbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICBjb25zb2xlLmxvZyhcIltjcmVhdGVEYXRhZmxvd10gQ3JlYXRpbmcgZGF0YWZsb3cgb3JjaGVzdHJhdG9yLi4uXCIpO1xyXG4gIFxyXG4gIGNvbnN0IG9yY2hlc3RyYXRvciA9IG5ldyBEYXRhZmxvd09yY2hlc3RyYXRvcihcclxuICAgIGFwcCxcclxuICAgIHZhdWx0LFxyXG4gICAgbWV0YWRhdGFDYWNoZSxcclxuICAgIHBsdWdpbixcclxuICAgIHByb2plY3RPcHRpb25zXHJcbiAgKTtcclxuICBcclxuICBjb25zb2xlLmxvZyhcIltjcmVhdGVEYXRhZmxvd10gSW5pdGlhbGl6aW5nIGRhdGFmbG93IG9yY2hlc3RyYXRvci4uLlwiKTtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgb3JjaGVzdHJhdG9yLmluaXRpYWxpemUoKTtcclxuICAgIGNvbnN0IGVsYXBzZWQgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xyXG4gICAgY29uc29sZS5sb2coYFtjcmVhdGVEYXRhZmxvd10gRGF0YWZsb3cgb3JjaGVzdHJhdG9yIHJlYWR5ICh0b29rICR7ZWxhcHNlZH1tcylgKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIltjcmVhdGVEYXRhZmxvd10gRmFpbGVkIHRvIGluaXRpYWxpemUgb3JjaGVzdHJhdG9yOlwiLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIG9yY2hlc3RyYXRvcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIGRhdGFmbG93IGlzIGVuYWJsZWQgaW4gc2V0dGluZ3NcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGFmbG93RW5hYmxlZChwbHVnaW46IFRhc2tQcm9ncmVzc0JhclBsdWdpbik6IGJvb2xlYW4ge1xyXG4gIHJldHVybiBwbHVnaW4uc2V0dGluZ3MuZW5hYmxlSW5kZXhlciA/PyB0cnVlO1xyXG59Il19