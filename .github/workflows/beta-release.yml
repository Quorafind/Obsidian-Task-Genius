# .github/workflows/beta-release.yml

name: "Automatic Beta Release on PR Commit"

on:
    pull_request:
        # Trigger on PR creation or when new commits are pushed
        types: [opened, synchronize]
        # IMPORTANT: Change 'main' to your default branch if it's different (e.g., 'master')
        branches:
            - master
    push:
        # Only trigger on push to specific branches (more secure)
        branches:
            - master
            - "feat/**"
            - "release/**"

env:
    PLUGIN_NAME: obsidian-task-genius

# Grant permissions for the action to create a release
permissions:
    contents: write
    pull-requests: read

jobs:
    build-and-release-beta:
        if: |
          contains(github.event.head_commit.message, '[release-beta]') && (
            (github.event_name == 'push' && github.actor == github.repository_owner) ||
            (github.event_name == 'pull_request' && github.event.pull_request.author_association == 'OWNER')
          )
        runs-on: ubuntu-latest
        steps:
            - name: "Checkout code"
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: "Use Node.js 22"
              uses: actions/setup-node@v4
              with:
                  node-version: 22

            - name: "Install pnpm"
              uses: pnpm/action-setup@v4
              with:
                  version: 9

            - name: "Install dependencies"
              run: pnpm install

            - name: "Get version from package.json"
              id: get_version
              run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

            - name: "Get commit messages since last release"
              id: get_commits
              run: |
                  LAST_TAG=$(git tag --sort=-version:refname | head -n 1 2>/dev/null || echo "")
                  if [ -z "$LAST_TAG" ]; then
                    echo "No previous tag found, getting all commits from the beginning"
                    COMMIT_MESSAGES=$(git log --pretty=format:"- %s (%an) [%h](https://github.com/${{ github.repository }}/commit/%H)" --no-merges)
                  else
                    echo "Getting commits since last tag: $LAST_TAG"
                    TAG_COMMIT=$(git rev-list -n 1 $LAST_TAG)
                    COMMIT_MESSAGES=$(git log ${TAG_COMMIT}..HEAD --pretty=format:"- %s (%an) [%h](https://github.com/${{ github.repository }}/commit/%H)" --no-merges)
                  fi
                  if [ -z "$COMMIT_MESSAGES" ]; then
                    COMMIT_MESSAGES="- No new commits since last release"
                  fi
                  echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV
                  echo "$COMMIT_MESSAGES" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV
                  echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV

            - name: "Build and package plugin"
              id: build
              run: |
                  pnpm run build
                  mkdir ${{ env.PLUGIN_NAME }}
                  cp main.js manifest.json styles.css ${{ env.PLUGIN_NAME }}/
                  zip -r ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}.zip ./${{ env.PLUGIN_NAME }}

            - name: "Create Beta Pre-Release"
              uses: softprops/action-gh-release@v2
              with:
                  body: |
                      ${{ github.event_name == 'pull_request' && format('üöÄ Automated beta release for PR #{0}', github.event.pull_request.number) || 'üöÄ Automated beta release' }}

                      ## üìù Changes since last release${{ env.LAST_TAG && format(' ({0})', env.LAST_TAG) || '' }}:

                      ${{ env.COMMIT_MESSAGES }}

                      ---

                      ${{ github.event_name == 'pull_request' && github.event.pull_request.body || '' }}
                  prerelease: true
                  tag_name: "v${{ env.VERSION }}"
                  name: "Beta Release v${{ env.VERSION }}"
                  files: |
                      ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}.zip
                      main.js
                      manifest.json
                      styles.css
